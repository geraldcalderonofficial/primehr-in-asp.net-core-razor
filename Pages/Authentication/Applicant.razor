@page "/applicant"
@using HRMSv4.Client.Interface.Auth
@using HRMSv4.Shared.Auth
@using System.Text
@layout LoginLayout
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject IAuthenticationService AuthenticationService;
@inject NavigationManager NavManager
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@inject SweetAlertService Swal
@using System.ComponentModel.DataAnnotations
@using Newtonsoft.Json
@using System.Text.RegularExpressions
@using System.Runtime.Serialization.Json;
@using Newtonsoft.Json.Linq;
@using reCAPTCHADemo.Services;
@inject GooglereCaptchaService _googlereCaptchaService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    .e-input-eye:before {
        content: '\e345';
        font-family: e-icons;
        font-size: 13px;
    }

    .active {
        background-color: #666;
        color: white;
    }

    #MainBg {
        background-image: url('/images/applicantbg.jpg') !important;
        background-size: cover;
    }
</style>

<div class="d-flex h-100 justify-content-center align-items-center">
    <div class="mx-auto app-login-box col-md-8">
        <a href="/" style="cursor: pointer;" @onclick="RemoveJobId"><!--<div class="app-logo-inverse mx-auto mb-3"></div>--></a>
        <div class="modal-dialog w-100">
            <EditForm class="form-signin" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit" Model="registerRequest">
                <DataAnnotationsValidator />
                <div class="modal-content">
                    <div class="modal-body">
                        <h5 class="modal-title">
                            <h4 class="mt-2">
                                <div>Welcome new applicant,</div>
                                <span>
                                    It only takes a
                                    <span class="text-success">few seconds</span> to create your account
                                </span>
                            </h4>
                        </h5>
                        @* <div class="row">
                        <div class="col-sm-6 col-xl-6 col-md-6" style="cursor:pointer;">
                        <div class="@isSeekerActive font-icon-wrapper" @onclick="SeekerToggleSwitch">
                        <i class="pe-7s-user"></i>
                        <p><strong>Job Seeker</strong></p>
                        </div>
                        </div>
                        <div class="col-sm-6 col-xl-6 col-md-6" style="cursor:pointer">
                        <div class="@isProviderActive font-icon-wrapper" @onclick="ProviderToggleSwitch">
                        <i class="pe-7s-users"></i>
                        <p><strong>Job Provider</strong></p>
                        </div>
                        </div>
                        </div>
                        <div class="col-sm-12 col-xl-12 col-md-12 text-center">
                        <span @bind="@registerRequest.IsJobSeeker">@selected</span>
                        <ValidationMessage For="@(() => registerRequest.IsJobSeeker)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                        </div>*@
                        <div class="col-md-12">
                            <div class="col mb-2">
                                <span style="color:red;">* <RadzenLabel Text="Email" Style="color:black;"></RadzenLabel></span>
                                <InputText class="form-control" placeholder="Email" autofocus @bind-Value="@registerRequest.Email" />
                                <ValidationMessage For="@(() => registerRequest.Email)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="col mb-2">
                                <span style="color:red;">* <RadzenLabel Text="Username" Style="color:black;"></RadzenLabel></span>
                                <InputText class="form-control" placeholder="Username" autofocus @bind-Value="@registerRequest.UserName" />
                                <ValidationMessage For="@(() => registerRequest.UserName)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="row">
                                <div class="col mb-2">
                                    <span style="color:red;">* <RadzenLabel Text="First Name" Style="color:black;" /></span>
                                    <InputText class="form-control" placeholder="First Name" autofocus @bind-Value="@registerRequest.FirstName" />
                                    <ValidationMessage For="@(() => registerRequest.FirstName)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                                </div>
                                <div class="col mb-2">
                                    <RadzenLabel Text="Middle Name" Style="color:black;" />
                                    <InputText id="inputUsername" class="form-control" placeholder="Middle Name" autofocus @bind-Value="@registerRequest.MiddleName" />
                                    <ValidationMessage For="@(() => registerRequest.MiddleName)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                                </div>
                                <div class="col mb-2">
                                    <span style="color:red;">* <RadzenLabel Text="Last Name" Style="color:black;" /></span>
                                    <InputText id="inputLastname" class="form-control" placeholder="Last Name" autofocus @bind-Value="@registerRequest.LastName" />
                                    <ValidationMessage For="@(() => registerRequest.LastName)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="position-relative mb-2">
                                <span style="color:red;">* <RadzenLabel Text="Password" Style="color:black;" /></span>
                                <div class="input-group">
                                    <InputText type="@(showPassword ? "text" : "password")" id="inputPassword" class="form-control fl-left" placeholder="Password" @bind-Value="@registerRequest.Password"></InputText>
                                    <button type="button" class="btn btn-secondary" @onclick="ToggleShowPassword"><i class="fa fa-eye"></i></button>
                                </div><!-- /input-group -->
                                <ValidationMessage For="@(() => registerRequest.Password)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="position-relative mb-2">
                                <span style="color:red;">* <RadzenLabel Text="Password Confirmation" Style="color:black;" /></span>
                                <InputText type="@(showPassword ? "text" : "password")" id="inputPasswordConfirm" class="form-control" placeholder="Password Confirmation" @bind-Value="@registerRequest.PasswordConfirm" />
                                <ValidationMessage For="@(() => registerRequest.PasswordConfirm)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                            </div>
                        </div>
                        <div class="mt-3 position-relative form-check">
                            <InputCheckbox @bind-Value="@registerRequest.TermsAgreement" />
                            <label for="exampleCheck" class="form-label form-check-label">
                                Accept our
                                <a href="javascript:void(0);">Terms and Conditions</a>.
                            </label>
                            <ValidationMessage For="@(() => registerRequest.TermsAgreement)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                        </div>
                        <div class="divider row"></div>
                        <h6 class="mb-0">
                            Already have an account?
                            <a href="javascript:void(0);" @onclick="()=>GoToLogin()" class="text-primary">Sign in</a>
                            @*|<a href="javascript:void(0);" class="text-primary">Recover Password</a>*@
                        </h6>
                    </div>
                    @if (isCaptchaSet)
                    {
                        <div class="section mb-2" style="text-align: -webkit-center; text-align:-moz-center;">
                            <ReCAPTCHA @ref="reCAPTCHAComponent" SiteKey="6LeDW0MfAAAAAKOrcnvh8vXriJ9wqXrnJcTkiEtx" OnSuccess="OnSuccess" OnExpired="OnExpired" />
                        </div>
                    }
                    <div class="modal-footer d-block text-center">
                        <div class="g-recaptcha " id="captchaElement" data-sitekey="6LeDW0MfAAAAAKOrcnvh8vXriJ9wqXrnJcTkiEtx"></div>
                        <button class="btn btn-lg btn-primary btn-block" type="submit">Create account</button>
                        <label style="text-align: center;color: red; margin-top: 10px;margin-bottom: 10px;">@error</label>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@functions {
    private bool showPassword;
    private string? password;
    public string? error { get; set; }
    public string? selected { get; set; }
    private bool isJobSeeker = true;
    string SuccessMessage = string.Empty;
    string _subdomain = string.Empty;

    public Form ValidationForm { get; set; }

    private string isSeekerActive = string.Empty;
    private string isProviderActive = string.Empty;

    [Parameter]
    public string? Password { get; set; }
    public string? ConfirmPassword { get; set; }

    RegisterRequest registerRequest { get; set; } = new RegisterRequest();

    [Parameter]
    public EventCallback<string> PasswordChanged { get; set; }

    public class Form
    {
        [Range(typeof(bool), "true", "true", ErrorMessage = "You must agree to the terms and conditions.")]
        public bool TermsAgreement { get; set; }
    }

    //captcha
    private ReCAPTCHA reCAPTCHAComponent;

    private bool ValidReCAPTCHA = false;

    private bool isCaptchaSet
    {
        get; set;
    }
    private void OnSuccess()
    {
        ValidReCAPTCHA = true;
    }

    private void OnExpired()
    {
        ValidReCAPTCHA = false;
    }

    async void RemoveJobId()
    {
        await localStorage.RemoveItemAsync("jobId");
    }

    private bool ServerVerificatiing = false;

    protected override void OnInitialized()
    {
        /* Get Subdomain for unique identifier on company*/

        Uri baseUri = new Uri(_navigation.BaseUri);
        _subdomain = GetSubDomain(baseUri);
        Console.WriteLine(_subdomain);

        ValidationForm = new Form();
        string hasCaptcha = config.GetSection("CaptchaEnabled")["status"].ToString();

        if (hasCaptcha == "true")
        {
            isCaptchaSet = true;
        }
        else
        {
            isCaptchaSet = false;
            ValidReCAPTCHA = true;
        }
    }

    private void SeekerToggleSwitch()
    {
        /* Job Seeeker */
        isJobSeeker = false;
        selected = "Job Seeker";
        isSeekerActive = "active";
        isProviderActive = string.Empty;
    }

    private void ProviderToggleSwitch()
    {
        /* Job Provider */
        isJobSeeker = true;
        selected = "Job Provider";
        isSeekerActive = string.Empty;
        isProviderActive = "active";
    }

    void HandleInvalidSubmit()
    {
        SuccessMessage = string.Empty;
    }

    async Task HandleValidSubmit()
    {
        error = null;
        /* Check for terms check box*/
        if (!registerRequest.TermsAgreement)
        {
            await Swal.FireAsync("Oops!", "You must agree to the terms and conditions.", "warning");
            return;
        }

        /* Allow Username or Email as login account */
        if (registerRequest.Email.IndexOf('@') > -1)
        {
            string emailRegex = @"^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}" +
                       @"\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\" +
                          @".)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$";
            Regex re = new Regex(emailRegex);
            if (!re.IsMatch(registerRequest.Email))
            {
                await Swal.FireAsync("Oops!", "Email is not valid.", "warning");
                return;
            }
        }

        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirming Registration",
                Html = "<p><strong>Username:</strong> " + registerRequest.UserName + " </p><p> <strong>Email: </strong>" + registerRequest.Email + "</p><p> <strong>Fullname: </strong>" + registerRequest.LastName + ", " + registerRequest.FirstName + " " + registerRequest.MiddleName + "</p>",
                Icon = "warning",
                CancelButtonColor = "#414141",
                AllowOutsideClick = false,
                ShowCancelButton = true,
                ConfirmButtonText = "Confirm",
                CancelButtonText = "Cancel"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            try
            {
                //new
                if (isCaptchaSet)
                {
                    if (ValidReCAPTCHA)
                    {
                        var response = await reCAPTCHAComponent.GetResponseAsync();
                        try
                        {
                            ServerVerificatiing = true;
                            StateHasChanged();

                            registerRequest.Subdomain = _subdomain;
                            //registerRequest.IsJobSeeker = isJobSeeker;

                            var resRegistration = await AuthenticationService.RegisterApplicant(registerRequest);

                            if (resRegistration.IsSuccessStatusCode)
                            {
                                var email = registerRequest.Email;
                                registerRequest = new RegisterRequest();
                                navigationManager.NavigateTo($"/register-success/{email}");
                            }
                        }
                        catch (HttpRequestException e)
                        {
                            await _Swal.FireAsync("Oops!", e.Message, "warning");
                            ServerVerificatiing = false;
                            StateHasChanged();
                        }
                    }
                }
                else
                {
                    registerRequest.Subdomain = _subdomain;
                    var resRegistration = await AuthenticationService.RegisterApplicant(registerRequest);

                    if (resRegistration.IsSuccessStatusCode)
                    {
                        var email = registerRequest.Email;
                        registerRequest = new RegisterRequest();
                        navigationManager.NavigateTo($"/register-success/{email}");
                    }
                }
            }
            catch (Exception ex)
            {
                if (ex.Message != null)
                {
                    string error = Newtonsoft.Json.JsonConvert.SerializeObject(ex.Message).ToString();

                    JObject json = JObject.Parse(ex.Message);

                    foreach (var item in json)
                    {
                        string errorDesc = string.Empty;
                        if (item.Key == "errors")
                        {
                            errorDesc = item.Value.ToString().Replace("[", "");
                            errorDesc = errorDesc.Replace("]", "");
                            await Swal.FireAsync("Error", errorDesc, "error");
                            break;
                        }
                    }
                }
            }
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
            await Swal.FireAsync(
                "Cancelled",
                "You cancel your registration, please try again.",
                "error"
                );
        }
    }

    private async Task OnPasswordChanged(ChangeEventArgs e)
    {
        password = e?.Value?.ToString();

        await PasswordChanged.InvokeAsync(password);
    }

    private void ToggleShowPassword()
    {
        showPassword = !showPassword;
    }

    private void GoToLogin()
    {
        navigationManager.NavigateTo("/login");
    }

    private static string GetSubDomain(Uri url)
    {
        if (url.HostNameType == UriHostNameType.Dns)

        {
            string host = url.Host;
            if (host.Split('.').Length > 2)

            {
                int lastIndex = host.LastIndexOf(".");
                int index = host.LastIndexOf(".", lastIndex - 1);
                return host.Substring(0, index);
            }
        }
        return null;
    }
}
