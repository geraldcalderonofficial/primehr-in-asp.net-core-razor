@page "/change-password"
@using HRMSv4.Client.Interface.Auth
@using HRMSv4.Shared.Auth
@using Microsoft.AspNetCore.WebUtilities
@layout LoginLayout

<div class="app-logo-inverse mx-auto mb-3"></div>
<div class="modal-dialog w-100">
    <EditForm class="" OnValidSubmit="OnSubmit" Model="changepw">
        <div class="modal-content">
            <div class="modal-header">
                <div class="h5 modal-title">
                    Change Password
                </div>
            </div>
            <div class="modal-body">
                <div>
                    <div class="">
                        <div class="col-md-12">
                            <div class="position-relative mb-3">
                                <label for="inputPassword" class="sr-only">Password</label>
                                <div class="input-group">
                                    <InputText type="@(showPassword ? "text" : "password")" id="inputPassword" class="form-control fl-left" placeholder="Password" @bind-Value="@changepw.Password"></InputText>

                                    <button type="button" class="btn btn-secondary" @onclick="ToggleShowPassword"><i class="fa fa-eye"></i></button>

                                </div><!-- /input-group -->
                                <ValidationMessage For="@(() => changepw.Password)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="position-relative mb-3">
                                <label for="inputPasswordConfirm" class="sr-only">Password Confirmation</label>
                                <div class="input-group">
                                    <InputText type="@(showPassword ? "text" : "password")" id="inputPassword" class="form-control fl-left" placeholder="Confirm Password" @bind-Value="@changepw.ConfirmPassword"></InputText>

                                    <button type="button" class="btn btn-secondary" @onclick="ToggleShowConfirmPassword"><i class="fa fa-eye"></i></button>

                                </div><!-- /input-group -->

                                <ValidationMessage For="@(() => changepw.ConfirmPassword)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="divider"></div>
                <h6 class="mb-0">
                    <a href="javascript:void(0);" @onclick="()=>GoToLogin()" class="text-primary">Sign in existing account</a>
                </h6>
            </div>
            <div class="modal-footer clearfix">
                <div class="float-end">
                    <button class="btn btn-primary btn-lg" type="submit">Submit</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>
<div class="text-center opacity-8 mt-3" style="color:black;">
    Copyright ©2022 Nspire, <a href="https://www.primehr.ph">PrimeHR v4</a> ®
    @{
        Version version = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version;
        <b>Build : @string.Format("{0}.{1}.{2}.{3}", version.Major, version.Minor, version.Build, version.Revision)</b>
    }
</div>

@code {
    private bool showPassword;
    private bool showConfirmPassword;
    public string resMsg = string.Empty;
    private string? _email;
    private string? _code;

    ResetPasswordRequest changepw = new ResetPasswordRequest();

    protected override async Task OnInitializedAsync()
    {
        var uri = _navigation.ToAbsoluteUri(_navigation.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);
        if (queryStrings.TryGetValue("email", out var userVal))
        {
            _email = userVal;
        }

        if (queryStrings.TryGetValue("Token", out var codeVal))
        {
            _code = codeVal;
        }
    }

    async Task OnSubmit()
    {
        changepw.Email = _email;
        changepw.Token = _code;

        var res = await _authInterfaceService.ChangePassword(changepw);
        if (res.IsSuccessStatusCode)
        {
            SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Success",
                    Text = "Password successfully reset.",
                    Icon = "success",
                    ShowCancelButton = true,
                    ConfirmButtonText = "Okay",

                });

            if (!string.IsNullOrEmpty(result.Value))
            {
                _navigation.NavigateTo("/login");
            }
        }
    }

    private void ToggleShowPassword()
    {
        showPassword = !showPassword;
    }

    private void ToggleShowConfirmPassword()
    {
        showConfirmPassword = !showConfirmPassword;
    }

    private void GoToLogin()
    {
        _navigation.NavigateTo("/login");
    }
}
