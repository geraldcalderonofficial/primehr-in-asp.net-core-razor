@page "/employee-invited"
@using HRMSv4.Client.Interface.Auth
@using System.Text
@layout LoginLayout
@inject IJSRuntime JSRuntime
@inject IAuthenticationService AuthenticationService;
@inject IEmployee EmployeeService
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities

<style>
    .e-input-eye:before {
        content: '\e345';
        font-family: e-icons;
        font-size: 13px;
    }
</style>

<div class="d-flex h-100 justify-content-center align-items-center">
    <div class="mx-auto app-login-box col-md-8">
        <div class="app-logo-inverse mx-auto mb-3"></div>
        <div class="modal-dialog w-100">
            <EditForm class="form-signin" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit" Model="registerRequest">
                <DataAnnotationsValidator />
                <div class="modal-content">
                    <div class="modal-body">
                        <h5 class="modal-title">
                            <h4 class="mt-2">
                                <div>Invitation to join to register to primeHR,</div>
                                <span style="font-size: 14px;">
                                    Hi! <strong>@FullName</strong>, Lucky you! primeHR wants to collaborate with you. To register, please fill up form below then click register account button.
                                </span>
                            </h4>
                        </h5>
                        <div class="">
                            <div class="col-md-12">
                                <div class="position-relative mb-3">
                                    <label for="inputEmail" class="sr-only">Email</label>
                                    <InputText id="inputEmail" class="form-control" placeholder="Email" autofocus @bind-Value="@registerRequest.Email" disabled="@IsDisabled" />
                                    <ValidationMessage For="@(() => registerRequest.Email)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="position-relative mb-3">
                                    <label for="inputUsername" class="sr-only">User Name</label>
                                    <InputText id="inputUsername" class="form-control" placeholder="Username" autofocus @bind-Value="@registerRequest.UserName" />
                                    <ValidationMessage For="@(() => registerRequest.UserName)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="row">
                                    <div class="col">
                                        <div class="position-relative mb-3">
                                            <label for="inputUsername" class="sr-only">First Name</label>
                                            <InputText id="inputFirstname" class="form-control" placeholder="First Name" autofocus @bind-Value="@registerRequest.FirstName" disabled="@IsDisabled" />
                                            <ValidationMessage For="@(() => registerRequest.FirstName)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="position-relative mb-3">
                                            <label for="inputUsername" class="sr-only">Last Name</label>
                                            <InputText id="inputLastname" class="form-control" placeholder="Last Name" autofocus @bind-Value="@registerRequest.LastName" disabled="@IsDisabled" />
                                            <ValidationMessage For="@(() => registerRequest.LastName)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="position-relative mb-3">
                                            <label for="inputMiddlename" class="sr-only">Middle Name</label>
                                            <InputText id="inputUsername" class="form-control" placeholder="Middle Name" autofocus @bind-Value="@registerRequest.MiddleName" disabled="@IsDisabled" />
                                            <ValidationMessage For="@(() => registerRequest.MiddleName)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="position-relative mb-3">
                                    <label for="inputPassword" class="sr-only">Password</label>
                                    <div class="input-group">
                                        <InputText type="@(showPassword ? "text" : "password")" id="inputPassword" class="form-control fl-left" placeholder="Password" @bind-Value="@registerRequest.Password"></InputText>

                                        <button type="button" class="btn btn-secondary" @onclick="ToggleShowPassword"><i class="fa fa-eye"></i></button>

                                    </div><!-- /input-group -->
                                    <ValidationMessage For="@(() => registerRequest.Password)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="position-relative mb-3">
                                    <label for="inputPasswordConfirm" class="sr-only">Password Confirmation</label>
                                    <InputText type="@(showPassword ? "text" : "password")" id="inputPasswordConfirm" class="form-control" placeholder="Password Confirmation" @bind-Value="@registerRequest.PasswordConfirm" />
                                    <ValidationMessage For="@(() => registerRequest.PasswordConfirm)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                                </div>
                            </div>
                        </div>
                        <div class="mt-3 position-relative form-check">
                            <InputCheckbox @bind-Value="@registerRequest.TermsAgreement" />
                            <label for="exampleCheck" class="form-label form-check-label">
                                Accept our
                                <a href="javascript:void(0);">Terms and Conditions</a>.
                            </label>
                            <ValidationMessage For="@(() => registerRequest.TermsAgreement)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                        </div>
                        <div class="divider row"></div>
                        <h6 class="mb-0">
                            Already have an account?
                            <a href="javascript:void(0);" @onclick="()=>GoToLogin()" class="text-primary">Sign in</a>
                            @*|<a href="javascript:void(0);" class="text-primary">Recover Password</a>*@
                        </h6>
                    </div>
                    <div class="modal-footer d-block text-center">
                        <div class="g-recaptcha " id="captchaElement" data-sitekey="6LeDW0MfAAAAAKOrcnvh8vXriJ9wqXrnJcTkiEtx"></div>
                        <button class="btn btn-lg btn-primary btn-block" type="submit">Register account</button>
                        <label style="text-align: center;color: red; margin-top: 10px;margin-bottom: 10px;">@error</label>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@functions {
    private bool showPassword;
    private string? password;
    public string? error { get; set; }
    string SuccessMessage = string.Empty;
    public Form ValidationForm { get; set; }

    public string FullName { get; set; }
    public string _firstName { get; set; }
    public string _lastName { get; set; }
    public string _middleName { get; set; }

    protected bool IsDisabled { get; set; } = true;

    public int _employeeId { get; set; }
    public string _code { get; set; }
    public string _email { get; set; }

    [Parameter]
    public string? Password { get; set; }
    public string? ConfirmPassword { get; set; }

    HRMSv4.Shared.Auth.InvitedEmployeeRequest  registerRequest { get; set; } = new HRMSv4.Shared.Auth.InvitedEmployeeRequest();
    HRMSv4.Shared.OnBoarding.Employee _employee { get; set; } = new HRMSv4.Shared.OnBoarding.Employee();

    [Parameter]
    public EventCallback<string> PasswordChanged { get; set; }

    public class Form
    {
        [Range(typeof(bool), "true", "true", ErrorMessage = "You must agree to the terms and conditions.")]
        public bool TermsAgreement { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        ValidationForm = new Form();

        var uri = _navigation.ToAbsoluteUri(_navigation.Uri);
        var queryStrings = QueryHelpers.ParseQuery(uri.Query);

        if (queryStrings.TryGetValue("employeeId", out var empVal))
        {
            _employeeId = int.Parse(empVal);
        }

        if (queryStrings.TryGetValue("code", out var accessCode))
        {
            _code = accessCode;
        }

        _employee = await EmployeeService.Get(_employeeId);

        FullName = _employee.LastName + ", " + _employee.FirstName + " " + _employee.MiddleName;

        registerRequest.Email = _employee.EmailAddress;
        registerRequest.FirstName = _employee.FirstName;
        registerRequest.LastName = _employee.LastName;
        registerRequest.MiddleName = _employee.MiddleName;
    }

    void HandleInvalidSubmit()
    {
        SuccessMessage = string.Empty;
    }

    async Task HandleValidSubmit()
    {
        error = null;
        /* Check for terms check box*/
        if (!registerRequest.TermsAgreement)
        {
            await _Swal.FireAsync("Oops!", "You must agree to the terms and conditions.", "warning");
            return;
        }

        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirming Registration",
                Html = "<p> Username: " + registerRequest.UserName + " </p><p> Email: " + registerRequest.Email + "</p><p> Firstname: " + registerRequest.FirstName + "</p>" +
                                        "<p> lastname: " + registerRequest.LastName + "</p><p> Middlename: " + registerRequest.MiddleName + "</p>",
                Icon = "warning",
                ShowCancelButton = true,
                ConfirmButtonText = "Confirmed",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#999999"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            try
            {
                string hasCaptcha = config.GetSection("CaptchaEnabled")["status"].ToString();
                if (hasCaptcha == "true")
                {
                    bool b = false;
                    var arvin = JSRuntime.InvokeAsync<string>("onloadCallback");

                    b = await JSRuntime.InvokeAsync<bool>("GetResponseCaptcha");

                    if (b == true)
                    {
                        var uri = _navigation.ToAbsoluteUri(_navigation.Uri);
                        //var subdomain = GetDomains(uri);

                        //registerRequest.subdomain = subdomain.ToString();
                        //registerRequest.IsJobSeeker = isJobSeeker;

                        var resRegistration = await AuthenticationService.InvitedUser(registerRequest);

                        if (!resRegistration.IsSuccessfulRegistration)
                        {
                            string resError = resRegistration.Errors.ToString();
                            await _Swal.FireAsync("Oops!", resError, "warning");
                        }
                        else
                        {
                            var email = registerRequest.Email;
                            registerRequest = new HRMSv4.Shared.Auth.InvitedEmployeeRequest();
                            _navigation.NavigateTo($"/register-success/{email}");
                        }
                    }
                    else
                    {
                        await _Swal.FireAsync("Oops!", "Captcha is required.", "warning");
                    }
                }
                else
                {
                    var uri = _navigation.ToAbsoluteUri(_navigation.Uri);
                    //var subdomain = GetDomains(uri);

                    //registerRequest.subdomain = subdomain.ToString();
                    //registerRequest.IsJobSeeker = isJobSeeker;
                    registerRequest.EmployeeId = _employeeId;
                    registerRequest.AccessCode = _code;

                    var resRegistration = await AuthenticationService.InvitedUser(registerRequest);

                    if (!resRegistration.IsSuccessfulRegistration)
                    {
                        string resError = resRegistration.Errors.FirstOrDefault();
                        await _Swal.FireAsync("Oops!", resError, "warning");
                    }
                    else
                    {
                        var email = registerRequest.Email;

                        SweetAlertResult sweet = await _Swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "Registration Successful",
                                Html = "Congratulations, your account has been successfully created. You may now login using your registered account.",
                                Icon = "success",
                                ShowCancelButton = false,
                                ConfirmButtonText = "Yes"
                            });

                        if (!string.IsNullOrEmpty(sweet.Value))
                        {
                             _navigation.NavigateTo("/");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                error = ex.Message;
            }
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
            await _Swal.FireAsync(
                "Canceled",
                "You cancel your registration, please try again.",
                "error"
                );
        }
    }

    private async Task OnPasswordChanged(ChangeEventArgs e)
    {
        password = e?.Value?.ToString();

        await PasswordChanged.InvokeAsync(password);
    }

    private void ToggleShowPassword()
    {
        showPassword = !showPassword;
    }

    private void GoToLogin()
    {
        _navigation.NavigateTo("/login");
    }
}
