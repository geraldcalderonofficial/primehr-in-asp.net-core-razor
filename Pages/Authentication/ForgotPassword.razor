@page "/forgotpassword"
@using HRMSv4.Client.Interface.Auth
@using HRMSv4.Shared.Auth
@using Newtonsoft.Json.Linq;
@layout LoginLayout

<a href="/" style="cursor: pointer;"><div class="app-logo-inverse mx-auto mb-3"></div></a>
<div class="modal-dialog w-100">
    <EditForm class="" OnValidSubmit="OnSubmit" Model="forgot">
        <div class="modal-content">
            <div class="modal-header">
                <div class="h5 modal-title">
                    Forgot your Password?
                    <h6 class="mt-1 mb-0 opacity-8">
                        <span>Use  the form below to reset it.</span>
                    </h6>
                </div>
            </div>
            <div class="modal-body">
                <div>
                    <form class="">
                        <div class="">
                            <div class="col-md-12">
                                <div class="position-relative mb-3">
                                    <label for="exampleEmail" class="form-label">Email</label>
                                    <InputText id="inputEmail" class="form-control" placeholder="Email" autofocus @bind-Value="@forgot.Email" />
                                    <ValidationMessage For="@(() => forgot.Email)" style="text-align: center;color: red; margin-top: 2px;margin-bottom: 2px;" />
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="divider"></div>
                <h6 class="mb-0">
                    <a href="javascript:void(0);" @onclick="()=>GoToLogin()" class="text-primary">Sign in existing account</a>
                </h6>
            </div>
            <div class="modal-footer clearfix">
                <div class="float-end">
                    <button class="btn btn-primary btn-lg" type="submit">Send password reset request.</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>
<div class="text-center opacity-8 mt-3" style="color:black;">
    Copyright ©2022 Nspire, <a href="https://www.primehr.ph">PrimeHR v4</a> ®
    @{
        Version version = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version;
        <b>Build : @string.Format("{0}.{1}.{2}.{3}", version.Major, version.Minor, version.Build, version.Revision)</b>
    }
</div>


@code {
    ForgotPasswordRequest forgot = new ForgotPasswordRequest();

    private void GoToLogin()
    {
        _navigation.NavigateTo("/login");
    }

    async Task OnSubmit()
    {
        try
        {
            string boom = _navigation.Uri;
            var uri = _navigation.ToAbsoluteUri(_navigation.Uri);

            string pathQuery = uri.PathAndQuery;
            string hostName = uri.ToString().Replace(pathQuery, "");
            forgot.URL = hostName;

            var res = await _authInterfaceService.Forgot(forgot);

            if (res.IsSuccessStatusCode)
            {
                var email = forgot.Email;
                forgot = new ForgotPasswordRequest();
                _navigation.NavigateTo($"/forgotrequestmessage/{email}");
            } else
            {
                var returnResponse = await res.Content.ReadAsStringAsync();

                await _Swal.FireAsync("Error", "Unable to process your request encountered an error.", "error");
            }
        }
        catch (Exception ex)
        {
            //await _Swal.FireAsync("Error", ex.Message, "error");
            if (ex.Message != null)
            {
                string error = Newtonsoft.Json.JsonConvert.SerializeObject(ex.Message).ToString();

                JObject json = JObject.Parse(ex.Message);

                foreach (var item in json)
                {
                    string errorDesc = string.Empty;
                    if (item.Key == "errors")
                    {
                        errorDesc = item.Value.ToString().Replace("[", "");
                        errorDesc = errorDesc.Replace("]", "");
                        await _Swal.FireAsync("Error", errorDesc, "error");
                        break;
                    }
                }
            }
        }
    }
}
