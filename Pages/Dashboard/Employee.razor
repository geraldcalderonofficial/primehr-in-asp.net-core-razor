@page "/dashboard/{client}/{tempId}"
@attribute [Authorize(Roles = "Job Seeker, Job Provider, Employee, Administrator")]
@layout EmptyLayout
@using HRMSv4.Client.Shared.MainComponents
@using HRMSv4.Client.Service
@using HRMSv4.Client.Shared.Modals.EmployeeModals
@using HRMSv4.Shared.Misc
@using HRMSv4.Shared.OnBoarding
@using HRMSv4.Shared
@using HRMSv4.Client.Shared.Modals
@using Microsoft.AspNetCore.Components.Web.Extensions.Head
@using static HRMSv4.Shared.OnBoarding.EducationalAttainment
@using HRMSv4.Client.Pages.Dashboard.EmployeeContent
@using HRMSv4.Shared.Audit
@using System.Net
@inject IEmployee empService
@inject IAddress addService
@inject IEduAttainment _EduAttainment
@inject InfoGlobalClass _infoglobalclass
@inject SweetAlertService Swal;
@inject IJSRuntime JSRuntime;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJobVacancies serviceJobVacancy
@inject IProfileUpdate profileUpdate

<style>
    .avatar-upload {
        position: relative;
        max-width: 205px;
        margin: auto;
        margin-bottom: 20px;
    }

        .avatar-upload .avatar-edit {
            position: absolute;
            right: -5px;
            z-index: 1;
            top: 70px;
        }

            .avatar-upload .avatar-edit input {
                display: none;
            }

                .avatar-upload .avatar-edit input + label {
                    display: inline-block;
                    width: 34px;
                    height: 34px;
                    margin-bottom: 0;
                    border-radius: 100%;
                    background: #ffffff;
                    border: 1px solid #d2d6de;
                    box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.12);
                    cursor: pointer;
                    font-weight: normal;
                    transition: all 0.2s ease-in-out;
                }

                    .avatar-upload .avatar-edit input + label:hover {
                        background: #f1f1f1;
                        border-color: #d6d6d6;
                    }

                    .avatar-upload .avatar-edit input + label:after {
                        content: "";
                        font-family: "fontawesome";
                        color: #337ab7;
                        position: absolute;
                        left: 0;
                        right: 0;
                        text-align: center;
                        line-height: 34px;
                        margin: auto;
                    }
</style>
<Title Value=@("HRMSv4 - " + employee.LastName + ", " + employee.FirstName) />
<div class="app-header header-shadow" style="position: relative; width: 100%; background: white;">
    <HRMSv4.Client.Shared.MainComponents.Header />
</div>
<div class="app-inner-layout chat-layout" style="height: 100vh; overflow-x: hidden; overflow-y: auto; position: absolute; top: 0; margin-top: 60px; width: 100%;">
    <div class="row" style="padding-right: 1rem;">
        <div class="row" style="padding: 0; margin-left: 10px">
            <div class="app-inner-layout__header text-white bg-premium-dark">
                <div class="app-page-title">
                    <div class="page-title-wrapper">
                        <div class="page-title-heading">
                            <div class="avatar-icon-wrapper btn-hover-shine mb-2 avatar-icon-xl">
                                <div class="avatar-upload">
                                    <div class="avatar-edit">
                                        <InputFile type="file" id="imageUpload" accept=".png, .jpg, .jpeg" OnChange="e => LoadFiles(e)" autocompleted="" />
                                        <label for="imageUpload"></label>
                                    </div>
                                    <div class="avatar-preview">
                                        <img style="height:100px; width:100px" class="profile-user-img img-responsive img-circle avatar-icon rounded" id="imagePreview" src="@ApiImage" alt="User profile picture">
                                    </div>
                                </div>
                            </div>
                            <div class="mx-3">
                                WELCOME, @employee.FirstName!
                                <AuthorizeView Context="EmployeeAdditonalInfo" Roles="Employee, Administrator, Job Provider">
                                    <div class="page-title-subheading mx-3">Employee #: @employee.EmployeeNumber </div>
                                    <div class="page-title-subheading mx-3">Position : @employee.Designation </div>
                                    <div class="page-title-subheading mx-3">Department : @employee.Department </div>
                                </AuthorizeView>
                            </div>
                        </div>
                        <div class="page-title-actions">
                            <div class="page-title-actions">
                                <div class="d-inline-block dropdown">
                                    <button type="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"
                                            class="btn-shadow dropdown-toggle btn btn-info">
                                        <span class="btn-icon-wrapper pe-2 opacity-7">
                                            <i class="fa fa-business-time fa-w-20"></i>
                                        </span>
                                        Actions
                                    </button>
                                    <div tabindex="-1" role="menu" aria-hidden="true"
                                         class="dropdown-menu dropdown-menu-right">
                                        <ul class="nav flex-column">
                                            @*<li class="nav-item">
                                                <a class="nav-link" onclick="@(() => PDSFileAssistance())">
                                                    <i class="nav-link-icon pe-7s-bottom-arrow"></i>
                                                    <span> Import/Download PDS</span>
                                                </a>
                                            </li>*@
                                            <li class="nav-item">
                                                <a class="nav-link" onclick="@(() => PrintPds())">
                                                    <i class="nav-link-icon pe-7s-print"></i>
                                                    <span> Print PDS</span>
                                                </a>
                                            </li>
                                            <AuthorizeView Roles="Administrator, Job Provider">
                                                @if (profUpdate.ProfileUpdateId > 0)
                                                {
                                                    <li class="nav-item">
                                                        <a class="nav-link" onclick="@(() => RequestEdit())">
                                                            <i class="nav-link-icon pe-7s-paper-plane"></i>
                                                            <span> Request Information Edit</span>
                                                        </a>
                                                    </li>
                                                }
                                            </AuthorizeView>
                                            <AuthorizeView Roles="Employee, Job Seeker">
                                                <li class="nav-item">
                                                    <a class="nav-link" onclick="@(() => RequestEdit())">
                                                        <i class="nav-link-icon pe-7s-paper-plane"></i>
                                                        <span> Request Information Edit</span>
                                                    </a>
                                                </li>
                                            </AuthorizeView>
                                            <li class="nav-item">
                                                <a class="nav-link" onclick="@(() => Edit())">
                                                    <i class="nav-link-icon pe-7s-note"></i>
                                                    <span> Edit</span>
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-3">
            <div class="p-3" style="position: sticky; top: 0; height: 100vh; overflow-x: hidden; overflow-y: auto; margin-bottom: 40px;">
                <div class="dropdown-menu nav p-0 dropdown-menu-inline dropdown-menu-rounded dropdown-menu-hover-primary">
                    @foreach (var nav in _NavGroup)
                    {
                        <AuthorizeView Roles="Employee, Administrator, Job Provider">
                            @if (nav.Contains("EMPLOYEE"))
                            {
                                <h5 tabindex="-1" class="pt-0 dropdown-header">Employee</h5>
                                @foreach (var item in types)
                                {
                                    if (_employee.Contains(item.Name))
                                    {
                                        @switch (item.Name)
                                        {
                                            case "EmployeeScheduleLogs":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Schedule Logs
                                                </a>
                                                break;
                                            @*case "PerformanceEvaluation":
                        <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                        Performance Evaluation
                        </a>
                        break;*@
                                            case "EmployeeLeaves":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Leaves
                                                </a>
                                                break;
                                            case "TravelOrder":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Travel Order
                                                </a>
                                                break;
                                            case "LocatorSlipContent":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Locator's Slip
                                                </a>
                                                break;
                                            case "PermissionToLeave":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Permission to Leave
                                                </a>
                                                break;
                                            case "EmployeeLoans":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Loans
                                                </a>
                                                break;
                                            case "EmployeeAllowance":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Allowance
                                                </a>
                                                break;
                                            case "Premiums":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Premiums
                                                </a>
                                                break;
                                            @* case "Violation":
                        <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                        Violations
                        </a>
                        break;*@
                                            default:
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Service Records
                                                </a>
                                                break;
                                        }
                                    }
                                }
                            }
                            </AuthorizeView">
                        if (nav.Contains("PERSONAL"))
                        {
                            <h5 tabindex="-1" class="pt-0 dropdown-header">Personal</h5>
                            @foreach (var item in types)
                            {
                                if (_personal.Contains(item.Name))
                                {
                                    @switch (item.Name)
                                    {
                                        case "BasicInfo":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Basic Information
                                                </a>
                                            break;
                                        case "Relatives":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Family Members
                                                </a>
                                            break;
                                        case "Educational":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Educational Attainment
                                                </a>
                                            break;
                                        case "Eligibility":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Eligibilities
                                                </a>
                                            break;
                                        case "Experience":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Work Experiences
                                                </a>
                                            break;
                                        case "CommunityService":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Community Service
                                                </a>
                                            break;
                                        case "CharacterReferences":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Character References
                                                </a>
                                            break;
                                        case "_201Files":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    201 Files
                                                </a>
                                            break;
                                        case "TrainingSeminars":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    Training Seminars
                                                </a>
                                            break;
                                        case "EmployeeDashboard":
                                                <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                    My Dashboard
                                                </a>
                                            break;
                                    }

                                }
                            }
                        }
                        if (@nav.Contains("MISCELLANEOUS"))
                        {
                                <h5 tabindex="-1" class="pt-0 dropdown-header">Miscellaneous</h5>
                            @foreach (var item in types)
                            {
                                if (_miscelaneous.Contains(item.Name))
                                {
                                    if (item.Name == "Jobapplication")
                                    {
                                            <a @onclick="() => selected = Array.IndexOf(types, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item" style="margin-left:30px; width: 90% !important;">
                                                Job Application
                                            </a>
                                    }
                                }
                            }
                        }
                    }
                </div>
            </div>
        </div>
        <div class="col-9">
            <div class="pb-5 pt-3">
                <div class="mobile-app-menu-btn mb-3">
                    <button type="button" class="hamburger hamburger--elastic">
                        <span class="hamburger-box">
                            <span class="hamburger-inner"></span>
                        </span>
                    </button>
                </div>
                <div class="tab-content">
                    @GetRenderFragment(types[selected])
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter] public string tempId { get; set; }
    [Parameter] public string client { get; set; }

    ProfileUpdateView profUpdate = new ProfileUpdateView();

    private Header _header;
    public int employeeId { get; set; }
    private bool isBasic { get; set; } = true;

    private bool isBasicInfo { get; set; } = true;
    private bool isRelatives { get; set; } = false;
    private bool isExperience { get; set; } = false;
    private bool isEligibility { get; set; } = false;
    private bool isEducational { get; set; } = false;

    private bool isCommunity { get; set; } = false;
    private bool isTraining { get; set; } = false;
    private bool isReference { get; set; } = false;
    private bool isCredentials { get; set; } = false;
    private bool isService { get; set; } = false;
    private bool isJobApplication { get; set; } = false;

    private bool isContact { get; set; } = false;

    private string[] _schoolLevel;
    private string[] _schoolCourse;

    private string ApiImage = string.Empty;

    private string _autoSelect = string.Empty;

    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1000000 * 2; /* 2MB */
    private int maxAllowedFiles = 1;

    DateTime? value = DateTime.Now;

    IEnumerable<DateTime> dates = new DateTime[] { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };

    public DateTime? StartValue { get; set; } = DateTime.Now;
    public DateTime? EndValue { get; set; } = DateTime.Now.AddDays(10);

    private string LevelSelected { get; set; }
    private string InclusiveDates { get; set; }

    /* For Radzen data list */
    IEnumerable<IDictionary<string, object>> data;
    int count;

    RadzenDataGrid<EducationalListview> schoolGrid;

    UploadedFile _uploadedData = new UploadedFile();
    /* End of Initialize list of data for radzen*/

    HRMSv4.Shared.OnBoarding.EmployeeListView employee = new HRMSv4.Shared.OnBoarding.EmployeeListView();
    HRMSv4.Shared.OnBoarding.LocationListView location = new LocationListView();
    string BirthDate = "";
    DateTime bday = new DateTime();

    int selected { get; set; } = 1;

    List<string> _personal = new List<string>(new[] { "EmployeeDashboard", "BasicInfo", "Relatives", "Educational", "Eligibility", "Experience", "CommunityService", "TrainingSeminars", "CharacterReferences", "_201Files" });
    List<string> _employee = new List<string>(new[] { "Competency", "ServiceRecord", "EmployeeScheduleLogs", "PerformanceEvaluation", "EmployeeLeaves", "TravelOrder", "LocatorSlipContent", "PermissionToLeave", "EmployeeLoans", "EmployeeAllowance", "Premiums", "Violation" });
    List<string> _miscelaneous = new List<string>(new[] { "Jobapplication" });

    List<string> _NavGroup = new List<string>(new[] { "EMPLOYEE", "PERSONAL", "MISCELLANEOUS" });

    RenderFragment GetRenderFragment(Type type)
    {
        RenderFragment renderFragment = renderTreeBuilder =>
        {
            renderTreeBuilder.OpenComponent(0, type);
            renderTreeBuilder.AddAttribute(1, "employeeId", employeeId);
            renderTreeBuilder.CloseComponent();
        };
        return renderFragment;
    }

    ComponentBase[] components = {
        new Dashboard.EmployeeContent.EmployeeDashboard(),
        new BasicInfo(),
        new Relatives(),
        new Educational(),
        new Eligibility(),
        new Experience(),
        new CommunityService(),
        new TrainingSeminars(),
        new CharacterReferences(),
        new _201Files(),
        new Dashboard.EmployeeContent.ServiceRecord(),
        new Dashboard.EmployeeContent.EmployeeScheduleLogs(),
        //new PerformanceEvaluation(),
        new EmployeeLeaves(),
        new TravelOrder(),
        new Dashboard.EmployeeContent.LocatorSlipContent(),
        new PermissionToLeave(),
        new EmployeeLoans(),
        new EmployeeAllowance(),
        new Dashboard.EmployeeContent.Premiums(),
        new Awards(),
        //new Violation(),
        new Jobapplication()
    };

    Type[] types => components.Select(c => c.GetType()).ToArray();

    static public bool isImageExists(int empId, string fileName)
    {
        bool result = false;

        var imgLocation = Path.Combine("Uploads/Employees", "Avatar");

        var pathToSave = Path.Combine(imgLocation, Convert.ToString(empId));

        if (File.Exists(pathToSave + "/" + fileName))
        {
            result = true;
        }
        else
        {
            result = false;
        }
        return result;
    }

    protected override async Task OnInitializedAsync()
    {
        var role = string.Empty;
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        //LoadBasicInfo();
        try
        {
            //try
            //{
            //    role = user.FindFirst(c => c.Type.Contains("role"))?.Value;
            //    if (role == string.Empty)
            //    {
            //        return;
            //    }

            //}
            //catch (Exception e)
            //{

            //    throw e;
            //}

            if (!user.Identity.IsAuthenticated)
            {
                _navigation.NavigateTo("/");
            }
            else
            {

                role = user.FindFirst(c => c.Type.Contains("role"))?.Value;

                string DecodedUrl = string.Empty;

                string paramId = _crypto.ConvertHexToString(tempId, System.Text.Encoding.Unicode);

                //string paramId = await Crypto.DecryptAsync(DecodedUrl);

                employeeId = int.Parse(paramId);

                if (!string.IsNullOrWhiteSpace(paramId))
                {
                    //employeeId = int.Parse(paramId);

                    if (employeeId > 0)
                    {
                        employee = await empService.View(employeeId);

                        if (employee != null)
                        {
                            if (employee.ImageName != "default-avatar-grey.png")
                            {
                                if (isImageExists(employeeId, employee.ImageName))
                                {
                                    ApiImage =  "Uploads/Employees/Avatar/" + employeeId + "/" + employee.ImageName;
                                }
                                else
                                {
                                    if (employee.Gender.ToLower() == "male")
                                    {
                                        ApiImage =  "images/avatars/default-avatar.png";
                                    }
                                    else
                                    {
                                        ApiImage =  "images/avatars/avatar_women_white.svg";
                                    }
                                }
                            }
                            else
                            {
                                if (employee.Gender.ToLower() == "male")
                                {
                                    ApiImage = "images/avatars/default-avatar.png";
                                }
                                else
                                {
                                    ApiImage =  "images/avatars/avatar_women_white.svg";
                                }
                            }

                            this.StateHasChanged();

                            /* If new application show Basic information modal */
                            if (string.IsNullOrWhiteSpace(employee.UpdatedBy))
                            {
                                var parameters = new ModalParameters();
                                parameters.Add(nameof(HRMSv4.Client.Shared.Modals.EmployeeModals.EmployeeModal.employeeId), employeeId);

                                var options = new ModalOptions()
                                    {
                                        HideCloseButton = true,
                                        DisableBackgroundCancel = true,
                                        Animation = ModalAnimation.FadeIn(0.2),
                                        ContentScrollable = true,

                                    };
                                /* Need to change modal title base on role */
                                string roleTitle = string.Empty;

                                if (role == RoleConstants.JobSeekerRole)
                                {
                                    roleTitle = "Edit Applicant";
                                }
                                else
                                {
                                    roleTitle = "Edit Employee";
                                }

                                //Modal.Show<EmployeeModal>(roleTitle, parameters, options);
                                var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.EmployeeModals.EmployeeModal>(roleTitle, parameters, options);

                                var modalResult = await _modalStatus.Result;

                                if (!modalResult.Cancelled)
                                {
                                    isBasicInfo = true;

                                    var jobEncryptId = await localStorage.GetItemAsync<string>("jobId");
                                    //string jobId = await Crypto.DecryptAsync(jobEncryptId);
                                    string jobId = _crypto.ConvertHexToString(jobEncryptId, System.Text.Encoding.Unicode);

                                    if (!string.IsNullOrWhiteSpace(jobId))
                                    {
                                        /* Click a tag */
                                        isBasic = false;
                                        this.StateHasChanged();
                                        var parametersJob = new ModalParameters();
                                        parametersJob.Add(nameof(HRMSv4.Client.Shared.Modals.JobVacancyApplyModal.JobVacancyId), int.Parse(jobId));
                                        parametersJob.Add(nameof(HRMSv4.Client.Shared.Modals.JobVacancyApplyModal.EmployeeId), employeeId);
                                        var optionsJob = new ModalOptions()
                                            {
                                                DisableBackgroundCancel = true,
                                                Animation = ModalAnimation.FadeIn(0.2)

                                            };
                                        var _modalStatusJob = Modal.Show<HRMSv4.Client.Shared.Modals.JobVacancyApplyModal>("Apply", parametersJob, optionsJob);
                                        var modalResultJob = await _modalStatusJob.Result;
                                        if (!modalResultJob.Cancelled)
                                        {
                                            /* Ronald was here 4/20/2022 GetAll remarks */
                                            //jobvacancies = await service.GetList("0");
                                            //await esGrid.Reload();
                                            await localStorage.RemoveItemAsync("jobId");
                                            this.StateHasChanged();
                                        }
                                    }

                                    this.StateHasChanged();
                                }
                            }
                            else
                            {
                                /* Check for job Id */
                                /* Check for job id applied if exists */
                                var jobEncryptId = await localStorage.GetItemAsync<string>("jobId");
                                //string jobId = await Crypto.DecryptAsync(jobEncryptId);

                                if (!string.IsNullOrWhiteSpace(jobEncryptId))
                                {
                                    string jobId = _crypto.ConvertHexToString(jobEncryptId, System.Text.Encoding.Unicode);
                                    /* Click a tag */
                                    isBasic = false;
                                    this.StateHasChanged();
                                    var parameters = new ModalParameters();

                                    //get muna kung sa login employee ung job application
                                    var selectedJob = await serviceJobVacancy.GetById(int.Parse(jobId));

                                    if (selectedJob.JobVacancyId > 0)
                                    {
                                        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.JobVacancyApplyModal.JobVacancyId), int.Parse(jobId));
                                        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.JobVacancyApplyModal.EmployeeId), employeeId);
                                        var options = new ModalOptions()
                                            {
                                                DisableBackgroundCancel = true,
                                                Animation = ModalAnimation.FadeIn(0.2)

                                            };
                                        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.JobVacancyApplyModal>("Apply", parameters, options);
                                        var modalResult = await _modalStatus.Result;
                                        if (!modalResult.Cancelled)
                                        {
                                            /* Ronald was here 4big it service.GetList("0");
                                            //await esGrid.Reload();
                                            await localStorage.RemoveItemAsync("jobId");
                                            this.StateHasChanged();*/
                                        }
                                    }
                                }
                            }
                        }                       
                    }
                    //else
                    //{
                    //    /* Get Link to AspNetUser current user id */
                    //    await Swal.FireAsync("Oops!", "Login user does not have a link to employee table.", "info");
                    //}

                    this.StateHasChanged();
                }
            }
        }
        catch (Exception e)
        {
            if (string.IsNullOrEmpty(role.ToString()))
            {
                string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
                await _authInterfaceService.Logout(userId);
            }
            else
            {
                throw e;
            }
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        //var authState = await authenticationStateTask;
        //var user = authState.User;

        //string userId = user.Identity.Name;

        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        if (e.FileCount > maxAllowedFiles)
        {
            await Swal.FireAsync("Oops!", "File upload is limit to " + maxAllowedFiles, "info");
            loadedFiles.Clear();
            StateHasChanged();
        }
        else
        {
            loadedFiles.Clear();

            foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
            {
                try
                {
                    if (file.Size > maxFileSize)
                    {
                        await Swal.FireAsync("Oops!", "A Filename : " + file.Name + " is over the limit of allow file size for upload ", "info");
                        return;
                    }
                    else
                    {
                        loadedFiles.Add(file);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
            /* Upload File*/
            List<UploadedFile> uploadedFile = new List<UploadedFile>();

            foreach (var file in loadedFiles)
            {
                // I used the value 200000 which is about 2MB
                Stream stream = file.OpenReadStream(50000000); /* 50MB */
                MemoryStream ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                stream.Close();
                ms.Close();

                var data = new UploadedFile
                    {
                        Id = employeeId,
                        FileName = file.Name,
                        FileContent = ms.ToArray(),
                        CreatedBy = userId,
                    };
                uploadedFile.Add(data);
            }
            /* Call Interface */
            string fileName = await empService.UploadAvatar(uploadedFile);

            if (!string.IsNullOrWhiteSpace(ApiImage))
            {
                SweetAlertResult response = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Success",
                        Text = "A new avatar has been uploaded successfully.",
                        Icon = "success",
                        ShowCancelButton = false,
                        AllowOutsideClick = false,
                        ConfirmButtonText = "Ok"
                    });
                if (!string.IsNullOrEmpty(response.Value))
                {
                    var imgLocation = Path.Combine("Uploads/Employees", "Avatar");
                    ApiImage = imgLocation + "/" + employeeId + "/" + fileName;
                    this.StateHasChanged();
                }
            }
        }
    }

    private void PDSFileAssistance()
    {
        try
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(PdsAssistance.EmployeeeId), employeeId);
            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    Animation = ModalAnimation.FadeIn(0.2),
                    ContentScrollable = true,
                };

            Modal.Show<PdsAssistance>("PDS Assistance", parameters, options);
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    private void RequestEdit()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(RequestProfileUpdateModal.employeeId), employeeId);

        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),
                ContentScrollable = true,
            };

        Modal.Show<RequestProfileUpdateModal>("Profile Update", parameters, options);
    }

    private async void Edit()
    {
        isBasic = false;

        var parameters = new ModalParameters();
        parameters.Add(nameof(EmployeeModal.employeeId), employeeId);

        string modalTitle = string.Empty;

        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),
                ContentScrollable = true,

            };

        if (string.IsNullOrWhiteSpace(employee.EmployeeNumber))
        {
            modalTitle = "Edit Applicant";
        }
        else
        {
            modalTitle = "Edit Employee";
        }

        var formModal = Modal.Show<EmployeeModal>(modalTitle, parameters, options);

        var result = await formModal.Result;
        if (result.Cancelled == false)
        {
            employee = await empService.View(employeeId);

            if (employee.ImageName == "default-avatar-grey.png")
            {
                ApiImage = "/images/avatars/default-avatar-grey.png";
            }
            else
            {
                ApiImage = "Uploads/Employees/Avatar/" + employee.EmployeeId + "/" + employee.ImageName;
            }
            isBasic = true;
            this.StateHasChanged();

            if (employeeId == employee.EmployeeId)
            {
                await localStorage.SetItemAsync("ImageName", employee.ImageName);
                _header.UpdateAvatar();
            }

            /* Check for job id applied if exists */
            var jobEncryptId = await localStorage.GetItemAsync<string>("jobId");
            string jobId = _crypto.ConvertHexToString(jobEncryptId, System.Text.Encoding.Unicode);

            if (!string.IsNullOrWhiteSpace(jobId))
            {
                /* Show apply with job id save */
                isBasic = false;
                this.StateHasChanged();
                var _modalParam = new ModalParameters();
                _modalParam.Add(nameof(HRMSv4.Client.Shared.Modals.JobVacancyApplyModal.JobVacancyId), int.Parse(jobId));
                _modalParam.Add(nameof(HRMSv4.Client.Shared.Modals.JobVacancyApplyModal.EmployeeId), employeeId);
                var _modalOptions = new ModalOptions()
                    {
                        DisableBackgroundCancel = true,
                        Animation = ModalAnimation.FadeIn(0.2)
                    };
                var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.JobVacancyApplyModal>("Apply", _modalParam, _modalOptions);
                var modalResult = await _modalStatus.Result;
                if (!modalResult.Cancelled)
                {
                    this.StateHasChanged();
                }
            }
        }
    }

    private async void LoadBasicInfo()
    {
        string paramId = _crypto.ConvertHexToString(tempId, System.Text.Encoding.Unicode);

        employeeId = int.Parse(paramId);

        employee = await empService.View(employeeId); //sample employee

        profUpdate = await profileUpdate.Get(employeeId);

        StateHasChanged();


        //BirthDate = employee.BirthDate != default(DateTime) ? employee.BirthDate.ToString("MMMM dd, yyyy") : "";
        /* Need to recheck this 12/19/2022 */
        //if (employee.ResedentialPsgcCode != null)
        //{
        //    location = await addService.GetLocation(employee.ResedentialPsgcCode);
        //}
    }

    async Task SaveBasicInfo(HRMSv4.Shared.OnBoarding.Employee emp)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Do you want to save it?",
                Text = "Please check information before submitting!",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                AllowOutsideClick = false,
                ConfirmButtonText = "Yes",
                CancelButtonText = "No",
                CancelButtonColor = "#999999"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await empService.Update(emp);
            await Swal.FireAsync("Success", "You have successfully save a record.", "success");
        }
    }

    //Relatives    IEnumerable<HRMSv4.Shared.OnBoarding.EmployeeRelativeListView> relatives;
    RadzenDataGrid<HRMSv4.Shared.OnBoarding.EmployeeRelativeListView> relGrid;

    /* Educational Attainment Radzen*/
    async Task LoadEducational(LoadDataArgs args)
    {
        try
        {
            var result = await _EduAttainment.LoadEducAttainment(employeeId);
            List<EducationalAttainment> list = new List<EducationalAttainment>();
            var response = list.AsODataEnumerable();
            count = response.Count();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    public async void OnLevelValidate(ChangeEventArgs e)
    {
        LevelSelected = e.Value.ToString();
    }

    public async void ServiceRecord()
    {
        this.StateHasChanged();
    }

    public async void ExperienceRecord()
    {
        isExperience = true;
        this.StateHasChanged();
    }

    public async void EligibilityRecord()
    {
        isEligibility = true;
        this.StateHasChanged();
    }

    public async void EducationalRecord()
    {
        isEducational = true;
        this.StateHasChanged();
    }

    public async void BasicInformationRecord()
    {
        isBasicInfo = true;
        this.StateHasChanged();
    }

    public async void RelativeRecord()
    {
        isRelatives = true;
        this.StateHasChanged();
    }

    public async void CommunityRecord()
    {
        isCommunity = true;
        this.StateHasChanged();
    }

    public async void TrainingRecord()
    {
        isTraining = true;
        this.StateHasChanged();
    }

    public async void ReferenceRecord()
    {
        isReference = true;
        this.StateHasChanged();
    }

    public async void CredentialRecord()
    {
        isCredentials = true;
        this.StateHasChanged();
    }

    public async void jobApplicationRecord()
    {
        isJobApplication = true;
        this.StateHasChanged();
    }
    /* End of Education Attainment Radzen */

    async Task PrintPds()
    {
        string arrayOfParemeters = employeeId.ToString();
        string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

        string url = $"/viewer/{"PdsReport"}/{_encryptedParameter}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }
}