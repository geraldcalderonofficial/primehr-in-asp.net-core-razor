@inject IEmpEligibilities _Eligibilities
@inject SweetAlertService Swal;
@using static HRMSv4.Shared.OnBoarding.EducationalAttainment
@using HRMSv4.Client.Shared.Modals
@using DevExpress.Blazor

<BusyIndicator Message="Please wait while loading data..." Data="_empEligibilities">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="col-12 mt-2">
                        <h5 class="card-header-text float-start">Eligibilities and Licenses</h5>
                        <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary float-end" onclick="@InsertRow" style="margin-bottom: 10px; width:200px"> + Add </button>
                        @*<RadzenButton Icon="add_circle_outline" class="btn-info float-end" style="margin-bottom: 10px" Text="Add" Click="@InsertRow" />*@
                    </div>
                </div>
                <div class="card-block">
                    <!-- Educataional Tab -->
                    <div class="col-sm-12 col-xl-12 col-md-12 p-2">
                        <div class="card">
                            <DxGrid Data="@EligibilityList" PageSize="20"
                                    ShowFilterRow="true"
                                    PagerPosition="GridPagerPosition.Bottom"
                                    PageSizeSelectorVisible="true"
                                    PageSizeSelectorItems="@(new int[] { 5, 10, 20, 100 })"
                                    PageSizeSelectorAllRowsItemVisible="true"
                                    PagerSwitchToInputBoxButtonCount="10"
                                    PagerVisibleNumericButtonCount="10">

                                <Columns>
                                    <DxGridDataColumn FieldName="EligibilityType" />
                                    <DxGridDataColumn FieldName="EligibilityLevel" />
                                    <DxGridDataColumn FieldName="EligibilityTitle" />
                                    <DxGridDataColumn FieldName="Rating" />
                                    <DxGridDataColumn FieldName="ExamanationDate" />
                                    <DxGridDataColumn FieldName="ExamLocation" />
                                    <DxGridDataColumn FieldName="LicenseNumber" />
                                    <DxGridDataColumn FieldName="ValidityDate" />
                                    <DxGridDataColumn FieldName="" Caption="Action" AllowSort="false" Width="90px" MinWidth="100" TextAlignment="GridTextAlignment.Center">
                                        <CellDisplayTemplate>
                                            @{
                                                var temp = (context.DataItem as EmpEligibilityVew);
                                            }
                                            <button class="border-0 btn-transition btn btn-outline-success" data-bs-toggle="tooltip" data-bs-placement="top" title="Edit" data-bs-original-title="Edit" @onclick="(() => EditRow(temp))">
                                                <i class="fas fa-pen"></i>
                                            </button>
                                            <button class="border-0 btn-transition btn btn-outline-danger" data-bs-toggle="tooltip" data-bs-placement="top" title="Delete" data-bs-original-title="Delete" @onclick="(() => DeleteRow(temp))">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </CellDisplayTemplate>
                                    </DxGridDataColumn>
                                </Columns>
                            </DxGrid>
                           
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</BusyIndicator>
@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter]
    public int employeeId { get; set; }

    [Parameter]
    public bool isLoaded { get; set; }
    DateTime? value = DateTime.Now;

    public DateTime? StartValue { get; set; } = DateTime.Now;
    public DateTime? EndValue { get; set; } = DateTime.Now.AddDays(10);

    private string LevelSelected { get; set; }
    private string InclusiveDates { get; set; }

    IEnumerable<EmpEligibilityVew> _empEligibilities;
    //RadzenDataGrid<EmpEligibilityVew>? _eligibilityGrid;

    string userId = "";
    object EligibilityList { get; set; }
    GridDevExtremeDataSource<EmpEligibilityVew> gridDevExtremeDataSource;

    protected override async Task OnInitializedAsync()
    {
        _empEligibilities = null;
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        await UpdateDataAsync();
    }

    async Task UpdateDataAsync()
    {
         _empEligibilities = await _Eligibilities.GetAll(employeeId);

        var tempList = _empEligibilities.AsQueryable();

        gridDevExtremeDataSource = new GridDevExtremeDataSource<EmpEligibilityVew>(tempList);
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            loadOptions.PrimaryKey = new[] { "EmployeeEligibilityId" };
            loadOptions.PaginateViaPrimaryKey = true;

        };

        EligibilityList = gridDevExtremeDataSource;


        StateHasChanged();
    }

    //protected override async Task OnParametersSetAsync()
    //{
    //    if (employeeId > 0)
    //    {
    //        await Task.Delay(1000); // simulate loading
    //        _empEligibilities = await _Eligibilities.GetAll(employeeId);
    //        this.StateHasChanged();
    //    }
    //}

    async Task InsertRow()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.EmployeeModals.EmployeeEligibilitiesModal.employeeId), employeeId);
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.EmployeeModals.EmployeeEligibilitiesModal>("New Eligibilities and Licenses", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (modalResult.Cancelled == false)
        {
            await UpdateDataAsync();
            this.StateHasChanged();
        }
    }

    async Task EditRow(EmpEligibilityVew eli)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm",
                Text = "Would you like to edit selected record?",
                Icon = "question",
                ShowCancelButton = true,
                AllowOutsideClick = false,
                ConfirmButtonText = "Yes",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(HRMSv4.Client.Shared.Modals.EmployeeModals.EmployeeEligibilitiesModal.EmployeeEligibilityId), eli.EmployeeEligibilityId);
            var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.EmployeeModals.EmployeeEligibilitiesModal>("Edit Eligibilities and Licenses", parameters);
            var modalResult = await _modalStatus.Result;
            if (modalResult.Cancelled == false)
            {
                await UpdateDataAsync();
                this.StateHasChanged();
            }
        }
        else
        {
            await Swal.FireAsync("Wew!", "Your record is safe.", "success");
        }
    }

    async Task DeleteRow(EmpEligibilityVew eli)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You are about to delete this record.",
                Icon = "warning",
                ShowCancelButton = true,
                AllowOutsideClick = false,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            var httRes = await _Eligibilities.Delete(eli.EmployeeEligibilityId);

            if (httRes.IsSuccessStatusCode)
            {
                await UpdateDataAsync();
                StateHasChanged();
                string resMsg = await httRes.Content.ReadAsStringAsync();
                await Swal.FireAsync("Success", "A record was successfully deleted.", "success");
            }
            else
            {
                await Swal.FireAsync("Oops...", "Something went wrong!", "error");
            }
        }
        else
        {
            await Swal.FireAsync("Wew!", "Your record is safe.", "success");
        }
    }
}
