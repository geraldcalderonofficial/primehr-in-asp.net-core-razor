@using HRMSv4.Client.Shared.Modals.EmployeeModals
@using DevExpress.Blazor
@using HRMSv4.Shared.Timekeeping;
@inject IEmpScheduleLog service

<BusyIndicator Message="Please wait while loading data..." Data="empSchedLogs">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="col-12 mt-2">
                        <h5 class="row card-header-text float-start">Schedule Logs</h5>
                        <div class="row">
                            <div class="col-4 float-start">
                                <DxDateEdit Date="@selectedDate"
                                            PickerDisplayMode="DatePickerDisplayMode.ScrollPicker"
                                            ScrollPickerFormat="MMMM yyyy"
                                            DisplayFormat="MMMM yyyy"
                                            CssClass="cw-320"
                                            DateChanged="@((DateTime newValue) => OnDateChanged(newValue))" />
                            </div>
                          
                            @*<button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary float-end" onclick="@PrintServiceRecord" style="margin-bottom: 10px; width:200px"> Print </button>*@
                        </div>
                    </div>
                </div>
                <div class="card-block">
                    <div class="col-sm-12 col-xl-12 col-md-12 p-2">
                        <div class="card">
                            <DxGrid Data="@EmployeeLogs" PageSize="35"
                                    PagerPosition="GridPagerPosition.Bottom"
                                    PageSizeSelectorVisible="true"
                                    PageSizeSelectorItems="@(new int[] { 5, 10, 20, 100 })"
                                    PageSizeSelectorAllRowsItemVisible="true"
                                    PagerSwitchToInputBoxButtonCount="10"
                                    PagerVisibleNumericButtonCount="10">

                                <Columns>
                                    <DxGridDataColumn FieldName="Day" TextAlignment="GridTextAlignment.Center" Width="50px" />
                                    <DxGridDataColumn FieldName="Schedule" TextAlignment="GridTextAlignment.Center" Width="150px" />
                                    <DxGridDataColumn FieldName="Logs" TextAlignment="GridTextAlignment.Center" Width="150px" />

                                </Columns>
                            </DxGrid>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>



</BusyIndicator>

@code {
    [Parameter]
    public int employeeId { get; set; }

    [Parameter]
    public bool isLoaded { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; }

    List<EmployeeScheduleLog> empSchedLogs;
    string formNo = "1";

    string userId = "";
    object EmployeeLogs { get; set; }
    GridDevExtremeDataSource<EmployeeScheduleLog> gridDevExtremeDataSource;

    DateTime selectedDate { get; set; } = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        empSchedLogs = null;
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        await UpdateDataAsync();
    }

    async void OnDateChanged(DateTime newValue)
    {
        selectedDate = newValue;
        await UpdateDataAsync();
    }

    async Task UpdateDataAsync()
    {
        empSchedLogs = await service.GetAll(employeeId, selectedDate);

        var tempList = empSchedLogs.ToList().AsQueryable();

        gridDevExtremeDataSource = new GridDevExtremeDataSource<EmployeeScheduleLog>(tempList);
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            loadOptions.PrimaryKey = new[] { "Day" };
            loadOptions.PaginateViaPrimaryKey = true;

        };

        EmployeeLogs = gridDevExtremeDataSource;


        StateHasChanged();
    }

    async Task PrintServiceRecord()
    {

    }
}
