@using HRMSv4.Client.Shared.Modals
@inject IEmpExperience _empExperience

<BusyIndicator Message="Please wait while loading data..." Data="_empExp">
    <div class="card-header">
        <div class="col-12 mt-2">
            <h5 class="card-header-text float-start">Work Experiences</h5>
            <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary float-end" onclick="@AddExperience" style="margin-bottom: 10px; width:200px"> + Add </button>
            @*<RadzenButton Icon="add_circle_outline" class="btn-info float-end" style="margin-bottom: 10px" Text="Add" Click="@InsertRow" />*@
        </div>
    </div>
    <div class="col-12">
        <div class="card p-2">
            @if (_empExp.Count() > 0)
            {
                <div class="vertical-timeline vertical-timeline--animate vertical-timeline--one-column">
                    <div class="vertical-timeline-item vertical-timeline-element">
                        <div>
                            @foreach (var item in _empExp)
                            {
                                <span class="vertical-timeline-element-icon bounce-in">
                                    <i class="badge badge-dot badge-dot-xl bg-success"></i>
                                </span>
                                <div class="vertical-timeline-element-content bounce-in">
                                    <div class="widget-content p-0">
                                        <div class="widget-content-wrapper">
                                            <div style="margin-left: 53px !important">
                                                <div class="widget-content-left">
                                                    <div class="widget-heading">@item.Position</div>
                                                </div>
                                                <p>
                                                    @item.Company
                                                    <a href="javascript:void(0);">Click here to visit</a>
                                                </p>
                                            </div>
                                            <div class="widget-content-right widget-content-actions">
                                                <button data-toggle="tooltip" data-placement="left" title="Delete" @onclick="() => Delete(item.EmploymentExperienceId)" class="me-1 btn-icon btn-icon-only btn btn-danger btn-sm">
                                                    <i class="fa fa-trash btn-icon-wrapper"></i>
                                                </button>
                                                <button data-toggle="tooltip" data-placement="left" title="Edit" @onclick="() => Edit(item.EmploymentExperienceId)" @onclick:stopPropagation="true" class="btn-icon btn-icon-only btn btn-primary btn-sm">
                                                    <i class="fa fa-edit btn-icon-wrapper"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <span class="vertical-timeline-element-date">@item.InclusiveDates </span>
                                    @*-  @item.InclusiveDatesTo.ToString("MM yyyy")*@
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <span><strong>No records to display.</strong></span>
            }
        </div>
    </div>
</BusyIndicator>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    [Parameter] public int employeeId { get; set; }

    [Parameter] public bool isLoaded { get; set; }

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    IEnumerable<EmpExperienceView> _empExp;

    async void AddExperience()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.EmployeeModals.EmployeeWorkExperienceModal.employeeId), employeeId);
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.EmployeeModals.EmployeeWorkExperienceModal.EmploymentExperienceId), 0);
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.EmployeeModals.EmployeeWorkExperienceModal>("New Work Experience", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (modalResult.Cancelled == false)
        {
            _empExp = await _empExperience.GetAll(employeeId);
            this.StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _empExp = null;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (employeeId > 0)
        {
            await Task.Delay(1000); // simulate loading
            _empExp = await _empExperience.GetAll(employeeId);
            this.StateHasChanged();
        }
    }

    async Task Edit(int id)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm",
                Text = "Would you like to edit selected record?",
                Icon = "question",
                AllowOutsideClick = false,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#414141"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(HRMSv4.Client.Shared.Modals.EmployeeModals.EmployeeWorkExperienceModal.EmploymentExperienceId), id);
            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true
                };

            var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.EmployeeModals.EmployeeWorkExperienceModal>("Edit Work Experience", parameters, options);
            var modalResult = await _modalStatus.Result;

            if (modalResult.Cancelled == false)
            {
                _empExp = await _empExperience.GetAll(employeeId);
                //await _eligibilityGrid.Reload();
                this.StateHasChanged();
            }
        }
        else
        {
            await _Swal.FireAsync("Wew!", "Your record is safe.", "success");
        }
    }

    async Task Delete(int id)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You are about to delete this record.",
                Icon = "warning",
                ShowCancelButton = true,
                AllowOutsideClick = false,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#414141",
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            var httRes = await _empExperience.Delete(id);

            if (httRes.IsSuccessStatusCode)
            {
                _empExp = await _empExperience.GetAll(employeeId);
                StateHasChanged();
                string resMsg = await httRes.Content.ReadAsStringAsync();
                await _Swal.FireAsync("Success", "A record was successfully deleted.", "success");
            }
            else
            {
                await _Swal.FireAsync("Oops...", "Something went wrong!", "error");
            }
        }
        else
        {
            await _Swal.FireAsync("Wew!", "Your record is safe.", "success");
        }
    }
}
