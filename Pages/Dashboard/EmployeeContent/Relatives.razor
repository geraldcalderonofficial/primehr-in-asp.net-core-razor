@using HRMSv4.Client.Shared.Modals.EmployeeModals
@inject IEmpRelatives _empRelatives
@inject SweetAlertService Swal
@inject IEmployee EmployeeService
@inject AuthenticationStateProvider AuthenticationService;
@using DevExpress.Blazor

<BusyIndicator Message="Please wait while loading data..." Data="empRelatives">

    <div class="page-title-heading">
        <div class="card-header">
            <div class="col-12 mt-2">
                <h5 class="card-header-text float-start">Family/Relatives</h5>
                <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary float-end" onclick="@(() => NewRelative())" style="margin-bottom: 10px; width:200px"> + Add Relative</button>
            </div>
        </div>
        <div class="col-sm-12 col-xl-12 col-md-12">
            <DxGrid Data="@RelativeList" PageSize="20"
                    ShowFilterRow="true"
                    PagerPosition="GridPagerPosition.Bottom"
                    PageSizeSelectorVisible="true"
                    PageSizeSelectorItems="@(new int[] { 5, 10, 20, 100 })"
                    PageSizeSelectorAllRowsItemVisible="true"
                    PagerSwitchToInputBoxButtonCount="10"
                    PagerVisibleNumericButtonCount="10">

                <Columns>
                    <DxGridDataColumn FieldName="FirstName" />
                    <DxGridDataColumn FieldName="LastName" />
                    <DxGridDataColumn FieldName="MiddleName" />
                    <DxGridDataColumn FieldName="ExtensionName" />
                    <DxGridDataColumn FieldName="BirthDate" />
                    <DxGridDataColumn FieldName="Relationship" />
                    <DxGridDataColumn FieldName="" Caption="Action" AllowSort="false" Width="90px" MinWidth="100" TextAlignment="GridTextAlignment.Center">
                        <CellDisplayTemplate>
                            @{
                                var temp = (context.DataItem as EmployeeRelative);
                            }
                            <button class="border-0 btn-transition btn btn-outline-success" data-bs-toggle="tooltip" data-bs-placement="top" title="Edit" data-bs-original-title="Apply for job" @onclick="(() => EditRow(temp))">
                                <i class="fas fa-pen"></i>
                            </button>
                            <button class="border-0 btn-transition btn btn-outline-danger" data-bs-toggle="tooltip" data-bs-placement="top" title="Delete" data-bs-original-title="Apply for job" @onclick="(() => DeleteRow(temp))">
                                <i class="fa fa-trash"></i>
                            </button>
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                </Columns>
            </DxGrid>
           @* <RadzenDataGrid ColumnWidth="100%" @ref="relGrid" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Simple" LogicalFilterOperator="LogicalFilterOperator.Or" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            Data="@empRelatives" TItem="EmployeeRelative" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
                <Columns>
                    <RadzenDataGridColumn TItem="EmployeeRelative" Property="FirstName" Title="First Name" Frozen="true">
                        <EditTemplate Context="item">
                            <RadzenTextBox @bind-Value="item.FirstName" Style="width:100%; display: block" Name="Category" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="EmployeeRelative" Property="LastName" Title="Last Name">
                        <EditTemplate Context="item">
                            <RadzenTextBox @bind-Value="item.LastName" Style="width:100%; display: block" Name="LastName" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="EmployeeRelative" Property="MiddleName" Title="Middle Name">
                        <EditTemplate Context="item">
                            <RadzenTextBox @bind-Value="item.MiddleName" Style="width:100%; display: block" Name="MiddleName" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="EmployeeRelative" Property="ExtensionName" Title="Ext. Name">
                        <EditTemplate Context="item">
                            <RadzenTextBox @bind-Value="item.ExtensionName" Style="width:100%; display: block" Name="Category" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="EmployeeRelative" Property="BirthDate" Title="Birth Date" Width="140px">
                        <Template Context="item">
                            @String.Format("{0:d}", item.BirthDate)
                        </Template>
                        <EditTemplate Context="item">
                            <RadzenDatePicker ShowTime="false" DateFormat="d" @bind-Value="item.BirthDate" Style="width:100%" />
                        </EditTemplate>

                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="EmployeeRelative" Property="Relationship" Title="Relationship" Width="120px">
                        <EditTemplate Context="item">
                            <RadzenDropDown @bind-Value="item.Relationship" Data="@relationship" ValueProperty="Relationship" Style="width:100%; display: block;">
                            </RadzenDropDown>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="EmployeeRelative" Context="category" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
                        <Template Context="rel">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Size="ButtonSize.Small" Click="@(args => EditRow(rel))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="rel">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Class="m-1" Click="@((args) => SaveRow(rel))">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" Class="m-1" Click="@((args) => CancelEdit(rel))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="EmployeeRelative" Context="category" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                        <Template Context="rel">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(rel))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="rel">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteRow(rel))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>*@
        </div>
    </div>
</BusyIndicator>
@code {
    [Parameter] public int employeeId { get; set; }

    [Parameter] public bool isLoaded { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; }

    DateTime? valueStart = DateTime.Today;

    /* For Employee Relatives */
    //RadzenDataGrid<EmployeeRelative> relGrid;
    IEnumerable<EmployeeRelative> empRelatives;
    EmployeeRelative relToInsert;

    public Employee employeeData { get; set; } = new Employee();

    public string[] relationship = new string[5] { "Father", "Mother", "Child", "Sibling", "Other" };


    string userId = "";
    object RelativeList { get; set; }
    GridDevExtremeDataSource<EmployeeRelative> gridDevExtremeDataSource;

    protected override async Task OnInitializedAsync()
    {
        empRelatives = null;
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        await UpdateDataAsync();
    }

    async Task UpdateDataAsync()
    {
        empRelatives = await EmployeeService.EmployeeRelatives(employeeId);

        var tempList = empRelatives.AsQueryable();

        gridDevExtremeDataSource = new GridDevExtremeDataSource<EmployeeRelative>(tempList);
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            loadOptions.PrimaryKey = new[] { "EmployeeRelativeId" };
            loadOptions.PaginateViaPrimaryKey = true;

        };

        RelativeList = gridDevExtremeDataSource;


        StateHasChanged();
    }

    //protected override async Task OnParametersSetAsync()
    //{
    //    if (employeeId > 0)
    //    {
    //        /* Get Relatives data */
    //        await Task.Delay(1000); // simulate loading
    //        empRelatives = await EmployeeService.EmployeeRelatives(employeeId);
    //        StateHasChanged();
    //    }
    //}

    async Task NewRelative()
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.EmployeeModals.FamilyMember.EmployeeId), employeeId);
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.EmployeeModals.FamilyMember.EmployeeRelativeId), 0);

        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),
                ContentScrollable = true,
            };

        var resultForm = Modal.Show<FamilyMember>("New Relative", parameters, options);

        var result = await resultForm.Result;
        if (!result.Cancelled)
        {
            await Task.Delay(1000); // simulate loading
            //empRelatives = await EmployeeService.EmployeeRelatives(employeeId);
            await UpdateDataAsync();
            StateHasChanged();
        }
    }

    async Task InsertRow()
    {
        relToInsert = new EmployeeRelative();
        relToInsert.BirthDate = DateTime.Today;

        //await relGrid.InsertRow(relToInsert);
    }

    async Task OnCreateRow(EmployeeRelative rel)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(rel.Relationship))
            {
                await Swal.FireAsync("Oops...", "Relationship is required.", "error");
                //relGrid.CancelEditRow(rel);
                return;
            }

            if (string.IsNullOrWhiteSpace(rel.LastName))
            {
                await Swal.FireAsync("Oops...", "Lastname is required.", "error");
                //relGrid.CancelEditRow(rel);
                return;
            }

            if (string.IsNullOrWhiteSpace(rel.FirstName))
            {
                await Swal.FireAsync("Oops...", "Firstname is required.", "error");
                //relGrid.CancelEditRow(rel);
                return;
            }

            var user = (await _AutService.GetAuthenticationStateAsync()).User;
            string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

            rel.CreatedBy = userId;
            rel.EmployeeId = employeeId;
            var httRes = await _empRelatives.Add(rel);

            if (httRes.StatusCode == 200)
            {
                string resMsg = httRes.Value;
            }
            else
            {
                empRelatives = await _empRelatives.GetAll(employeeId);
            }
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    async void OnUpdateRow(EmployeeRelative rel)
    {
        if (rel == relToInsert)
        {
            relToInsert = null;
        }

        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        rel.UpdatedBy = userId;
        _empRelatives.Update(rel);
    }

    async Task EditRow(EmployeeRelative rel)
    {
        SweetAlertResult response = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm",
                Text = "Confirming you would like to edit selected record?",
                Icon = "info",
                CancelButtonColor = "#414141",
                AllowOutsideClick = false,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes"
            });
        if (!string.IsNullOrEmpty(response.Value))
        {
            //await relGrid.EditRow(rel);
            var parameters = new ModalParameters();

            parameters.Add(nameof(HRMSv4.Client.Shared.Modals.EmployeeModals.FamilyMember.EmployeeId), employeeId);
            parameters.Add(nameof(HRMSv4.Client.Shared.Modals.EmployeeModals.FamilyMember.EmployeeRelativeId), rel.EmployeeRelativeId);

            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    Animation = ModalAnimation.FadeIn(0.2),
                    ContentScrollable = true,
                };

            var resultForm = Modal.Show<FamilyMember>("Edit Relative", parameters, options);

            var result = await resultForm.Result;
            if (!result.Cancelled)
            {
                await Task.Delay(1000); // simulate loading
                //empRelatives = await EmployeeService.EmployeeRelatives(employeeId);
                await UpdateDataAsync();
                StateHasChanged();
            }
        }
    }

    async Task SaveRow(EmployeeRelative rel)
    {
        if (rel == relToInsert)
        {
            relToInsert = null;
        }

        /* Check if data already exists in database */


        //var duplicate = empRelatives.Where(a => a.FirstName.ToLower() == rel.FirstName.ToLower());

        //if (duplicate.Count() == 0)
        //{
        //await relGrid.UpdateRow(rel);
        await UpdateDataAsync();
        //}
        //else
        //{
        //    await Swal.FireAsync("Oops...", "Record already exist!", "warning");
        //}
    }

    async void CancelEdit(EmployeeRelative rel)
    {
        if (rel == relToInsert)
        {
            relToInsert = null;
        }

        if (relToInsert != rel)
        {
            //relGrid.CancelEditRow(rel);
        }
        else
        {
           // relGrid.CancelEditRow(rel);
        }
    }

    async Task DeleteRow(EmployeeRelative rel)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You are about to delete this record.",
                Icon = "warning",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            if (rel == relToInsert)
            {
                relToInsert = null;
            }

            var httRes = await _empRelatives.Delete(rel.EmployeeRelativeId);

            if (httRes.IsSuccessStatusCode)
            {
                //empRelatives = await _empRelatives.GetAll(employeeId);
                await UpdateDataAsync();
                StateHasChanged();
                string resMsg = await httRes.Content.ReadAsStringAsync();
                await Swal.FireAsync("Success", resMsg, "success");
            }
            else
            {
                await Swal.FireAsync("Oops...", "Something went wrong!", "error");
                //relGrid.CancelEditRow(rel);
            }
        }
        else
        {
            await Swal.FireAsync("Wew!", "Your record is safe.", "success");
        }
    }
}
