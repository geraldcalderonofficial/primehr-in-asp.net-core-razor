@page "/Mailbox"
@using HRMSv4.Shared.Mailing
@inject SweetAlertService Swal;
@using static HRMSv4.Shared.Mailing.Mail
@inject IMail service
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="app-main__inner p-0">
    <div class="app-inner-layout">
        <div class="app-inner-layout__header bg-heavy-rain">
            <div class="app-page-title">
                <div class="page-title-wrapper">
                    <div class="page-title-heading">
                        <div class="page-title-icon">
                            <i class="lnr-envelope icon-gradient bg-mixed-hopes"></i>
                        </div>
                        <div>
                            Mailbox
                        </div>
                    </div>
                    <div class="page-title-actions">
                    </div>
                </div>
            </div>
        </div>
        <div class="app-inner-layout__wrapper">
            <div class="app-inner-layout__content card" style="padding: 10px;">
                @GetRenderFragment(comptypes[selected])
            </div>
            <div class="app-inner-layout__sidebar card">
                <ul class="nav flex-column">
                    <li class="pt-4 ps-3 pe-3 pb-3 nav-item">
                        <div class="d-grid">
                            <button class="btn-pill btn-shadow btn btn-primary" onclick="@NewMail">Write New Email</button>
                        </div>
                    </li>
                    <li class="nav-item-header nav-item">My Account</li>
                    @foreach (var item in comptypes)
                    {
                        @switch (item.Name)
                        {
                            case "Inbox":
                                <li id="inbox" class="nav-item">
                                    <a @onclick="() => selected = Array.IndexOf(comptypes, item)" class="nav-link">
                                        <i class="nav-link-icon lnr-enter"></i>
                                        <span>Inbox</span>
                                        @if (InboxCount != 0)
                                        {
                                            <div class="ms-auto badge rounded-pill bg-danger">@InboxCount</div>
                                        }

                                    </a>
                                </li>
                                break;
                            case "Sent":
                                <li id="sent" class="nav-item">
                                    <a @onclick="() => selected = Array.IndexOf(comptypes, item)" class="nav-link">
                                        <i class="nav-link-icon lnr-exit"></i>
                                        <span>Sent</span>
                                        @*<div class="ms-auto badge rounded-pill bg-light">@SentCount</div>*@
                                    </a>
                                </li>
                                break;
                            case "Trash":
                                <li id="trash" class="nav-item">
                                    <a @onclick="() => selected = Array.IndexOf(comptypes, item)" class="nav-link">
                                        <i class="nav-link-icon lnr-trash"></i>
                                        <span>Trash</span>
                                        @*<div class="ms-auto badge rounded-pill bg-light">@TrashCount</div>*@
                                    </a>
                                </li>
                                break;
                        }
                    }
                    <li class="nav-item-divider nav-item"></li>
                </ul>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    int selected { get; set; } = 0;

    List<string> _list = new List<string>(new[] { "Inbox", "Sent", "Trash" });

    MailCount mc = new MailCount();

    int InboxCount { get; set; } = 0;
    int SentCount { get; set; } = 0;
    int TrashCount { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        string empId = await localStorage.GetItemAsStringAsync(">>redd");

        //string ronron = empId.Replace("\"", "");

        //string DecodedUrl = string.Empty;

        //string replacement = "ItIsSlashReplacement";
        //DecodedUrl = ronron.ToString().Replace(replacement, "/");

        string paramId = _crypto.ConvertHexToString(empId, System.Text.Encoding.Unicode);
        //await Crypto.DecryptAsync(DecodedUrl);

        GetMailCount(paramId);

    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    private Task UpdateMailCount(string value)
    {
        //Console.WriteLine("weeeeeeeeeeeeeeeeeeeeee");
        return Task.CompletedTask;
    }

    public async void GetMailCount(string id)
    {
        mc = new MailCount();
        mc = await service.GetMailCount(id);

        InboxCount = mc.InboxCount;
        SentCount = mc.SentCount;
        TrashCount = mc.TrashCount;

        await InvokeAsync(() =>
               {
                   this.StateHasChanged();
               });
    }

    async Task ClickHandler(string action)
    {

    }

    RenderFragment GetRenderFragment(Type type)
    {


        RenderFragment renderFragment = renderTreeBuilder =>
        {
            renderTreeBuilder.OpenComponent(0, type);
            //renderTreeBuilder.AddAttribute(1, "Update", EventCallback.Factory.Create<string>(this, UpdateMailCount));
            renderTreeBuilder.CloseComponent();
        };
        return renderFragment;
    }

    ComponentBase[] components = {
        new MailContent.Inbox(),
        new MailContent.Sent(),
        new MailContent.Trash()
    };

    Type[] comptypes => components.Select(c => c.GetType()).ToArray();

    async Task NewMail()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };

        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.NewMail>("New Mail", options);
        var modalResult = await _modalStatus.Result;
    }
}