@page "/masterdata-allowancetype" 
@using DevExpress.Blazor
@using HRMSv4.Shared.Payroll
@using HRMSv4.Client.Interface.Payroll
@using HRMSv4.Client.Service
@inject IStaffing serviceStaffing
@inject IJSRuntime JSRuntime
@inject IPosition service
@inject IAllowancetype _allowanceTypeService
@inject SweetAlertService _swal

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Allowance Types
            </h3>
        </div>
        <div class="page-title-actions">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/module-employeeallowance">Employee Allowances</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Types</li>
                </ol>
            </nav>
        </div>
    </div>
</div>
<div class="min-card mb-3 card">
    <div class="card-body">
                <div class="row">
            <div class="col-sm-12">
               <div class="row">
                   <div class="mb-3 col-xl-2 col-sm-6">
                     <label class="form-label" for="exampleEmail55">Types</label>
                        @if (_allowancetype != null)
                        {
                            <DxComboBox Id="ComboBox1" NullText="Select allowance type..."
                                    Data="@_allowancetype"
                                    FilteringMode="@FilteringMode"
                                    SizeMode="SizeMode.Medium"
                                    @bind-Value="@typeId"
                                    @bind-Text="@Text"
                                    TextFieldName="@nameof(HRMSv4.Shared.Payroll.AllowanceType.AllowanceTypeName)"
                                    ValueFieldName="@nameof(HRMSv4.Shared.Payroll.AllowanceType.AllowanceTypeId)"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                    CssClass="cw-480"
                                    SelectedItemChanged="@((HRMSv4.Shared.Payroll.AllowanceType allow) => OnTypeSelect(allow))" />
                        }
                   </div>
        <div class=" mb-3 col" align="right">
            <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" style="margin-bottom: 10px; width:200px" onclick="@showModal"> Add </button>      
        </div>
        </div>
        </div>
        </div>
        <DxGrid @ref="MyGrid" Data="_allowancetype"
                ValidationEnabled="false"
                PagerVisible="true"
                CustomizeEditModel="Grid_CustomizeEditModel"
                EditModelSaving="Grid_EditModelSaving"
                DataItemDeleting="Grid_DataItemDeleting"
                EditMode="GridEditMode.EditRow"
                PageSize="10">
            <Columns>
                <DxGridDataColumn FieldName="AllowanceTypeName" TextAlignment="GridTextAlignment.Center"/>
                <DxGridDataColumn FieldName="Category" TextAlignment="GridTextAlignment.Center"/>
                <DxGridDataColumn FieldName="Amount" TextAlignment="GridTextAlignment.Center"/>
                <DxGridDataColumn FieldName="AllowanceTypeId" Caption="Action"  TextAlignment="GridTextAlignment.Center">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as HRMSv4.Shared.Payroll.AllowanceType);
                        }
                        <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" title="Edit" @onclick="()=> EditRow(temp)"><span class="pe-7s-note"></span></button>
                        <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" title="Delete" @onclick="()=>DeleteRow((int)context.Value)"><span class="pe-7s-trash"></span></button>
                  </CellDisplayTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
    </div>
  </div>

@code {
    [Parameter] public int AllowanceTypeId { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; }
    IGrid? MyGrid { get; set; }
    List<HRMSv4.Shared.Payroll.AllowanceType> _allowancetype = new List<HRMSv4.Shared.Payroll.AllowanceType>();
    DataGridFilteringMode FilteringMode { get; set; } = DataGridFilteringMode.StartsWith;
    string text = "";
    string Text { get => text; set { text = value; InvokeAsync(StateHasChanged); } }
    int? typeId = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            _allowancetype = await _allowanceTypeService.GetAllowanceType(AllowanceTypeId);
            StateHasChanged();
        }
        catch (Exception e)
        {

            throw e;
        }
    }

     async Task Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {

    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {

    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {

    }

        async Task showModal()
        {
            var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };

            var allowanceModal = Modal.Show<AllowanceTypeModal>("Allowance Type");

            var result = await allowanceModal.Result;
            if (!result.Cancelled)
            {
                _allowancetype = await _allowanceTypeService.GetAllowanceType(AllowanceTypeId);
                this.StateHasChanged();
            }
        }

    async Task EditRow(HRMSv4.Shared.Payroll.AllowanceType allowanceType)
        {
            var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2)
            };
            var parameters = new ModalParameters();
            parameters.Add(nameof(HRMSv4.Client.Shared.Modals.AllowanceTypeModal.allowancetypeview), allowanceType);
            var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.AllowanceTypeModal>("Edit Allowance Type", parameters, options);
            var modalResult = await _modalStatus.Result;
            if (!modalResult.Cancelled)
            {
                _allowancetype = await _allowanceTypeService.GetAllowanceType(AllowanceTypeId);
                this.StateHasChanged();
            }
        }

        //async Task ShowDetails(HRMSv4.Shared.Payroll.AllowanceTypeView editallowance)
        //{
        //    var options = new ModalOptions()
        //        {
        //            DisableBackgroundCancel = true,
        //            Animation = ModalAnimation.FadeIn(0.2)
        //        };
        //    var parameters = new ModalParameters();
        //    parameters.Add(nameof(HRMSv4.Client.Shared.Modals.AllowanceTypeDetails.allowanceviewdetails), editallowance);
        //    var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.AllowanceTypeDetails>("Details", parameters, options);
        //    var modalResult = await _modalStatus.Result;
        //    if (!modalResult.Cancelled)
        //    {
        //        _allowancetype = await _allowanceTypeService.GetAllowanceType(AllowanceTypeId);
        //        this.StateHasChanged();
        //    }
        //}
    async void OnTypeSelect(HRMSv4.Shared.Payroll.AllowanceType type)
    {
        int allowId = type != null ? type.AllowanceTypeId : 0;
        var temp = await _allowanceTypeService.GetAllowFilter(allowId);
        _allowancetype = temp.ToList();
        StateHasChanged();
    }

        async Task DeleteRow(int id)
        {
            try
            {
                SweetAlertResult res = await _swal.FireAsync(new SweetAlertOptions
                {
                      Title = "Are you sure?",
                      Text = "You will not be able to recover this record!",
                      Icon = "warning",
                      ShowCancelButton = true,
                      ConfirmButtonText = "Yes",
                      CancelButtonText = "No",
                      CancelButtonColor = "#999999"
                });
                if (!string.IsNullOrEmpty(res.Value))
                {
                    var result = await _allowanceTypeService.RemoveAllowanceType(id);
                    if (result.StatusCode == 200)
                    {
                        _allowancetype = await _allowanceTypeService.GetAllowanceType(AllowanceTypeId);
                        StateHasChanged();

                        await _Swal.FireAsync(
                                           "Deleted",
                                           "Record has been deleted",
                                           "success"
                                             );
                    }
                    else
                    {
                        await _swal.FireAsync(
                                           "Oops...",
                                           "Something went wrong",
                                           "error"
                                             );
                    }
                }
            }
            catch (Exception)
            {
                
                throw;
            }
        }
    }