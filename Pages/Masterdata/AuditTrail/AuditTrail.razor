@page "/masterdata-audittrail"
@using DevExpress.Blazor
@using DevExpress.DataAccess.Native.Json
@using HRMSv4.Shared.HrMgmt
@using System.Web.Helpers
@using System.Text.Json
@using Newtonsoft.Json
@inject IAuditTrail auditTrailService
@inject ContextMenuService ContextMenuService

<HRMSv4.Client.Shared.MainComponents.Breadcrumbs HeaderText="Audit Trail" Text="Audit Trail" Path="/masterdata/audittrail" />
<BusyIndicator Message="Please wait while loading data..." Data="Data">
    <div class="main-card mb-3 card">
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-2">
                    <label class="form-label">From</label>
                    <DxDateEdit SizeMode="SizeMode.Medium" Date="@SearchFrom" DateChanged="@((DateTime? newValue) => DateFilterChange(newValue, true))" />
                </div>
                <div class="col-2">
                    <label class="form-label">To</label>
                    <DxDateEdit SizeMode="SizeMode.Medium" Date="@SearchTo" DateChanged="@((DateTime? newValue) => DateFilterChange(newValue, false))" />
                </div>
                <div class="col">
                    <i @onclick="@ClearDate" hidden="@HideDateClear" class="fa fa-undo" style="margin-top: 4%"></i>
                </div>
            </div>
            <DxGrid @ref="MyGrid" Data="@Data"
                    AutoCollapseDetailRow="true"
                    ShowFilterRow="true"
                    PageSize="15">
                <Columns>
                    <DxGridDataColumn FieldName="Name" SortIndex="0">
                        <CellDisplayTemplate>
                            @{
                                var temp = (context.DataItem as HRMSv4.Shared.AuditLogView);
                                string normalizeName = temp.Name.ToLower();
                                string formatedName = normalizeName[0].ToString().ToUpper() + normalizeName.Substring(1);
                            }
                            <strong>@formatedName</strong>
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                    <DxGridDataColumn FieldName="Type">
                        <CellDisplayTemplate>
                            @{
                                var temp = (context.DataItem as HRMSv4.Shared.AuditLogView);
                            }
                            <strong>@temp.Type</strong>
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                    <DxGridDataColumn FieldName="TableName">
                        <CellDisplayTemplate>
                            @{
                                var temp = (context.DataItem as HRMSv4.Shared.AuditLogView);
                            }
                            <strong>@temp.TableName</strong>
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                    <DxGridDataColumn FieldName="Date">
                        <CellDisplayTemplate>
                            @{
                                var temp = (context.DataItem as HRMSv4.Shared.AuditLogView);
                            }
                            <strong>@temp.Date</strong>
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                </Columns>
                <DetailRowTemplate>
                    <AuditTrailSub audit="(HRMSv4.Shared.AuditLogView)context.DataItem" />
                </DetailRowTemplate>
            </DxGrid>
        </div>
    </div>
</BusyIndicator>

@code {
    IGrid? MyGrid { get; set; }
    DateTime? SearchFrom { get; set; }
    DateTime? SearchTo { get; set; }
    bool HideDateClear = true;

    object? Data { get; set; }
    GridDevExtremeDataSource<AuditLogView>? gridDevExtremeDataSource;

    async void ClearDate()
    {
        SearchFrom = null;
        SearchTo = null;
        HideDateClear = true;
        Data = await auditTrailService.GetAll();
        StateHasChanged();
    }
    async void DateFilterChange(DateTime? newValue, bool isFrom)
    {
        try
        {
            if (isFrom) SearchFrom = newValue;
            if (!isFrom) SearchTo = newValue;
            if (SearchFrom != null && SearchTo != null)
            {
                HideDateClear = false;
                Data = await auditTrailService.GetByDate(SearchFrom.Value, SearchTo.Value);
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            throw;
        }
    }
    protected async override Task OnInitializedAsync()
    {
        var queryList = await auditTrailService.GetAll();
        gridDevExtremeDataSource = new GridDevExtremeDataSource<AuditLogView>(queryList.AsQueryable());
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            loadOptions.PrimaryKey = new[] { "Id" };
            loadOptions.PaginateViaPrimaryKey = true;
        };
        Data = gridDevExtremeDataSource;
        StateHasChanged();
    }
}