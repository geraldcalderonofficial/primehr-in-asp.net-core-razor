@page "/masterdata-ethnicity"
@using DevExpress.Blazor
@inject IJSRuntime JSRuntime
@using HRMSv4.Client.Helpers
@using HRMSv4.Client.Service
@using System.Linq.Dynamic.Core
@using HRMSv4.Shared.Masterdata
@inject IEthnicity service
<HRMSv4.Client.Shared.MainComponents.Breadcrumbs HeaderText="Ethnicity" Text="Ethnicity" Path="/masterdata/ethnicity" />
<div class="main-card mb-3 card">
    <div class="card-body">
        <div class="row mb-3 justify-content-end">
            <button class="col-md-2 mb-2 mt-2 mx-3 btn btn-outline-2x btn-outline-primary" @onclick="@HandleNewRecord">
                <span class="ladda-label">Add Ethnicity</span>
            </button>
        </div>
        <DxGrid @ref="MyGrid" Data="@Data"
                ShowFilterRow
                KeyFieldName="EthnicityId"
                PagerVisible="true"
                ValidationEnabled="false"
                EditModelSaving="Grid_EditModelSaving"
                EditMode="GridEditMode.EditRow"
                PageSize="20">
            <Columns>
                <DxGridDataColumn Width="20rem" FieldName="EthnicityName">
                    <CellEditTemplate>
                        @{
                            var record = (HRMSv4.Shared.Masterdata.Ethnicity)context.EditModel;
                        }
                        <DxTextBox @bind-Text="@record.EthnicityName" NullText="Enter ethnicity name"/>
                    </CellEditTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="Description">
                    <CellEditTemplate>
                        @{
                            var record = (HRMSv4.Shared.Masterdata.Ethnicity)context.EditModel;
                        }
                        <DxTextBox @bind-Text="@record.Description" />
                    </CellEditTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FilterRowEditorVisible="false" Width="8rem" TextAlignment="DevExpress.Blazor.GridTextAlignment.Center">
                    <CellDisplayTemplate>
                        @{
                            var ethnicity = (context.DataItem as HRMSv4.Shared.Masterdata.Ethnicity);
                        }
                        <button class="border-0 btn-transition btn btn-outline-dark" data-toggle="tooltip" data-placement="left" title="Edit" @onclick="@(() => MyGrid.StartEditDataItemAsync(ethnicity))">
                            <i class="lnr-pencil"></i>
                        </button>
                        <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" data-placement="left" title="Delete" @onclick="@(args => DeleteRow(ethnicity))">
                            <i class="lnr-trash"></i>
                        </button>
                    </CellDisplayTemplate>
                    <CellEditTemplate>
                        <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="left" title="Save" @onclick="@(() => MyGrid.SaveChangesAsync())">
                            <i class="lnr-checkmark-circle"></i>
                        </button>
                        <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" data-placement="left" title="Cancel" data-bs-original-title="Cancel" @onclick="@(() => MyGrid.CancelEditAsync())">
                            <i class="lnr-cross"></i>
                        </button>
                    </CellEditTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
    </div>
</div>
@code {
    IGrid? MyGrid { get; set; }
    IEnumerable<HRMSv4.Shared.Masterdata.Ethnicity> ethnicities;
    RadzenDataGrid<HRMSv4.Shared.Masterdata.Ethnicity>? ethGrid;
    HRMSv4.Shared.Masterdata.Ethnicity ethnicityToInsert;
    string ethToEdit;
    bool isLoading;
    int count;
    bool isPopUp = false;
    object Data { get; set; }
    GridDevExtremeDataSource<HRMSv4.Shared.Masterdata.Ethnicity> gridDevExtremeDataSource;

    protected override async Task OnInitializedAsync()
    {
        GetData();
    }
    public async void GetData() {
        var queryList = await service.GetAll();
        gridDevExtremeDataSource = new GridDevExtremeDataSource<HRMSv4.Shared.Masterdata.Ethnicity>(queryList.AsQueryable());
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            loadOptions.PrimaryKey = new[] { "EthnicityId" };
            loadOptions.PaginateViaPrimaryKey = true;
        };
        Data = gridDevExtremeDataSource;
        StateHasChanged();
    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        HRMSv4.Shared.Masterdata.Ethnicity et = e.EditModel as HRMSv4.Shared.Masterdata.Ethnicity;
        et.EthnicityName = GetValidString(et.EthnicityName);
        et.Description = GetValidString(et.Description);

        if (!string.IsNullOrWhiteSpace(et.EthnicityName) && !string.IsNullOrWhiteSpace(et.Description))
        {
            var result = await service.GetCheckDuplicate(et);
            if (result.StatusCode == 400)
            {
                await _Swal.FireAsync("Oops...", result.Value, "warning");
            } else
            {
                await _Swal.FireAsync("Success", result.Value, "success");
            }
            GetData();
        }
    }

    async Task HandleNewRecord()
    {
        await MyGrid.StartEditNewRowAsync();
    }
    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();
        ethnicityToInsert = null;
        List<Ethnicity> emptyList = new List<Ethnicity>();
        var result = await service.GetAll();
        isPopUp = result.Count() > 1 ? true : false;
        var query = result.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        count = query.Count();

        ethnicities = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        isLoading = false;
    }

    async Task Reset()
    {
        ethGrid.Reset(true);
        await ethGrid.FirstPage(true);
    }

    async Task InsertRow()
    {
        try
        {
            HRMSv4.Shared.Masterdata.Ethnicity ethnicityToInsert = new HRMSv4.Shared.Masterdata.Ethnicity();
            if (count == 0) { count++; }
            await ethGrid.InsertRow(ethnicityToInsert);
        }
        catch (Exception e)
        {

            throw;
        }
    }

    async Task EditRow(HRMSv4.Shared.Masterdata.Ethnicity et)
    {
        ethnicityToInsert = et;
        await ethGrid.EditRow(et);
        ethToEdit = et.EthnicityName;
    }

    async void OnUpdateRow(HRMSv4.Shared.Masterdata.Ethnicity et)
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        et.UpdatedBy = userId;
        if (et == ethnicityToInsert)
        {
            ethnicityToInsert = null;
        }
        var result = await service.Update(et);
        if (result.StatusCode == 200)
        {
            await _Swal.FireAsync("Success", result.Value, "success");
            await Reset();
        }
        else
        {
            await Reset();
            await _Swal.FireAsync("Oops...", result.Value, "error");

        }
    }

    async Task SaveRow(HRMSv4.Shared.Masterdata.Ethnicity et)
    {
        et.EthnicityName = GetValidString(et.EthnicityName);
        et.Description = GetValidString(et.Description);

        if (!string.IsNullOrWhiteSpace(et.EthnicityName) && !string.IsNullOrWhiteSpace(et.Description))
        {
            var result = await service.GetCheckDuplicate(et);
            if (result.StatusCode == 200)
            {
                await ethGrid.UpdateRow(et);
            }
            else if (result.StatusCode == 400)
            {
                await _Swal.FireAsync("Oops...", result.Value, "warning");
            }
            else
            {
                await _Swal.FireAsync("Error", result.Value, "error");
            }
        }
        else
        {
            await ethGrid.UpdateRow(et);
        }
    }

    async void CancelEdit(HRMSv4.Shared.Masterdata.Ethnicity et)
    {
        if (et == ethnicityToInsert)
        {
            ethnicityToInsert = null;
        }

        if (et.EthnicityName != ethToEdit)
        {
            et.EthnicityName = ethToEdit;
            ethGrid.CancelEditRow(et);
        }
        else
        {
            ethGrid.CancelEditRow(et);
        }

        await Reset();
    }

    async Task DeleteRow(HRMSv4.Shared.Masterdata.Ethnicity et)
    {
        try
        {
            SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Are you sure?",
                    Text = "You are about to delete this record.",
                    Icon = "warning",
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes, delete it!",
                    CancelButtonText = "Cancel",
                    CancelButtonColor = "#dc3741"
                });

            if (!string.IsNullOrEmpty(result.Value))
            {
                HRMSv4.Shared.Response res = new HRMSv4.Shared.Response();

                if (et == ethnicityToInsert)
                {
                    ethnicityToInsert = null;
                }
                //if (ethnicities.Contains(et))
                //{
                    res = await service.Delete(et.EthnicityId);

                    if (res.StatusCode == 200)
                    {
                        await _Swal.FireAsync("Success", "You have successfully deleted a record.", "success");
                        GetData();
                    }
                    else
                    {
                        await _Swal.FireAsync("Oops...", "Something went wrong!", "error");
                    }
                //}
                //else
                //{
                //    ethGrid.CancelEditRow(et);
                //    await Reset();
                //}
            }
            else
            {
                await _Swal.FireAsync("Wew!", "Your record is safe.", "success");
            }
        }
        catch (Exception e)
        {
            throw;
        }
    }

    async Task OnCreateRow(HRMSv4.Shared.Masterdata.Ethnicity et)
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        et.CreatedBy = userId;
        var result = await service.Add(et);

        if (result.StatusCode == 200)
        {
            await _Swal.FireAsync("Success", result.Value, "success");
            await Reset();
        }
        else
        {
            await Reset();
            await _Swal.FireAsync("Oops...", result.Value, "error");
        }
    }

    string GetValidString(string str)
    {
        string validString = "";
        if (str != null)
        {
            string[] newStr = str.Split(' ');
            List<string> validList = newStr.Where(c => c != "" && c != "\t" && c != "\n").ToList();
            foreach (string str1 in validList)
            {
                if (validString != "")
                {
                    validString += " " + str1;
                }
                else
                {
                    validString = str1;
                }
            }
        }

        return validString;
    }
}
