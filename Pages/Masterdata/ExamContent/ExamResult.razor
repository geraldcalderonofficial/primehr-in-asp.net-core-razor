@using DevExpress.Blazor
@using HRMSv4.Shared.Exam
@using HRMSv4.Shared.Selection
@inject IJSRuntime jsRuntime
@inject IExam service
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="card-body">
    <div class="row">
        <div class="col-sm-12">
            <div class="row">
                <div class="mb-3 col-xl-4 col-sm-12">
                    <label class="form-label" for="exampleEmail55">Positions</label>
                    @if (positionList != null)
                    {
                        <DxComboBox Id="ComboBox1" NullText="Select a position..."
                                Data="@positionList"
                                FilteringMode="@FilteringMode"
                                @bind-Value="@positionId"
                                @bind-Text="@Text"
                                TextFieldName="@nameof(Position.PositionTitle)"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                CssClass="cw-480"
                                SelectedItemChanged="@((Position pos) => OnPositionSelect(pos))" />
                    }
                </div>

                <div class=" mb-3 col" align="right">
                    <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" style="margin-bottom: 10px; width:200px" onclick="@PrintSummary"> Print Summary </button>

                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12">
            <DxGrid Data="@result" PageSize="20"
                    ShowFilterRow="true"
                    PagerPosition="GridPagerPosition.Bottom"
                    PageSizeSelectorVisible="true"
                    PageSizeSelectorItems="@(new int[] { 5, 10, 20, 100 })"
                    PageSizeSelectorAllRowsItemVisible="true"
                    PagerSwitchToInputBoxButtonCount="10"
                    PagerVisibleNumericButtonCount="10">
                <Columns>
                    <DxGridDataColumn FieldName="PositionTitle" />
                    <DxGridDataColumn FieldName="ApplicantName" />
                    <DxGridDataColumn FieldName="Score" />
                    <DxGridDataColumn FieldName="" Caption="Action" AllowSort="false" Width="90px" MinWidth="100" TextAlignment="GridTextAlignment.Center">
                        <CellDisplayTemplate>
                            @{
                                var temp = (context.DataItem as ApplicantResultListView);
                            }
                            @if(!temp.IsOngoing){
                                <button class="btn btn-link grid-btn-link" data-toggle="tooltip" title="View Result" @onclick="() => ViewResult(temp.ApplicantExamId)"><i class="pe-7s-search"></i></button>
                                <button class="btn btn-link grid-btn-link" data-toggle="tooltip" title="Print Key Answer" @onclick="() => PrintKeyAnswer(temp.ApplicantExamId)"><i class="pe-7s-note2"></i></button>
                            }
                            
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                </Columns>
            </DxGrid>
        </div>
    </div>

</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    List<Position> positionList = new List<Position>();
    List<ApplicantResultListView> result = new List<ApplicantResultListView>();
    int positionId = 0;
    string text = "";
    string Text { get => text; set { text = value; InvokeAsync(StateHasChanged); } }
    DataGridFilteringMode FilteringMode { get; set; } = DataGridFilteringMode.StartsWith;
    string userId = "";


    protected override async Task OnInitializedAsync()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        positionList = await service.GetExamPosition();

        Position p = new Position {
            PositionId = 0,
            PositionTitle = "All"
        };

        positionList.Insert(0, p);

        result = await service.GetApplicantExamResultList(0);

    }

    async void OnPositionSelect(Position pos)
    {
        result = await service.GetApplicantExamResultList(pos.PositionId);
        
        StateHasChanged();
    }

    async Task PrintSummary()
    {
        var psgcCode = await localStorage.GetItemAsync<string>("AdminPsgcCode");
     
        var form = Modal.Show<PaperEvalSummaryReportModal>("Print Settings");
        var response = await form.Result;
        ReportPe settings = new ReportPe();
        settings = response.Data != null ? response.Data as ReportPe : null;
        var replacePrepBy = settings.PreparedBy.Replace(",", "");
        var replaceAppBy = settings.ApprovedBy.Replace(",", "");
        string arrayOfParemeters = replacePrepBy + "," + replaceAppBy + "," + psgcCode + "," + userId;
        string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

        string url = $"/viewer/{"ExaminationSummaryReport"}/{_encryptedParameter}";
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    async Task PrintKeyAnswer(int applicantExamId)
    {
        var psgcCode = await localStorage.GetItemAsync<string>("AdminPsgcCode");
        string arrayOfParemeters = string.Format("{0}${1}${2}", applicantExamId, userId, psgcCode);
        string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

        string url = $"/viewer/{"ExamKeyAnswersReport"}/{_encryptedParameter}";
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    async void ViewResult(int applicantExamId)
    {
        if (applicantExamId == 0)
        {
            return;
        }

        var examId = _crypto.ConvertStringToHex(applicantExamId.ToString(), System.Text.Encoding.Unicode);
        string url = $"/ExamAnswers/{examId}/";
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
        //_navigation.NavigateTo(url);
    }
}
