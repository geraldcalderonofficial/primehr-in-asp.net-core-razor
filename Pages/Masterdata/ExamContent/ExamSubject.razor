@inject IExam service
@using HRMSv4.Client.Shared.Modals.Selection.Exam;
@using HRMSv4.Shared.Exam
@using System.Globalization
@using DevExpress.Blazor

<BusyIndicator Message="Please wait while loading data..." Data="subjListView">
    <div class="tab-pane active show" id="subject">
        <div class="row">
            <div class="col-md-4">
                <div class="main-card mb-3 card">
                    <div class="card-header">
                        <div class="col-12 mt-2">
                            <h5 class="card-header-text float-start">Subject Masterdata</h5>
                            <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary float-end" onclick="@InsertSubjectRow" style="margin-bottom: 10px;"> + New</button>
                        </div>
                    </div>
                    <div class="card-body">
                        <DxGrid Data="@Subjects" @ref="MyGrid"
                                PageSize="15" ValidationEnabled="false"
                                SelectionMode="GridSelectionMode.Single"
                                AllowSelectRowByClick="true"
                                @bind-SelectedDataItem="SelectedDataItem"
                                VerticalScrollableHeight="39vh"
                                SelectedDataItemsChanged="OnSelectChanged"
                                CustomizeEditModel="Grid_CustomizeEditModel"
                                EditModelSaving="Grid_EditModelSaving"
                                DataItemDeleting="Grid_DataItemDeleting"
                                PopupEditFormCssClass="pw-800"
                                EditMode="GridEditMode.EditRow">
                            <Columns>
                                <DxGridDataColumn FieldName="SubjectName" SortIndex="0">
                                    <CellEditTemplate>
                                        @{
                                            var record = (Subject)context.EditModel;
                                            //record.EffectivityDate = DateTime.Now;
                                        }
                                        <DxTextBox @bind-Text="@record.SubjectName"
                                                   BindValueMode="BindValueMode.OnInput"
                                                   NullText="Type text..."
                                                   CssClass="cw-320" />
                                    </CellEditTemplate>

                                </DxGridDataColumn>
                                <DxGridDataColumn TextAlignment="DevExpress.Blazor.GridTextAlignment.Center" FieldName="" Width="100px">
                                    <CellDisplayTemplate>
                                        @{
                                            var temp = (context.DataItem as Subject);
                                        }
                                        <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="top" title="Edit" @onclick="@(() => MyGrid.StartEditDataItemAsync(temp))">
                                            <i class="lnr-pencil"></i>
                                        </button>
                                        <button class="border-0 btn-transition btn btn-outline-primary" data-toggle="tooltip" data-placement="top" title="Delete" @onclick="@(() => DeleteRow(temp))">
                                            <i class="lnr-trash"></i>
                                        </button>
                                    </CellDisplayTemplate>
                                    <CellEditTemplate>
                                        <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="top" title="Save" @onclick="@(() => MyGrid.SaveChangesAsync())">
                                            <i class="lnr-checkmark-circle"></i>
                                        </button>
                                        <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" data-placement="top" title="Cancel" @onclick="@(() => MyGrid.CancelEditAsync())">
                                            <i class="lnr-cross"></i>
                                        </button>
                                    </CellEditTemplate>
                                </DxGridDataColumn>
                            </Columns>
                        </DxGrid>
                    </div>
                </div>
            </div>
            <div class="col-md-8">
                <div class="main-card mb-3 card">
                    <div class="card-header">
                        <div class="col-12 mt-2">
                            <h5 class="card-header-text float-start">Questions</h5>
                           
                            <DxComboBox CssClass="float-end" Data="@types" Value="selectedType" SizeMode="SizeMode.Medium"
                                        ValueChanged="@((string type) => FilterQuestion(type))" />
                        </div>
                    </div>
                    <div class="card-body">
                        @if (subjListView.Count() == 0)
                        {
                            <div class="text-muted">No records to display.</div>
                        }
                        else if (SelectedDataItem != null)
                        {
                            <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary float-end" onclick="@InsertQuestionRow" style="margin-bottom: 10px;"> + Add Question</button>
                            <DxGrid Data="SubjectQuestions" @ref="MyGrid2"
                                PopupEditFormCssClass="pw-800">
                                <Columns>
                                    <DxGridDataColumn FieldName="Type" Width="150" />
                                    <DxGridDataColumn FieldName="Question" Caption="Question" MinWidth="100">
                                        <CellDisplayTemplate>
                                            @{
                                                var temp = (context.DataItem as SubjectQuestion);
                                            }
                                            @((MarkupString)@temp.Question)
                                        </CellDisplayTemplate>
                                    </DxGridDataColumn>
                                    <DxGridDataColumn TextAlignment="DevExpress.Blazor.GridTextAlignment.Center" FieldName="" Width="100px">
                                        <CellDisplayTemplate>
                                            @{
                                                var temp = (context.DataItem as SubjectQuestion);
                                            }
                                            <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="top" title="Edit" @onclick="@(() => EditQuestionRow(temp.SubjectQuestionId))">
                                                <i class="lnr-pencil"></i>
                                            </button>
                                            <button class="border-0 btn-transition btn btn-outline-primary" data-toggle="tooltip" data-placement="top" title="Delete" @onclick="@(() => DeleteQuestiontRow(temp))">
                                                <i class="lnr-trash"></i>
                                            </button>
                                        </CellDisplayTemplate>
                                    </DxGridDataColumn>
                                </Columns>
                            </DxGrid>
                        }
                        else
                        {
                            <div class="text-muted">Please select subject.</div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</BusyIndicator>

@code
{
    [CascadingParameter] public IModalService Modal { get; set; }
    IEnumerable<Subject> subjListView;
    IEnumerable<SubjectQuestion> questions;
    //dropdown filter
    List<string> types = new List<string> { "All", "Easy", "Medium", "Hard" };
    string selectedType { get; set; } = "All";
    ///
    IGrid? MyGrid { get; set; }
    IGrid? MyGrid2 { get; set; }
    List<Subject> subjList = new List<Subject>();
    object SelectedDataItem { get; set; }
    string userId = "";
    object Subjects { get; set; }
    object SubjectQuestions { get; set; }

    GridDevExtremeDataSource<Subject> gridDevExtremeDataSource;
    GridDevExtremeDataSource<SubjectQuestion> gridDevExtremeDataSource2;

    int selectedSubject;

    protected override async Task OnInitializedAsync()
    {
        subjListView = null;

        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        await UpdateDataAsync();
    }

    async Task UpdateDataAsync()
    {
        subjListView = await service.GetAllSubject();
        var tempList = subjListView.AsQueryable();

        gridDevExtremeDataSource = new GridDevExtremeDataSource<Subject>(tempList);
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            // If underlying data is a large SQL table, specify PrimaryKey and PaginateViaPrimaryKey.
            // This can make SQL execution plans more efficient.
            loadOptions.PrimaryKey = new[] { "SubjectId" };
            loadOptions.PaginateViaPrimaryKey = true;

        };

        Subjects = gridDevExtremeDataSource;


        SelectedDataItem = subjListView.FirstOrDefault();
        OnSelectChanged();

        StateHasChanged();
    }

    #region Subject
    async Task InsertSubjectRow()
    {
        //subjectToInsert = new Subject();
        //await subjGrid.InsertRow(subjectToInsert);
        await MyGrid.StartEditNewRowAsync();
    }

    async Task InsertQuestionRow()
    {
        var subj = SelectedDataItem as Subject;

        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };
        var parameters = new ModalParameters();
        parameters.Add(nameof(ExamSubjectQuestion.SubjectId), subj.SubjectId);
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.Selection.Exam.ExamSubjectQuestion>("New Question", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            //exams = await service.GetAllExam(0);
            //examList = await service.GetAllExamOnly();
            //selectedExamList = null;
            //selectedExamList = examList.Take(1).ToList();
            UpdateDataAsync();
        }
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var newSubj = (Subject)e.EditModel;
        }
        else
        {
            var temp = (Subject)e.EditModel;
        }
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var sub = e.EditModel as Subject;

        if (String.IsNullOrWhiteSpace(sub.SubjectName))
        {
            await _Swal.FireAsync("Oops...", "Please enter subject name", "error");
            return;
        }
        else
        {
            sub.CreatedBy = userId;

            var res = await service.AddSubject(sub);
            if (res.StatusCode == 200)
            {
                await _Swal.FireAsync("Success", res.Value, "success");
                await UpdateDataAsync();
                StateHasChanged();
            } else
            {
                await _Swal.FireAsync("Oops...", res.Value, "error");
            }
        }
    }

    async Task DeleteRow(Subject subj)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You are about to delete this record.",
                Icon = "warning",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });

        if (!string.IsNullOrEmpty(result.Value))
        {

            var res = await service.DeleteSubject(subj.SubjectId);

            if (res.StatusCode == 200)
            {

                await _Swal.FireAsync("Success", "You have successfully deleted a record.", "success");
                await UpdateDataAsync();
                this.StateHasChanged();
            }
            else
            {
                await _Swal.FireAsync("Oops...", "Something went wrong!", "error");
            }

        }
        else
        {
            await _Swal.FireAsync("Wew!", "Your record is safe.", "success");
        }
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {

    }

    async void OnSelectChanged()
    {
        var subj = SelectedDataItem as Subject;

        await Task.Delay(1000); // simulate loading
        questions = await service.GetAllQuestions(subj.SubjectId, selectedType);

        gridDevExtremeDataSource2 = new GridDevExtremeDataSource<SubjectQuestion>(questions.AsQueryable());
        gridDevExtremeDataSource2.CustomizeLoadOptions = (loadOptions) =>
        {
            // If underlying data is a large SQL table, specify PrimaryKey and PaginateViaPrimaryKey.
            // This can make SQL execution plans more efficient.
            loadOptions.PrimaryKey = new[] { "SubjectQuestionId" };
            loadOptions.PaginateViaPrimaryKey = true;

        };

        SubjectQuestions = gridDevExtremeDataSource2;

        selectedSubject = subj.SubjectId;

        StateHasChanged();
    }

    #endregion

    #region questions

    async void FilterQuestion(string value)
    {
        selectedType = value;

        OnSelectChanged();

        StateHasChanged();

    }

    async Task EditQuestionRow(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(Subject.SubjectId), 0);
        parameters.Add(nameof(SubjectQuestion.SubjectQuestionId), id);
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.Selection.Exam.ExamSubjectQuestion>("Edit Question", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            questions = await service.GetAllQuestions(selectedSubject, selectedType);
            //selectedQuestionList = null;
            this.StateHasChanged();
        }
    }

    async Task DeleteQuestiontRow(SubjectQuestion sub)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You are about to delete this question.",
                Icon = "warning",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            HRMSv4.Shared.Response res = new HRMSv4.Shared.Response();

            res = await service.DeleteQuestion(sub.SubjectQuestionId);

            if (res.StatusCode == 200)
            {
                questions = await service.GetAllQuestions(selectedSubject, selectedType);
                await _Swal.FireAsync("Success", "You have successfully deleted a record.", "success");
            }
            else
            {
                await _Swal.FireAsync("Oops...", "Something went wrong!", "error");
            }
        }
        else
        {
            await _Swal.FireAsync("Wew!", "Your record is safe.", "success");
        }
    }

    #endregion
}
