@page "/exam-management"
@using HRMSv4.Shared.Exam
@inject IExam service
@inject SweetAlertService Swal;
@using static HRMSv4.Shared.Exam.Subject
@inject IJSRuntime JSRuntime
@using System.Globalization

<div class="container">
    <ul class="tabs-animated-shadow tabs-animated nav nav-justified tabs-rounded-lg">
        @foreach (var item in comptypes)
        {
            @switch (item.Name)
            {
                case "ExamDashboard":
                    <li class="nav-item">
                        <a role="tab" class="nav-link active show" @onclick="() => selected = Array.IndexOf(comptypes, item)" data-bs-toggle="tab" tabindex="0" aria-selected="true"><span>Dashboard</span></a>
                    </li>
                    break;
                case "ExamSubject":
                    <li class="nav-item">
                        <a role="tab" class="nav-link" @onclick="() => selected = Array.IndexOf(comptypes, item)" data-bs-toggle="tab" tabindex="0" aria-selected="true"><span>Subject</span></a>
                    </li>
                    break;
                case "ExamList":
                    <li class="nav-item">
                        <a role="tab" class="nav-link" @onclick="() => selected = Array.IndexOf(comptypes, item)" data-bs-toggle="tab" tabindex="0" aria-selected="true"><span>Exam</span></a>
                    </li>
                    break;
                case "ExamResult":
                    <li class="nav-item">
                        <a role="tab" class="nav-link" @onclick="() => selected = Array.IndexOf(comptypes, item)" data-bs-toggle="tab" tabindex="0" aria-selected="true"><span>Results</span></a>
                    </li>
                    break;
            }
        }
    </ul>
</div>
<div class="col-md-12 app-inner-layout__content card" style="padding: 20px;">
    <div class="tab-content">
        @GetRenderFragment(comptypes[selected])
    </div>
</div>
@code {
    int selected { get; set; } = 0;

    List<string> _list = new List<string>(new[] { "ExamDashboard", "ExamSubject", "ExamList", "ExamResult" });

    RenderFragment GetRenderFragment(Type type)
    {
        RenderFragment renderFragment = renderTreeBuilder =>
        {
            renderTreeBuilder.OpenComponent(0, type);
            renderTreeBuilder.CloseComponent();
        };
        return renderFragment;
    }

    ComponentBase[] components = {
        new ExamContent.ExamDashboard(),
        new ExamContent.ExamSubject(),
        new ExamContent.ExamList(),
        new ExamContent.ExamResult()
    };

    Type[] comptypes => components.Select(c => c.GetType()).ToArray();
}
