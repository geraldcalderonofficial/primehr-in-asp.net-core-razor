@page "/masterdata-position"
@inject IJSRuntime JSRuntime
@using HRMSv4.Client.Service
@using HRMSv4.Client.Shared.Modals
@inject IPosition service
@inject IJobCategory serviceJobCategory
@inject SweetAlertService Swal
@using HRMSv4.Shared.OnBoarding
@using System.Linq.Dynamic.Core
@using DevExpress.Blazor

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Position
            </h3>
        </div>
        <div class="page-title-actions">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Position</li>
                </ol>
            </nav>
        </div>
    </div>
</div>
<div class="main-card mb-3 card">
    <div class="card-body" onbeforeunload="TestDataTablesRemove('#example')">
        <div class="col-lg-16" align="right">
            <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" @onclick="Add" style="margin-bottom: 10px; width:200px"> Add Position </button>
        </div>
        <DxGrid Data="@Positions" ShowFilterRow="true"
                PageSize="20">
            <Columns>
                <DxGridDataColumn FieldName="PositionTitle" />
                <DxGridDataColumn FieldName="ShortName" />
                <DxGridDataColumn FieldName="JobCategoryName" />
               
                <DxGridDataColumn TextAlignment="DevExpress.Blazor.GridTextAlignment.Center" FieldName="" Width="100px">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as HRMSv4.Shared.OnBoarding.PositionListViewModel);
                        }
                        <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="top" title="Edit" @onclick="@(() => UpdatePositionModal(temp))">
                            <i class="lnr-pencil"></i>
                        </button>
                        <button class="border-0 btn-transition btn btn-outline-primary" data-toggle="tooltip" data-placement="top" title="Delete" @onclick="@(() => DeleteRow(temp))">
                            <i class="lnr-trash"></i>
                        </button>
                    </CellDisplayTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
        @*<RadzenDataGrid @ref="positionGrid" LoadData="@LoadData" Count="@count" IsLoading="@isLoading" AllowFiltering="true"
        AllowPaging="true" PageSize="20" AllowSorting="true" Data="@positions" TItem="HRMSv4.Shared.OnBoarding.PositionListViewModel"
        PagerAlwaysVisible="true" ShowPagingSummary="true" PagerHorizontalAlign="HorizontalAlign.Center"
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.SimpleWithMenu">
        <Columns>
        <RadzenDataGridColumn TItem="HRMSv4.Shared.OnBoarding.PositionListViewModel" Property="PositionTitle" Title="Position">
        <EditTemplate Context="position">
        <RadzenTextBox @bind-Value="position.PositionTitle" Style="width:100%; display: block" Name="PositionTitle" />
        </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HRMSv4.Shared.OnBoarding.PositionListViewModel" Property="ShortName" Title="Short Name">
        <EditTemplate Context="position">
        <RadzenTextBox @bind-Value="position.ShortName" Style="width:100%; display: block" Name="ShortName" />
        </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HRMSv4.Shared.OnBoarding.PositionListViewModel" Property="JobCategoryName" Title="Job Category">
        <Template Context="position">
        @position.JobCategoryName
        </Template>
        <EditTemplate Context="position">
        <RadzenDropDown @bind-Value="position.JobCategoryId" Data="@jobCategories" ValueProperty="JobCategoryId" Name="JobCategoryId">
        <Template>
        @context.Category
        </Template>
        </RadzenDropDown>
        </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HRMSv4.Shared.OnBoarding.PositionListViewModel" Context="position" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
        <Template Context="position">
        <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="top" title="Edit Position" @onclick="@(args => UpdatePositionModal(position))">
        <i class="lnr-pencil"></i>
        </button>
        <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" data-placement="top" title="Delete" @onclick="@(args => DeleteRow(position))">
        <i class="lnr-trash"></i>
        </button>
        </Template>
        </RadzenDataGridColumn>
        </Columns>
        </RadzenDataGrid>*@
    </div>
</div>

@code {
    IEnumerable<HRMSv4.Shared.OnBoarding.PositionListViewModel> positions;
    IEnumerable<HRMSv4.Shared.OnBoarding.JobCategory> jobCategories;
    //RadzenDataGrid<HRMSv4.Shared.OnBoarding.PositionListViewModel>? positionGrid;

    [CascadingParameter] public IModalService Modal { get; set; }
    bool isLoading;
    int count;

    string userId = "";

    object Positions { get; set; }
    GridDevExtremeDataSource<PositionListViewModel> gridDevExtremeDataSource;

    protected override async Task OnInitializedAsync()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        await UpdateDataAsync();
    }

    async Task UpdateDataAsync()
    {
        var data = await service.GetAll();

        var tempList = data.AsQueryable();

        gridDevExtremeDataSource = new GridDevExtremeDataSource<PositionListViewModel>(tempList);
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            loadOptions.PrimaryKey = new[] { "PositionId" };
            loadOptions.PaginateViaPrimaryKey = true;

        };

        Positions = gridDevExtremeDataSource;

        StateHasChanged();
    }

    //async Task EditRow(PositionListViewModel pos)
    //{
    //    await positionGrid.EditRow(pos);
    //}

    //void OnUpdateRow(PositionListViewModel pos)
    //{
    //    if (pos == positionToInsert)
    //    {
    //        positionToInsert = null;
    //    }

    //    service.Update(pos);

    //}

    //async Task SaveRow(PositionListViewModel pos)
    //{
    //    if (pos == positionToInsert)
    //    {
    //        positionToInsert = null;
    //    }

    //    await UpdateDataAsync();
    //}

    //void CancelEdit(PositionListViewModel pos)
    //{
    //    if (pos == positionToInsert)
    //    {
    //        positionToInsert = null;
    //    }

    //    positionGrid.CancelEditRow(pos);

    //}

    async Task DeleteRow(PositionListViewModel pos)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You are about to delete this record.",
                Icon = "warning",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            HRMSv4.Shared.Response res = new HRMSv4.Shared.Response();

            //if (positions.Contains(pos))
            //{
            res = await service.Delete(pos.PositionId);

            if (res.StatusCode == 200)
            {
                //positions = await service.GetAll();
                await Swal.FireAsync("Success", "You have successfully deleted a record.", "success");
                await UpdateDataAsync();

            }
            else
            {
                await Swal.FireAsync("Oops...", "Deletion cancelled, related record/s found.", "error");
            }
            //}
            //else
            //{
            //    await UpdateDataAsync();
            //}
        }
        else
        {
            await Swal.FireAsync("Wew!", "Your record is safe.", "success");
        }


    }

    //PositionListViewModel positionToInsert;

    //async Task InsertRow()
    //{
    //    positionToInsert = new PositionListViewModel();
    //    //await positionGrid.InsertRow(positionToInsert);
    //}

    //async Task OnCreateRow(PositionListViewModel pos)
    //{
    //    //positions = await service.Add(pos);

    //}

    async Task Add()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                //Animation = ModalAnimation.FadeIn(0.2),
                ContentScrollable = true,

            };

        var form = Modal.Show<PositionModal>("Position Detail", options);

        var response = await form.Result;

        if (response.Cancelled == false)
        {
            await UpdateDataAsync();
        }
    }

    async Task UpdatePositionModal(PositionListViewModel positionListViewModel)
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),
                ContentScrollable = true,

            };
        var parameters = new ModalParameters();
        parameters.Add(nameof(PositionModal.posId), positionListViewModel.PositionId);

        PositionListViewModel positionModel = new PositionListViewModel();
        positionModel = positionListViewModel.PositionId > 0 ? await service.Get(positionListViewModel.PositionId) : new PositionListViewModel();
        parameters.Add(nameof(PositionModal.positionModel), positionModel);

        var formModal = Modal.Show<PositionModal>("Position Detail", parameters, options);

        var res = await formModal.Result;
        if (res.Cancelled == false)
        {
            await UpdateDataAsync();
        }
    }

    //async Task LoadData(LoadDataArgs args)
    //{
    //    isLoading = true;

    //    await Task.Yield();

    //    var data = await service.GetAll();
    //    var query = data.AsQueryable();

    //    if (!string.IsNullOrEmpty(args.Filter))
    //    {
    //        query = query.Where(args.Filter);
    //    }

    //    if (!string.IsNullOrEmpty(args.OrderBy))
    //    {
    //        query = query.OrderBy(args.OrderBy);
    //    }

    //    count = query.Count();

    //    positions = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
    //    StateHasChanged();
    //    isLoading = false;
    //}

    //async Task Reset()
    //{
    //    positionGrid.Reset(true);
    //    await positionGrid.FirstPage(true);
    //}

}
