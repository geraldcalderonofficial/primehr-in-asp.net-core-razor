@page "/masterdata-role"
@inject IRole service
@using System.Linq.Dynamic.Core

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
               Roles
            </h3>
        </div>
        <div class="page-title-actions">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Roles</li>
                </ol>
            </nav>
        </div>
    </div>
</div>

<div class="card-header">
    <div class="col-12 mt-2">
        <button class="mb-2 btn btn-outline-2x btn-outline-primary float-end" onclick="@InsertRow" Disabled=@(roleToInsert != null) style="margin-bottom: 10px; width:200px"> Add Role </button>
    </div>
</div>

<div class="main-card mb-3 card">
    <div class="card-body" onbeforeunload="TestDataTablesRemove('#example')">
        @*<RadzenButton Icon="add_circle_outline" class="btn-info" style="margin-bottom: 10px" Text="Add New Role" Click="@InsertRow" Disabled=@(roleToInsert != null) />*@
        <RadzenDataGrid @ref="roleGrid" IsLoading="@isLoading" LoadData="@LoadData" Count="@count" AllowFiltering="true" AllowPaging="true" PageSize="20" AllowSorting="true" EditMode="DataGridEditMode.Single"
                        Data="@roles" TItem="HRMSv4.Shared.ApplicationRole" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" PagerAlwaysVisible="true" ShowPagingSummary="true" PagerHorizontalAlign="HorizontalAlign.Center"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.SimpleWithMenu">
            <Columns>
                <RadzenDataGridColumn TItem="HRMSv4.Shared.ApplicationRole" Property="Category" Title="Role">
                    <EditTemplate Context="role">
                        <RadzenTextBox @bind-Value="role.Name" Style="width:100%; display: block" Name="Role" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="HRMSv4.Shared.ApplicationRole" Context="category" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
                    <Template Context="role">
                        <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="top" title="Edit Role" @onclick="@(args => EditRow(role))">
                            <i class="lnr-pencil"></i>
                        </button>
                    </Template>
                    <EditTemplate Context="role">
                         <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="top" title="Save" @onclick="@(args => SaveRow(role))">
                            <i class="lnr-checkmark-circle"></i>
                        </button>
                         <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" data-placement="top" title="Cancel" @onclick="@(args => CancelEdit(role))">
                            <i class="lnr-cross"></i>
                        </button>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="HRMSv4.Shared.ApplicationRole" Context="category" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                    <Template Context="role">
                        <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" data-placement="top" title="Delete" @onclick="@(args => DeleteRow(role))">
                            <i class="lnr-trash"></i>
                        </button>
                    </Template>
                    <EditTemplate Context="role">
                        <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" data-placement="top" title="Delete" @onclick="@(args => DeleteRow(role))">
                            <i class="lnr-trash"></i>
                        </button>
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>
@code {
    IEnumerable<HRMSv4.Shared.ApplicationRole> roles;
    RadzenDataGrid<HRMSv4.Shared.ApplicationRole> roleGrid;
    IList<HRMSv4.Shared.ApplicationRole> roleList;
    HRMSv4.Shared.ApplicationRole roleToInsert;
    string roleToEdit;
    bool isLoading;
    int count;

    protected override async Task OnInitializedAsync()
    {
        //roles = await service.GetAll();
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
         roleToInsert = null;
        await Task.Yield();

        var data = await service.GetAll();
        var query = data.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {           
            query = query.OrderBy(args.OrderBy);
        }

        count = query.Count();

        roles = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
         StateHasChanged();
        isLoading = false;
    }

    async Task Reset()
    {
        roleGrid.Reset(true); 
        await roleGrid.FirstPage(true);
    }

    async Task InsertRow()
    {
        roleToInsert = new HRMSv4.Shared.ApplicationRole();
        if (count == 0){ count++; }
        await roleGrid.InsertRow(roleToInsert);
    }

    async Task OnCreateRow(HRMSv4.Shared.ApplicationRole role)
    {
        HRMSv4.Shared.Response res = new HRMSv4.Shared.Response();

        res = await service.Add(role);

        if (res.StatusCode == 404)
        {
            await _Swal.FireAsync("Oops...", "Record already exist!", "warning");
        }
        else
        {
            roles = await service.GetAll();
        }
    }

    void OnUpdateRow(HRMSv4.Shared.ApplicationRole role)
    {
        if (role == roleToInsert)
        {
            roleToInsert = null;
        }
        service.Update(role);
    }

    async Task EditRow(HRMSv4.Shared.ApplicationRole role)
    {
        await roleGrid.EditRow(role);
        roleToEdit = role.Name;
    }

    async Task SaveRow(HRMSv4.Shared.ApplicationRole role)
    {
        if (role == roleToInsert)
        {
            roleToInsert = null;
        }

        var dbRoles = await service.GetAll();

        var duplicate = dbRoles.Where(a => a.Name.ToLower() == role.Name.ToLower() && a.Id != role.Id).ToList();

        if (duplicate.Count() == 0)
        {
            await roleGrid.UpdateRow(role);
            await Reset();
        }
        else
        {
            await _Swal.FireAsync("Oops...", "Record already exist.", "warning");
        }
    }

    async void CancelEdit(HRMSv4.Shared.ApplicationRole role)
    {
        if (role == roleToInsert)
        {
            roleToInsert = null;
        }

        if (role.Name != roleToEdit)
        {
            role.Name = roleToEdit;
            roleGrid.CancelEditRow(role);
        }
        else
        {
            roleGrid.CancelEditRow(role);
        }
         await Reset();
    }

    async Task DeleteRow(HRMSv4.Shared.ApplicationRole role)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You are about to delete this record.",
                Icon = "warning",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            HRMSv4.Shared.Response res = new HRMSv4.Shared.Response();

            if (role == roleToInsert)
            {
                roleToInsert = null;
            }

            if (roles.Contains(role))
            {
                res = await service.Delete(role.Id);

                if (res.StatusCode == 200)
                {
                    //roles = await service.GetAll();
                    await _Swal.FireAsync("Success", "You have successfully deleted a record.", "success");
                    await Reset();

                }
                else
                {
                    await _Swal.FireAsync("Oops...", "Something went wrong!", "error");
                }
            }
            else
            {
                roleGrid.CancelEditRow(role);
            }
        }
        else
        {
            await _Swal.FireAsync("Wew!", "Your record is safe.", "success");
        }
    }
}
