@page "/masterdata-travelorder"
@using DevExpress.Blazor
@using HRMSv4.Shared.HrMgmt
@inject ITravelOrder _TravelOrderService
@inject ContextMenuService ContextMenuService
@using HRMSv4.Shared.SignalRData
@using Microsoft.AspNetCore.SignalR.Client
@inject HubConnection HubConnection
@inject ISignalR _SignalRService
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<HRMSv4.Client.Shared.MainComponents.Breadcrumbs HeaderText="Travel Order" Text="Travel Order" Path="/masterdata/travelorder" />

<div class="main-card mb-3 card">
    <div class="card-body">
        <div class="row mb-3">
            <div class="col-2">
                <label class="form-label">Search Filter</label>
                <select class="form-select form-control-sm form-control" @onchange="@FilterChange">
                    <option value=0>All</option>
                    <option value=1 selected>Pending</option>
                    <option value=2>Approved</option>
                    <option value=3>Reject</option>
                </select>
            </div>
            <div class="col-2">
                <label class="form-label">From</label>
                <DxDateEdit Date="@SearchFrom" DateChanged="@((DateTime? newValue) => DateFilterChange(newValue, true))" />
            </div>
            <div class="col-2">
                <label class="form-label">To</label>
                <DxDateEdit Date="@SearchTo" DateChanged="@((DateTime? newValue) => DateFilterChange(newValue, false))" />
            </div>
            <div class="col">
                <i @onclick="@ClearDate" hidden="@HideDateClear" class="fa fa-undo" style="margin-top: 11%"></i>
            </div>
            <div class="col">
                <div class="row" style="margin-right: -0.5rem">
                    <button class="col mx-2 me-2 btn btn-outline-2x btn-outline-primary position-relative" style="top: 1.8rem;" @onclick="@CreateRow">
                        <span class="ladda-label">Create Request</span>
                    </button>
                </div>
            </div>
        </div>
        <DxGrid @ref="MyGrid" Data="_TravelOrderData"
                KeyFieldName="TravelOrderId"
                PagerVisible="true"
                PageSize="5">
            <Columns>
                <DxGridDataColumn FieldName="Status" Width="5rem">
                    <CellDisplayTemplate>
                        @{
                            var status = "bg-success";
                            var temp = (context.DataItem as HRMSv4.Shared.HrMgmt.TravelOrder);
                            if (temp.Status == "Approved") status = "bg-success";
                            if (temp.Status == "Reject") status = "bg-danger";
                            if (temp.Status == "Pending") status = "bg-warning";
                        }
                        <div class="badge @status" style="min-width: 4rem">@temp.Status</div>
                    </CellDisplayTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="DateFiled" />
                <DxGridDataColumn FieldName="FromDate" Width="max-content" />
                <DxGridDataColumn FieldName="ToDate" />
                <DxGridDataColumn FieldName="Purpose" />
                <DxGridDataColumn FieldName="Allowance" DisplayFormat="₱{0:n2}" />
                <DxGridDataColumn FieldName="Destination" />
                <DxGridDataColumn FieldName="Remarks" />
                <DxGridDataColumn TextAlignment="DevExpress.Blazor.GridTextAlignment.Center">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as HRMSv4.Shared.HrMgmt.TravelOrder);
                        }
                        <button data-toggle="tooltip" data-placement="left" title="View" class="border-0 btn-transition btn btn-outline-dark" @onclick="() => GetDetail(temp.TravelOrderId)"><span class="fa fa-eye"></span></button>
                        <button data-toggle="tooltip" data-placement="left" title="Delete" class="border-0 btn-transition btn btn-outline-danger" @onclick="() => OnDelete(temp.TravelOrderId)"><i class="lnr-trash"></i></button>
                        <button data-toggle="tooltip" data-placement="left" title="Print" class="border-0 btn-transition btn btn-outline-primary" @onclick="() => PrintUser(temp.TravelOrderId)"><span class="lnr-printer"></span></button>
                    </CellDisplayTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
    </div>
</div>
@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    IGrid? MyGrid { get; set; }
    DateTime? SearchFrom { get; set; }
    DateTime? SearchTo { get; set; }

    List<HRMSv4.Shared.HrMgmt.TravelOrder> _TravelOrderData = new List<HRMSv4.Shared.HrMgmt.TravelOrder>();

    string globalFilterState = "Pending";
    bool HideDateClear = true;

    async Task PrintUser(int Id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.TravelOrder.FormSelector.TravelOrderId), Id);
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),
            };
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.TravelOrder.FormSelector>("Format", parameters, options);
        return;
        var psgcCode = await localStorage.GetItemAsync<string>("AdminPsgcCode");

        var user = (await _AutService.GetAuthenticationStateAsync()).User;

        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        int arrayOfParameters = Id;
        string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParameters.ToString(), System.Text.Encoding.Unicode);
        string url = $"/viewer/{"TravelOrderReport"}/{_encryptedParameter}";

        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    async void ClearDate()
    {
        SearchFrom = null;
        SearchTo = null;
        HideDateClear = true;
        var travelOrders = await _TravelOrderService.GetAll();
        _TravelOrderData = globalFilterState != "All" ? travelOrders.Where(a => a.Status == globalFilterState).ToList() : travelOrders;
        StateHasChanged();
    }
    async void DateFilterChange(DateTime? newValue, bool isFrom)
    {
        if (isFrom) SearchFrom = newValue;
        if (!isFrom) SearchTo = newValue;
        if (SearchFrom != null && SearchTo != null)
        {
            HideDateClear = false;
            var travelOrders = await _TravelOrderService.GetAll();
            var filteredTravelOrders = travelOrders.Where(a => (a.FromDate.Value.Date >= SearchFrom.Value.Date && a.FromDate.Value.Date <= SearchTo.Value.Date) || (a.ToDate.Value.Date >= SearchFrom.Value.Date && a.ToDate.Value.Date <= SearchTo.Value.Date)).ToList();
            _TravelOrderData.Clear();
            _TravelOrderData = globalFilterState != "All" ? filteredTravelOrders.Where(a => a.Status == globalFilterState).ToList() : filteredTravelOrders;
            StateHasChanged();
        }
    }
    async void FilterChange(ChangeEventArgs e)
    {
        var travelOrders = await _TravelOrderService.GetAll();
        _TravelOrderData.Clear();
        var val = Convert.ToInt64(e.Value);
        var stat = "Pending";
        if (val == 2) stat = "Approved";
        if (val == 3) stat = "Reject";
        if (val == 0)
        {
            globalFilterState = "All";
            if (SearchFrom != null && SearchTo != null)
            {
                _TravelOrderData = travelOrders.Where(a => (a.FromDate.Value.Date >= SearchFrom.Value.Date && a.FromDate.Value.Date <= SearchTo.Value.Date) || (a.ToDate.Value.Date >= SearchFrom.Value.Date && a.ToDate.Value.Date <= SearchTo.Value.Date)).ToList();
            }
            else
            {
                _TravelOrderData = travelOrders;
            }
        }
        else
        {
            globalFilterState = stat;
            if (SearchFrom != null && SearchTo != null)
            {
                var filtered = travelOrders.Where(a => a.Status == stat).ToList();
                _TravelOrderData = filtered.Where(a => (a.FromDate.Value.Date >= SearchFrom.Value.Date && a.FromDate.Value.Date <= SearchTo.Value.Date) || (a.ToDate.Value.Date >= SearchFrom.Value.Date && a.ToDate.Value.Date <= SearchTo.Value.Date)).ToList();
            }
            else
            {
                _TravelOrderData = travelOrders.Where(a => a.Status == stat).ToList();
            }
        }
        StateHasChanged();
    }

    async void CreateRow()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),
            };
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.TravelOrder.Post>("Travel Order Request", options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            _TravelOrderData = await _TravelOrderService.GetAll();
            this.StateHasChanged();
        }
    }

    protected async override Task OnInitializedAsync()
    {
        var travelOrders = await _TravelOrderService.GetAll();
        _TravelOrderData = travelOrders.Where(a => a.Status == "Pending").ToList();
        HubConnection.On<SignalRCarrier>("RefreshResult", async survey =>
        {
            _TravelOrderData.Clear();
            var travelOrders = await _TravelOrderService.GetAll();
            _TravelOrderData = travelOrders.Where(a => a.Status == globalFilterState).ToList();
            StateHasChanged();
        });
        //_TravelOrderData = travelOrders;
        this.StateHasChanged();
    }

    async Task GetDetail(int id)
    {
        var target = _TravelOrderData.FirstOrDefault(a => a.TravelOrderId == id);
        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.TravelOrder.Post._TravelOrder), target);
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.TravelOrder.Post.isEdit), false);
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.TravelOrder.Post.isHide), true);
        if (target.Status != "Pending")
        {
            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    Animation = ModalAnimation.FadeIn(0.2),

                };
            var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.TravelOrder.Select>($"Travel Order #{target.OrderNumber}", parameters, options);
            var modalResult = await _modalStatus.Result;
            if (!modalResult.Cancelled)
            {
                _TravelOrderData = await _TravelOrderService.GetAll();
                this.StateHasChanged();
            }

        }
        else
        {
            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    Animation = ModalAnimation.FadeIn(0.2),

                };
            var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.TravelOrder.Post>($"Travel Order #{target.OrderNumber}", parameters, options);
            var modalResult = await _modalStatus.Result;
            if (!modalResult.Cancelled)
            {
                _TravelOrderData = await _TravelOrderService.GetAll();
                this.StateHasChanged();
            }

        }
    }
    async Task OnDelete(int id)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You will not be able to undo this action!",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "No",
                CancelButtonColor = "Red"
            });
        if (result.IsConfirmed)
        {
            var res = await _TravelOrderService.Delete(id);
            if (res.StatusCode == 200)
            {
                await _Swal.FireAsync("Success", "Successfully Deleted", "success");
                var SignalR_Result = await _SignalRService.RefreshResult();
                _TravelOrderData = await _TravelOrderService.GetAll();
                this.StateHasChanged();
                return;
            }
            await _Swal.FireAsync("Warning", res.Value, "warning");
        }
    }
}