@page "/investigation-applicants"
@inject IApplicants _appService
@inject IBackgroundInvestigationQuestion service
@inject IEmployee empService
@using System.Linq.Dynamic.Core
@using DevExpress.Blazor
@using HRMSv4.Client.Shared.Modals.BackgroundInvestigation

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Applicants for Investigation
            </h3>
        </div>
        <div class="page-title-actions">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/investigation">Investigation</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Applicants</li>
                </ol>
            </nav>
        </div>
    </div>
</div>

<div class="main-card mb-3 card">
    <div class="card-body">
        <div class="row">
            <div class="col-md-4 col-sm-12">
                <div class="position-relative mb-3">
                    <label class="form-label" for="exampleEmail55">Positions</label>
                    @if (positionList != null)
                    {
                        <DxComboBox Id="ComboBox1" NullText="Select a position..."
                                Data="@positionList"
                                FilteringMode="@FilteringMode"
                                @bind-Value="@positionId"
                                @bind-Text="@Text"
                                TextFieldName="@nameof(Position.PositionTitle)"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                CssClass="cw-480"
                                SelectedItemChanged="@((Position pos) => OnPositionSelect(pos))" />
                    }
                    @*<RadzenDropDown Change="@(args => OnPositionSelect(args, "DropDown"))" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="positionId" Data="@positionList" TextProperty="PositionTitle" ValueProperty="PositionId" Class="w-100" />*@
                </div>
            </div>
            <div class="col-sm-12">
                <DxGrid @ref="MyGrid" Data="@Data" PageSize="10"
                        ShowFilterRow="true"
                        PagerPosition="GridPagerPosition.Bottom"
                        PageSizeSelectorVisible="true"
                        PageSizeSelectorItems="@(new int[] { 5, 10, 20, 100 })"
                        PageSizeSelectorAllRowsItemVisible="true"
                        PagerSwitchToInputBoxButtonCount="10"
                        PagerVisibleNumericButtonCount="10">
                    <Columns>
                        <DxGridDataColumn FieldName="PositionTitle" />
                        <DxGridDataColumn FieldName="FullName" />
                        <DxGridDataColumn FieldName="RegisteredAt" />
                        <DxGridDataColumn FieldName="lastAppliedAt" />
                        <DxGridDataColumn FilterRowEditorVisible="false" FieldName="ActionData" AllowSort="false" Width="90px" MinWidth="100" TextAlignment="GridTextAlignment.Center">
                            <CellDisplayTemplate>
                                @{
                                    var temp = (context.DataItem as ApplicantListView);
                                }

                                @if (!temp.ActionData.DoneInvestigation)
                                {
                                    <button class="btn btn-link grid-btn-link" data-toggle="tooltip" title="Confirm" @onclick="() => StartBgInv(temp.ActionData.PersonnelActionMemoId, temp.ActionData.ApplicantName)"><i class="ion ion-android-checkmark-circle"></i></button>
                                }
                            </CellDisplayTemplate>
                        </DxGridDataColumn>
                    </Columns>
                </DxGrid>
            </div>
        </div>
    </div>
</div>


@code {
    IEnumerable<ApplicantListView> _applicants;
    //RadzenDataGrid<ApplicantListView>? _applicantsGrid;
    IEnumerable<Position> positionList;
    Position position { get; set; }
    DataGridFilteringMode FilteringMode { get; set; } = DataGridFilteringMode.StartsWith;
    string text = "";
    string Text { get => text; set { text = value; InvokeAsync(StateHasChanged); } }
    public string? apiURL { get; set; }
    bool isLoading;
    int count;
    string applicationStatus = "Pending";
    public int status { get; set; }
    int positionId = 0;
    [CascadingParameter] public IModalService Modal { get; set; }
    //object Data { get; set; }
    List<ApplicantListView> Data = new List<ApplicantListView>();
    IGrid? MyGrid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        positionList = await service.GetOpenPositions();
        var appls = await service.GetApplicants(positionId);
        Data = appls.ToList();
    }

    async void OnPositionSelect(Position pos)
    {
        //var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        positionId = pos.PositionId;
        var appls = await service.GetApplicants(positionId);
        Data = appls.ToList();

        StateHasChanged();
        //await Reset();
    }

    async Task SelectedApplicant(ApplicantListView selectedRow)
    {
        var data = await _appService.GetApplicantDetails(selectedRow.EmployeeId);
        this.StateHasChanged();
    }

    async void StartBgInv(int pamId, string name)
    {
        try
        {
            var user = (await _AutService.GetAuthenticationStateAsync()).User;
            var userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

            //var emp = await empService.Get()

            if (pamId == 0)
            {
                return;
            }

            SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmation",
                    Text = "Do you really want to investigate this applicant?",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes",
                    CancelButtonText = "No",
                    CancelButtonColor = "#999999"
                });

            if (!string.IsNullOrEmpty(result.Value))
            {
                var data = new InvestigationListView
                    {
                        PersonnelActionMemoId = pamId,
                        Date = DateTime.Now,
                        ToSave = false
                    };

                Response res = await service.PostBgInvestigation(data);

                if (res.StatusCode == 200)
                {
                    if (res.Value == "")
                    {
                        return;
                    }

                    var options = new ModalOptions()
                        {
                            DisableBackgroundCancel = true,
                            Animation = ModalAnimation.FadeIn(0.2),
                            HideCloseButton = true,
                            ContentScrollable = true
                        };

                    var parameters = new ModalParameters();
                    int boom = int.Parse(res.Value);
                    parameters.Add(nameof(BgIntro.BgId), boom);
                    parameters.Add(nameof(BgIntro.ApplicantName), name);

                    var formModal = Modal.Show<BgIntro>("", parameters, options);
                    var resultForm = await formModal.Result;

                    if (resultForm.Cancelled == false)
                    {
                       
                        data.ToSave = true;
                        await service.PostBgInvestigation(data);
                        var appls = await service.GetApplicants(positionId);
                        Data = appls.ToList();
                        MyGrid.Reload();
                        StateHasChanged();
                    }
                }
                else
                {
                    await _Swal.FireAsync("Warning", res.Value, "warning");
                }
            }
        }
        catch (Exception e)
        {
            
            throw;
        }
    }


    //date range picker
    public DateTime StartDate { get; set; } = DateTime.Today;
    public DateTime EndDate { get; set; } = DateTime.Today.AddDays(1);
    public string Duration { get { return EndDate.Subtract(StartDate).Days.ToString(); } }
    public int MinDuration { get; set; } = 0;
    public int MaxDuration { get; set; } = 50;

    void StartChanged(DateTime newDate)
    {
        StartDate = newDate;
        if (EndDate.Subtract(StartDate).Days < MinDuration)
            EndDate = StartDate.AddDays(MinDuration);
        if (EndDate.Subtract(StartDate).Days > MaxDuration)
            EndDate = StartDate.AddDays(MaxDuration);
        InvokeAsync(StateHasChanged);
    }
    void EndChanged(DateTime newDate)
    {
        EndDate = newDate;
        if (EndDate.Subtract(StartDate).Days < MinDuration)
            StartDate = EndDate.AddDays(-MinDuration);
        if (EndDate.Subtract(StartDate).Days > MaxDuration)
            StartDate = EndDate.AddDays(-MaxDuration);
        InvokeAsync(StateHasChanged);
    }
    void MinDurationChanged(int newDuration)
    {
        MinDuration = newDuration;
        if (EndDate.Subtract(StartDate).Days < MinDuration)
            EndDate = StartDate.AddDays(MinDuration);
        InvokeAsync(StateHasChanged);
    }
    void MaxDurationChanged(int newDuration)
    {
        MaxDuration = newDuration;
        if (EndDate.Subtract(StartDate).Days > MaxDuration)
            EndDate = StartDate.AddDays(MaxDuration);
        InvokeAsync(StateHasChanged);
    }




    //async Task LoadData(LoadDataArgs args)
    //{
    //    isLoading = true;

    //    await Task.Yield();

    //    var data = await service.GetApplicants(positionId);
    //    var query = data.AsQueryable();

    //    if (!string.IsNullOrEmpty(args.Filter))
    //    {
    //        query = query.Where(args.Filter);
    //    }

    //    if (!string.IsNullOrEmpty(args.OrderBy))
    //    {
    //        query = query.OrderBy(args.OrderBy);
    //    }

    //    count = query.Count();

    //    _applicants = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

    //    positionList = await service.GetOpenPositions();

    //    isLoading = false;
    //}

    //async Task Reset()
    //{
    //    _applicantsGrid.Reset(true);
    //    await _applicantsGrid.FirstPage(true);
    //}


}
