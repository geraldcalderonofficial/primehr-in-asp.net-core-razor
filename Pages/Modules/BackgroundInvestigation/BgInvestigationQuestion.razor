@page "/bginvestigation-question"
@inject IJSRuntime JSRuntime
@inject IBackgroundInvestigationQuestion service
@using System.Linq.Dynamic.Core
@using DevExpress.Blazor


<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Background Investigation Questions
            </h3>
        </div>
        <div class="page-title-actions">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/investigation">Investigation</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Questions</li>
                </ol>
            </nav>
        </div>
    </div>
</div>
<div class="main-card mb-3 card">
    <div class="card-body" onbeforeunload="TestDataTablesRemove('#example')">
        <div class="col-lg-16" align="right">
            <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" onclick="@InsertRow" disabled="@(bgqToInsert != null)" style="margin-bottom: 10px; width:200px"> Add Question </button>
        </div>
        <DxGrid @ref="MyGrid" Data="@Questions" 
                ShowFilterRow = "true"
                KeyFieldName="BackgroundInvestigationQuestionId"
                PagerVisible="true"
                ValidationEnabled="false"
                CustomizeEditModel="Grid_CustomizeEditModel"
                EditModelSaving="Grid_EditModelSaving"
                EditMode="GridEditMode.EditRow"
                PageSize="20">
            <Columns>
                <DxGridDataColumn FieldName="Question">
                    <CellEditTemplate>
                        @{
                            var record = (HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion)context.EditModel;
                        }
                        <DxTextBox @bind-Text="@record.Question" NullText="Enter question" />
                    </CellEditTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FilterRowEditorVisible="false" Width="8rem" TextAlignment="DevExpress.Blazor.GridTextAlignment.Center">
                    <CellDisplayTemplate>
                        @{
                            var dataItem = (context.DataItem as HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion);
                        }
                        <button class="border-0 btn-transition btn btn-outline-dark" data-toggle="tooltip" data-placement="left" title="Edit Question" @onclick="@(() => MyGrid.StartEditDataItemAsync(dataItem))">
                            <i class="lnr-pencil"></i>
                        </button>
                        <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" data-placement="left" title="Delete" @onclick="@(() => DeleteRow(dataItem))">
                            <i class="lnr-trash"></i>
                        </button>
                    </CellDisplayTemplate>
                    <CellEditTemplate>
                        <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="left" title="Save" @onclick="@(() => MyGrid.SaveChangesAsync())">
                            <i class="lnr-checkmark-circle"></i>
                        </button>
                        <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" data-placement="left" title="Cancel" data-bs-original-title="Cancel" @onclick="@(() => MyGrid.CancelEditAsync())">
                            <i class="lnr-cross"></i>
                        </button>
                    </CellEditTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
        @*<RadzenDataGrid @ref="bgqGrid" IsLoading="@isLoading" LoadData="@LoadData" Count="@count" AllowFiltering="true" AllowPaging="true" PageSize="20" AllowSorting="false" EditMode="DataGridEditMode.Single"
        Data="@bgquestions" TItem="HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" PagerAlwaysVisible="true" ShowPagingSummary="true" PagerHorizontalAlign="HorizontalAlign.Center"
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.SimpleWithMenu">
        <Columns>
        <RadzenDataGridColumn TItem="HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion" Property="Question" Title="Question">
        <EditTemplate Context="bgq">
        <RadzenTextBox Placeholder="Add Question" @bind-Value="bgq.Question" Style="width:100%; display: block" Name="Question" />

        </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion" Context="category" Title="Action" TextAlign="TextAlign.Center" Width="120px">
        <Template Context="bgq">
        <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="top" title="Edit Question" @onclick="@(args => EditRow(bgq))">
        <i class="lnr-pencil"></i>
        </button>
        <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" data-placement="top" title="Delete" @onclick="@(args => DeleteRow(bgq))">
        <i class="lnr-trash"></i>
        </button>
        </Template>
        <EditTemplate Context="bgq">
        <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="top" title="Save" @onclick="@(args => SaveRow(bgq))">
        <i class="lnr-checkmark-circle"></i>
        </button>
        <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" data-placement="top" title="Cancel" @onclick="@(args => CancelEdit(bgq))">
        <i class="lnr-cross"></i>
        </button>
        </EditTemplate>
        </RadzenDataGridColumn>
        @*
        </Columns>
        </RadzenDataGrid>*@
    </div>
</div>

@code {
    IEnumerable<HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion> bgquestions;
    RadzenDataGrid<HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion>? bgqGrid;
    HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion bgqToInsert;
    string bgqToEdit;
    bool isLoading;
    int count;
    bool isPopUp = false;

    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>

    string userId = "";
    object Questions { get; set; }
    GridDevExtremeDataSource<BackgroundInvestigationQuestion> gridDevExtremeDataSource;
    IGrid? MyGrid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        await UpdateDataAsync();
    }
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //        await MyGrid.StartEditDataItemAsync(0);
    //}
    async Task UpdateDataAsync()
    {
        var data = await service.GetAll();

        var tempList = data.AsQueryable();

        gridDevExtremeDataSource = new GridDevExtremeDataSource<BackgroundInvestigationQuestion>(tempList);
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            loadOptions.PrimaryKey = new[] { "BackgroundInvestigationQuestionId" };
            loadOptions.PaginateViaPrimaryKey = true;

        };

        Questions = gridDevExtremeDataSource;


        StateHasChanged();
    }

    async Task Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var temp = (BackgroundInvestigationQuestion)e.EditModel;
        }
        else
        {
            var temp = (BackgroundInvestigationQuestion)e.EditModel;
        }
    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion bgq = e.EditModel as HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion;
        bgq.Question = GetValidString(bgq.Question);

        if (string.IsNullOrEmpty(bgq.Question))
        {
            await _Swal.FireAsync("Oops...", "Please enter a question", "warning");
            return;
        }

        Response result = new Response();

        if (e.IsNew)
        {
            result = await service.Add(bgq);
        }

        else
        {
            result = await service.Update(bgq);
        }

        await UpdateDataAsync();


        //if (result.c == 200)
        //{
        //    await _Swal.FireAsync("Success", result.Value, "success");
        //}
        //else
        //{
        //    await _Swal.FireAsync("Oops...", result.Value, "warning");
        //}


        await UpdateDataAsync();

    }


    //async Task LoadData(LoadDataArgs args)
    //{
    //    isLoading = true;

    //    await Task.Yield();
    //    bgqToInsert = null;
    //    var data = await service.GetAll();
    //    isPopUp = data.Count() > 1 ? true : false;
    //    var query = data.AsQueryable();

    //    if (!string.IsNullOrEmpty(args.Filter))
    //    {
    //        query = query.Where(args.Filter);
    //    }

    //    if (!string.IsNullOrEmpty(args.OrderBy))
    //    {
    //        query = query.OrderBy(args.OrderBy);
    //    }

    //    count = query.Count();

    //    bgquestions = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
    //    StateHasChanged();
    //    isLoading = false;
    //}

    //async Task Reset()
    //{
    //    bgqGrid.Reset(true);
    //    await bgqGrid.FirstPage(true);
    //}

    //async Task EditRow(HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion bgq)
    //{
    //    bgqToInsert = bgq;
    //    await bgqGrid.EditRow(bgq);
    //    bgqToEdit = bgq.Question ;
    //}

    //async void OnUpdateRow(HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion bgq)
    //{
    //    if (bgq == bgqToInsert)
    //    {
    //        bgqToInsert = null;
    //    }

    //    if (!string.IsNullOrWhiteSpace(bgq.Question))
    //    {
    //        await service.Update(bgq);
    //    }
    //}

    //async Task SaveRow(HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion bgq)
    //{
    //    bgq.Question = GetValidString(bgq.Question);
    //    if (!string.IsNullOrWhiteSpace(bgq.Question))
    //    {
    //        await bgqGrid.UpdateRow(bgq);
    //    }

    //}

    //async void CancelEdit(HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion bgq)
    //{
    //    if (bgq == bgqToInsert)
    //    {
    //        bgqToInsert = null;
    //    }

    //    if (bgq.Question != bgqToEdit)
    //    {
    //        bgq.Question = bgqToEdit;
    //        bgqGrid.CancelEditRow(bgq);
    //    }
    //    else
    //    {
    //        bgqGrid.CancelEditRow(bgq);
    //    }
    //    await UpdateDataAsync();
    //}

    async Task DeleteRow(HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion bgq)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "Do you really want to delete this record? This process cannot be undone.",
                Icon = "warning",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            HRMSv4.Shared.Response res = new HRMSv4.Shared.Response();


            res = await service.Delete(bgq.BackgroundInvestigationQuestionId);

            if (res.StatusCode == 200)
            {
                //categories = await service.GetAll();
                await _Swal.FireAsync("Success", "Your record was successfully deleted", "success");
                await UpdateDataAsync();
            }
            else
            {
                await _Swal.FireAsync("Oops...", "Something went wrong!", "error");
            }

        }
        else
        {
            await _Swal.FireAsync("Wew!", "Your record is safe.", "success");
        }

    }

    async Task InsertRow()
    {
        //bgqToInsert = new HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion();
        //if (count == 0) { count++; }
        //await bgqGrid.InsertRow(bgqToInsert);
        await MyGrid.StartEditNewRowAsync();
    }

    //async Task OnCreateRow(HRMSv4.Shared.OnBoarding.BackgroundInvestigationQuestion bgq)
    //{
    //    await service.Add(bgq);
    //   // await Reset();
    //}

    string GetValidString(string str)
    {
        string validString = "";
        if (str != null)
        {
            string[] newStr = str.Split(' ');
            List<string> validList = newStr.Where(c => c != "" && c != "\t" && c != "\n").ToList();
            foreach (string str1 in validList)
            {
                if (validString != "")
                {
                    validString += " " + str1;
                }
                else
                {
                    validString = str1;
                }
            }
        }

        return validString;
    }

}
