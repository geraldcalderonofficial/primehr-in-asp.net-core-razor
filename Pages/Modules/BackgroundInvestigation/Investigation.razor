@page "/investigation"
@inject IBackgroundInvestigationQuestion service
@inject IJSRuntime JSRuntime
@using DevExpress.Blazor
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    .app-page-title.app-page-title-simple {
        padding: 1rem 0;
    }
</style>

<div class="app-page-title py-0 m-0">
    <div class="page-title-wrapper">
        <HRMSv4.Client.Shared.MainComponents.Breadcrumbs HeaderText="Investigation" Text="Investigation" Path="/module/investigation" />
        <div class="page-title-actions">
            <div class="d-inline-block dropdown">
                <button type="button" data-bs-toggle="dropdown" aria-haspopup="true"
                        aria-expanded="false" class="btn-shadow dropdown-toggle btn btn-info">
                    <span class="btn-icon-wrapper pe-2 opacity-7">
                        <i class="fa fa-business-time fa-w-20"></i>
                    </span>
                    Actions
                </button>
                <div tabindex="-1" role="menu" aria-hidden="true" class="dropdown-menu dropdown-menu-right">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link" href="/bginvestigation-question">
                                <i class="nav-link-icon pe-7s-note2"></i>
                                <span>Questions</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/investigation-applicants">
                                <i class="nav-link-icon pe-7s-id"></i>
                                <span>Applicants</span>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<dikv class="main-card mb-3 card">
    <div class="card-body" onbeforeunload="TestDataTablesRemove('#example')">
        <div class="row mb-3">

        <div class="col-lg-12" align="right">
            <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" @onclick="GenerateReport" style="margin-bottom: 10px; width:200px" hidden="@IsHidden"> Generate Report </button>
            <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" @onclick="PrintForm" style="margin-bottom: 10px; width:200px"> Print Blank Form </button>
        </div>

    <DxGrid Data="@data" PageSize="10"
            ShowFilterRow="true"
            PagerPosition="GridPagerPosition.Bottom"
            PageSizeSelectorVisible="true"
            PageSizeSelectorItems="@(new int[] { 5, 10, 20, 100 })"
            PageSizeSelectorAllRowsItemVisible="true"
            PagerSwitchToInputBoxButtonCount="10"
            PagerVisibleNumericButtonCount="10">
        <Columns>
            <DxGridDataColumn FieldName="ApplicantName" />
            <DxGridDataColumn FieldName="DateInvestigated" />
        </Columns>
    </DxGrid>
    </div>
    </div>
</dikv>
@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    object GridData { get; set; }
    List<InvestigationListView> data = new List<InvestigationListView>();
    bool IsHidden;


    protected override async Task OnInitializedAsync()
    {
        data = await service.GetInvestigations();
        if(data.Count > 0)
        {
            IsHidden = false;
        }
        else
        {
            IsHidden = true;
        }
    }

    async Task GenerateReport()
    {
        var form = Modal.Show<BgInvestigationReportModal>("Print Settings");
        var response = await form.Result;
        ReportBg handa = new ReportBg();
        handa = response.Data != null ? response.Data as ReportBg : null;
        // handa.Total = "0";
        var result = await service.PostReports(handa);
        var prepName = result.PreparedBy.Replace(",", "");
        var notedName = result.NotedBy.Replace(",", "");
        //if (result.StatusCode == 200)
        //{
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
                    string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        string userName = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;
         var psgcCode = await localStorage.GetItemAsync<string>("AdminPsgcCode");
        string arrayOfParemeters = result.Total + "," + result.PositionId + "," + handa.PreparedById + "," + handa.NotedById + "," + handa.PreparedByPositionId + "," + handa.NotedByPositionId + "," + userName + "," + psgcCode;
            string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

            string url = $"/viewer/{"SummaryBiReport"}/{_encryptedParameter}";
            await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        //}
      
    }
    async Task PrintForm()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        string userName = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;
        var psgcCode = await localStorage.GetItemAsync<string>("AdminPsgcCode");
        string arrayOfParemeters = userName + "," + psgcCode;
        string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);
        string url = $"/viewer/{"BiFormReport"}/{_encryptedParameter}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

}
