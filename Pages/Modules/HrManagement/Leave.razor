@page "/module-leave";
@using HRMSv4.Shared.HrMgmt
@using Microsoft.EntityFrameworkCore
@using System.Linq.Dynamic.Core
@inject SweetAlertService Swal
@inject ILeaveType service
@using DevExpress.Blazor

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Leave Types
            </h3>
        </div>
        <div class="page-title-actions">

            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/module-leavemanagement">Leave Management</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Leave Types</li>
                </ol>
            </nav>
        </div>
    </div>
</div>

<div class="main-card mb-3 card">
    <div class="card-body" onbeforeunload="TestDataTablesRemove('#example')">
        <div class="col-lg-16" align="right">
            <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" onclick="@InsertRow" Disabled=@(leaveToInsert != null) style="margin-bottom: 10px; width:200px"> New Leave Type </button>
        </div>
        <DxGrid Data="@LeaveTypes" ShowFilterRow="true"
                PageSize="20">
            <Columns>
                <DxGridDataColumn FieldName="LeaveTypeName" />
                <DxGridDataColumn FieldName="DeductibleType" />
                <DxGridDataColumn FieldName="MaximumDays" />
                <DxGridDataColumn FieldName="MaximumNumberOfApplication" />
                <DxGridDataColumn TextAlignment="GridTextAlignment.Center" FieldName="" Width="100px">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as HRMSv4.Shared.HrMgmt.LeaveType);
                        }
                        <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="top" title="Edit" @onclick="@(() => EditRow(temp))">
                            <i class="lnr-pencil"></i>
                        </button>
                        @if (!temp.IsDefault.Value)
                        {
                            <button class="border-0 btn-transition btn btn-outline-primary" data-toggle="tooltip" data-placement="top" title="Delete" @onclick="@(() => DeleteRow(temp))">
                                <i class="lnr-trash"></i>
                            </button>
                        }
                    </CellDisplayTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
        @* <RadzenDataGrid Responsive=true @ref="leaveGrid" LoadData="@LoadData" Count="@count" AllowFiltering="true" AllowPaging="true" PageSize="20" AllowSorting="true"
        Data="@leaves" TItem="HRMSv4.Shared.HrMgmt.LeaveType"
        PagerAlwaysVisible="true" ShowPagingSummary="true" PagerHorizontalAlign="HorizontalAlign.Center"
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.SimpleWithMenu">
        <Columns>
        <RadzenDataGridColumn TItem="HRMSv4.Shared.HrMgmt.LeaveType" Property="LeaveTypeName" Title="Leave Name" Frozen="true" Width="140px" />
        <RadzenDataGridColumn TItem="HRMSv4.Shared.HrMgmt.LeaveType" Property="DeductibleType" Title="Deductible Type" Width="140px" />
        <RadzenDataGridColumn TItem="HRMSv4.Shared.HrMgmt.LeaveType" Property="MaximumDays" Title="Maximum Days" Width="140px" />
        <RadzenDataGridColumn TItem="HRMSv4.Shared.HrMgmt.LeaveType" Property="MaximumNumberOfApplication" Title="Maximum Number Of Application" Width="140px" />
        <RadzenDataGridColumn TItem="HRMSv4.Shared.HrMgmt.LeaveType" Context="leave" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px">
        <Template Context="leaveRecord">
        <button class="border-0 btn-transition btn btn-outline-secondary" data-toggle="tooltip" data-placement="top" title="Edit" @onclick="@(args => EditRow(leaveRecord))">
        <i class="lnr-pencil"></i>
        </button>
        <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" data-placement="top" title="Delete" @onclick="@(args => DeleteRow(leaveRecord))">
        <i class="lnr-trash"></i>
        </button>
        </Template>
        </RadzenDataGridColumn>
        </Columns>
        </RadzenDataGrid>*@
    </div>
</div>

@code {
    IEnumerable<HRMSv4.Shared.HrMgmt.LeaveType> leaves;
    //RadzenDataGrid<HRMSv4.Shared.HrMgmt.LeaveType> leaveGrid;
    HRMSv4.Shared.HrMgmt.LeaveType leaveToInsert;
    [CascadingParameter] public IModalService Modal { get; set; }

    bool isLoading;
    int count;

    string userId = "";

    object LeaveTypes { get; set; }
    GridDevExtremeDataSource<LeaveType> gridDevExtremeDataSource;

    protected override async Task OnInitializedAsync()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        await UpdateDataAsync();
    }

    async Task UpdateDataAsync()
    {
        leaves = await service.GetLeaveTypes();

        var tempList = leaves.AsQueryable();

        gridDevExtremeDataSource = new GridDevExtremeDataSource<LeaveType>(tempList);
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            loadOptions.PrimaryKey = new[] { "LeaveTypeId" };
            loadOptions.PaginateViaPrimaryKey = true;

        };

        LeaveTypes = gridDevExtremeDataSource;

        StateHasChanged();
    }

    //async Task LoadData(LoadDataArgs args)
    //{
    //    isLoading = true;

    //    await Task.Yield();

    //    var data = await service.GetLeaveTypes();
    //    var query = data.AsQueryable();

    //    if (!string.IsNullOrEmpty(args.Filter))
    //    {
    //        query = query.Where(args.Filter);
    //    }

    //    if (!string.IsNullOrEmpty(args.OrderBy))
    //    {
    //        query = query.OrderBy(args.OrderBy);
    //    }

    //    count = query.Count();

    //    leaves = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

    //    isLoading = false;
    //}

    async Task InsertRow()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                //Animation = ModalAnimation.FadeIn(0.2),
                ContentScrollable = true,

            };

        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.LeaveTypeModal.LeaveTypeId), 0);
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.LeaveTypeModal>("New Leave Type", options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            await UpdateDataAsync();
        }
    }

    async Task EditRow(LeaveType lt)
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),
                ContentScrollable = true,
            };
        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.LeaveTypeModal.LeaveTypeId), lt.LeaveTypeId);
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.LeaveTypeModal>("Edit Leave Type", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            await UpdateDataAsync();
        }
    }

    async Task DeleteRow(LeaveType lt)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "Do you really want to delete this record?",
                Icon = "warning",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"
            });
        if (!string.IsNullOrEmpty(result.Value))
        {
            Response response = await service.DeleteLeaveType(lt.LeaveTypeId);
            if (response.StatusCode == 200)
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Success",
                        Text = response.Value,
                        Icon = SweetAlertIcon.Success,
                    });
                await UpdateDataAsync();
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Invalid request",
                        Text = response.Value,
                        Icon = SweetAlertIcon.Info,
                    });
            }
        }
    }

}
