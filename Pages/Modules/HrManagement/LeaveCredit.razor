@page "/module-leavecredit"
@inject IApplicants _appService
@inject SweetAlertService Swal
@using System.Linq.Dynamic.Core
@using HRMSv4.Client.Shared.Modals.LeaveManagement
@using HRMSv4.Shared.HrMgmt
@using HRMSv4.Shared.Misc
@using HRMSv4.Shared.OnBoarding
@using HRMSv4.Shared.Report
@using HRMSv4.Shared.Selection
@inject IApplicantCompetency _appComptencyService
@inject IJSRuntime JSRuntime
@using DevExpress.Blazor
@using HRMSv4.Shared.SignalRData
@using Microsoft.AspNetCore.SignalR.Client
@inject HubConnection HubConnection
@inject IEmployee EmployeeService
@inject ILeaveCredit _leaveCreditService

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Leave Credit
            </h3>
        </div>
        <div class="page-title-actions">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/module-leavemanagement">Leave Management</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Leave Credit</li>
                </ol>
            </nav>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-8 col-xl-8 col-md-8 mt-2">
        <div class="main-card mb-3 card">
            <div class="card-header">
                <div class="col-sm-12 col-xl-12 col-md-12">
                    <span style="vertical-align:middle; line-height: 2.5rem;">Employee List</span>

                </div>
            </div>
        </div>
        <DxGrid Data="@Data" SelectionMode="GridSelectionMode.Single"
                AllowSelectRowByClick="true" SelectedDataItemChanged="SelectedEmployee" PageSize="10" ShowFilterRow="true" PagerNavigationMode="PagerNavigationMode.InputBox" PagerVisible="true">
            <Columns>
                <DxGridDataColumn FieldName="FullName" Caption="Applicant Name">

                </DxGridDataColumn>
                <DxGridDataColumn FieldName="Designation" Caption="Position">

                </DxGridDataColumn>

            </Columns>
            <TotalSummary>
                <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" FieldName="FullName" />

            </TotalSummary>
        </DxGrid>
    </div>
    <div class="col-sm-4 col-xl-4 col-md-4 mt-2">
        <div class="main-card mb-3 card">
            <div class="card-header d-flex justify-content-between">
                <h4 class="card-title m-0">Credits</h4>
                <div>
                    <button disabled="@(EmployeeId != null && EmployeeId > 0 ? false : true )" class="btn btn-outline-primary" @onclick="() => PrintLeaveCard(EmployeeId)">
                        <span class="ladda-label">Print Leave Card</span>
                    </button>
                    <button disabled="@(EmployeeId != null && EmployeeId > 0 ? false : true )" class="btn btn-outline-primary" @onclick="() => ShowCreditModal(EmployeeId, 0)">
                        <span class="ladda-label">Add Credit</span>
                    </button>
                </div>
            </div>
        </div>


        <DxGrid @ref="MyGridCredit" Data="@DataCredits" PageSize="12" PagerNavigationMode="PagerNavigationMode.InputBox" PagerVisible="true" ShowFilterRow="true">
            <Columns>

                <DxGridDataColumn FilterRowEditorVisible="false" FieldName="CreditDate" Caption="Date String" Visible="false" SortIndex="0" SortOrder="GridColumnSortOrder.Descending">
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="DateString" FilterRowOperatorType="GridFilterRowOperatorType.Contains" Caption="Date">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as EarnedLeaveCreditListView);
                        }
                        @(temp.CreditDate.HasValue ? temp.CreditDate.Value.ToString("MMMM-yyyy") : "")

                    </CellDisplayTemplate>
                    <FilterRowCellTemplate>
                        <DxComboBox Value="(string)context.FilterRowValue"
                                    ValueChanged="(string v) => context.FilterRowValue = v"
                                    Data="yearsCredit" ValueFieldName="Value" TextFieldName="Text"
                                    FilteringMode="DataGridFilteringMode.Contains"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                    </FilterRowCellTemplate>

                </DxGridDataColumn>
                <DxGridDataColumn FilterRowEditorVisible="false" FieldName="EarnedVacationLeaveCredits" Caption="Vacation Leave">

                </DxGridDataColumn>
                <DxGridDataColumn FilterRowEditorVisible="false" FieldName="EarnedSickLeaveCredits" Caption="Sick Leave">

                </DxGridDataColumn>
                <DxGridDataColumn FilterRowEditorVisible="false" TextAlignment="DevExpress.Blazor.GridTextAlignment.Center" FieldName="">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as EarnedLeaveCreditListView);
                        }
                        <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" @onclick="() => ShowCreditModal(temp.EmployeeId, temp.EarnedLeaveCreditId)" data-placement="top" title="Edit">
                            <i class="pe-7s-note"></i>
                        </button>
                        <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" @onclick="() => Delete(temp)" data-placement="top" title="Delete">
                            <i class="pe-7s-trash"></i>
                        </button>
                    </CellDisplayTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>


        <div class="card-footer mt-2">
            <div class="row">
                <label><b>Total Vacation Leave Credits: </b> @(totalVacationCredits) </label>
            </div>

            <div class="row">
                <label><b>Total Sick Leave Credits: </b> @(totalSickCredits) </label>
            </div>
        </div>


    </div>
</div>
@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    IEnumerable<ApplicantListView> _applicants;
    List<AppliedJobsView> _jobs = new List<AppliedJobsView>();
    RadzenDataGrid<ApplicantListView>? _applicantsGrid;
    object SelectedDataItem { get; set; }
    public string? apiURL { get; set; }
    bool isLoading;
    int count;
    string applicationStatus = "Pending";
    private int NotificationCount { get; set; } = 0;
    IGrid? MyGrid { get; set; }
    IGrid? MyGridCredit { get; set; }

    string formNo { get; set; }

    /* Detail Info */
    public int EmployeeId { get; set; }
    public string? ApplicantAvatar { get; set; }
    public string? FullName { get; set; }
    public string? Address { get; set; }
    public string? EmailAddress { get; set; }
    public string? MobileNumber { get; set; }
    public string? LandlineNo { get; set; }
    public string? Status { get; set; }

    public int status { get; set; } = 1;
    public string deptFilter { get; set; } = "null";
    public int orderByFilter { get; set; }
    string userId = "";
    EmployeeListView selectedRow = new EmployeeListView();
    object Data { get; set; }
    object DataCredits { get; set; }
    public int SearchFilter { get; set; }
    decimal totalVacationCredits = 0M;
    decimal totalSickCredits = 0M;

    GridDevExtremeDataSource<EarnedLeaveCreditListView> gridDevExtremeDataSource;


    IReadOnlyList<SelectListItems> yearsCredit { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        apiURL = AppInfo.ApiUrl;

        //devexpress server side - iqueryable
        var dataSource = new GridDevExtremeDataSource<EmployeeListView>(await EmployeeService.GetQueryEmployee(SearchFilter, deptFilter, orderByFilter));
        dataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            // If underlying data is a large SQL table, specify PrimaryKey and PaginateViaPrimaryKey.
            // This can make SQL execution plans more efficient.
            loadOptions.PrimaryKey = new[] { "EmployeeId" };
            loadOptions.PaginateViaPrimaryKey = true;

        };

        Data = dataSource;

    }

    //async Task SelectedApplicant(ApplicantListView selectedRow)
    async Task SelectedEmployee(object selected)
    {
        var selectedEmployeeCredit = selected as EmployeeListView;
        EmployeeId = selectedEmployeeCredit.EmployeeId;

        gridDevExtremeDataSource = new GridDevExtremeDataSource<EarnedLeaveCreditListView>(await _leaveCreditService.GetEmployeeCreditList(EmployeeId));
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {

            // If underlying data is a large SQL table, specify PrimaryKey and PaginateViaPrimaryKey.
            // This can make SQL execution plans more efficient.
            loadOptions.PrimaryKey = new[] { "CreditDate" };
            loadOptions.PaginateViaPrimaryKey = true;

        };

        DataCredits = gridDevExtremeDataSource;

        var listAll = await _leaveCreditService.GetEmployeeCreditList(EmployeeId);
        totalVacationCredits = Convert.ToDecimal(listAll.Sum(c => c.EarnedVacationLeaveCredits.Value).ToString("n3"));
        totalSickCredits = Convert.ToDecimal(listAll.Sum(c => c.EarnedSickLeaveCredits.Value).ToString("n3"));
        yearsCredit = (from yr in listAll
                       select new SelectListItems
                           {
                               Text = yr.Year.ToString(),
                               Value = yr.Year.ToString(),
                           }).DistinctBy(c =>c.Text).ToList();
        this.StateHasChanged();
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        var data = await _appService.GetApplications(status, applicationStatus);
        var query = data.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        count = query.Count();

        _applicants = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        isLoading = false;
    }


    async Task ShowCreditModal(int empId, int creditId)
    {
        //save employee assessment
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),
                ContentScrollable = true

            };

        var parameters = new ModalParameters();
        parameters.Add(nameof(LeaveCreditsModal.employeeId), EmployeeId);

        parameters.Add(nameof(LeaveCreditsModal.creditId), creditId);

        var formModal = creditId > 0 ? Modal.Show<LeaveCreditsModal>("Update Credits ", parameters, options) : Modal.Show<LeaveCreditsModal>("Add Credits", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled == false)
        {
            gridDevExtremeDataSource = new GridDevExtremeDataSource<EarnedLeaveCreditListView>(await _leaveCreditService.GetEmployeeCreditList(EmployeeId));
            DataCredits = gridDevExtremeDataSource;
            MyGridCredit.Reload();
        }
    }

    async Task Delete(EarnedLeaveCreditListView selectedCredit)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You are about to delete this record.",
                Icon = "warning",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#414141"
            });

        if (!string.IsNullOrWhiteSpace(result.Value))
        {
            var res = await _leaveCreditService.DeleteLeaveCredit(selectedCredit.EarnedLeaveCreditId);

            if (res.StatusCode == 200)
            {              
                await Swal.FireAsync("Success", "You have successfully deleted a record.", "success");
                gridDevExtremeDataSource = new GridDevExtremeDataSource<EarnedLeaveCreditListView>(await _leaveCreditService.GetEmployeeCreditList(EmployeeId));
                DataCredits = gridDevExtremeDataSource;
                MyGridCredit.Reload();

                var listAll = await _leaveCreditService.GetEmployeeCreditList(EmployeeId);
                totalVacationCredits = Convert.ToDecimal(listAll.Sum(c => c.EarnedVacationLeaveCredits.Value).ToString("n3"));
                totalSickCredits = Convert.ToDecimal(listAll.Sum(c => c.EarnedSickLeaveCredits.Value).ToString("n3"));
                yearsCredit = (from yr in listAll
                               select new SelectListItems
                                   {
                                       Text = yr.Year.ToString(),
                                       Value = yr.Year.ToString(),
                                   }).DistinctBy(c => c.Text).ToList();
            }
            else
            {
                await Swal.FireAsync("Oops...", "Something went wrong!", "error");
            }
        }
    }

    async Task PrintLeaveCard(int empId)
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),
                ContentScrollable = true,
            };

        var _modalStatus = Modal.Show<Shared.Modals.LeaveCredit.LeaveCreditModal>("Print Leave Card", options);
        var modalResult = await _modalStatus.Result;
        if(!modalResult.Cancelled)
        {
            var parameters = modalResult.Data as ReportParameters;

            var formats = parameters.formValue;

            if (formats.Contains("Format1"))
            {
                formNo = "EmployeeLeaveCardFormat";
            }

            if (formats.Contains("Format2"))
            {
                formNo = "EmployeeLeaveCardFormat2";
            }

            if (formats.Contains("Format3"))
            {
                formNo = "EmployeeLeaveCardFormat3";
            }

            var Id = EmployeeId;

            var psgcCode = localStorage.GetItem<string>("AdminPsgcCode");

            var user = (await _AutService.GetAuthenticationStateAsync()).User;
            string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

            //var parameterModel = await companyService.Get(userId);

            //if (parameterModel.CompanyLogo != "default-avatar-grey.png")
            //{
            //    ApiImage = AppInfo.ApiUrl + "Uploads/Companies/Avatar/" + parameterModel.CompanyLogo;
            //}

            string psgcUser = string.Format("{0};{1}", psgcCode, userId);
            string arrayOfParemeters = string.Format("{0}${1}", psgcUser, Id);
            string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

            string url = $"/viewer/{@formNo}/{_encryptedParameter}";
            await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        }
    }

}
