@page "/module-leavemonetization"
@using DevExpress.Blazor
@inject ILeaveMonetization _leaveMonizationService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Leave Monetization
            </h3>
        </div>
        <div class="page-title-actions">

            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/module-leavemanagement">Leave Management</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Leave Monetization</li>
                </ol>
            </nav>
        </div>
    </div>
</div>
<div class="min-card mb-3 card">
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <div class="position-relative mb-3">
                    <label class="form-label" for="LeavePermissionStatus">Status</label>

                    <DxComboBox SizeMode="SizeMode.Medium" Data="@statusList"
                                NullText="Select Year"
                                Value="@selectedStatus"
                                ValueChanged="@((string country) => FilterStatus(country))" />
                </div>
            </div>
            <div class="col-md-4">
                <div class="position-relative mb-3">
                    <label class="form-label" for="LeavePermissionFromDate">From Date</label>
                    <DxDateEdit Date="@Start" SizeMode="SizeMode.Medium"
                                DateChanged="@((DateTime? newValue) => OnDateChangedStart(newValue))"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                NullText="Select a date..."></DxDateEdit>
                </div>
            </div>
            <div class="col-md-4">
                <div class="position-relative mb-3">
                    <label class="form-label" for="LeavePermissionToDate">To Date</label>
                    <DxDateEdit SizeMode="SizeMode.Medium" Date="@End"
                                DateChanged="@((DateTime? newValue) => OnDateChangedEnd(newValue))"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                NullText="Select a date..."></DxDateEdit>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="main-card mb-3 card">
    <div class="card-body" onbeforeunload="TestDataTablesRemove('#example')">
        <div class="col-lg-16" align="right">
            <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" @onclick="@Print" style="margin-bottom: 10px; width:200px">Print</button>
            <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" @onclick="@InsertRow"  style="margin-bottom: 10px; width:200px"> Request new </button>
        </div>
        <DxGrid @ref="MyGrid" Data="@Data" PageSize="10" PagerNavigationMode="PagerNavigationMode.InputBox" PagerVisible="true">
            <Columns>
                <DxGridDataColumn FieldName="EmployeeNumber" Caption="Employee No.">

                </DxGridDataColumn>
                <DxGridDataColumn FieldName="Fullname" Caption="Employee Name">

                </DxGridDataColumn>
                <DxGridDataColumn FieldName="Status" Caption="Status">

                </DxGridDataColumn>
                <DxGridDataColumn FieldName="Date" Caption="Date">

                </DxGridDataColumn>
                <DxGridDataColumn FieldName="PositionTitle" Caption="Position">

                </DxGridDataColumn>
                <DxGridDataColumn FieldName="OrganizationalLevel" Caption="Office">

                </DxGridDataColumn>
                <DxGridDataColumn FieldName="" Caption="Action" TextAlignment="GridTextAlignment.Center">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as HRMSv4.Shared.HrMgmt.LeaveMonetization);
                        }

                        @if (temp.Status == "Pending")
                        {
                            <button data-bs-toggle="tooltip" data-bs-placement="left" title="Edit" data-bs-original-title="Edit" class="border-0 btn-transition btn btn-outline-success" @onclick="()=> EditRow(temp)"><span class="pe-7s-note"></span></button>
                        }

                      
                        <button data-bs-toggle="tooltip" data-bs-placement="left" title="View" data-bs-original-title="Details" class="border-0 btn-transition btn btn-outline-primary" @onclick="()=> ShowApproval(temp)"><span class="pe-7s-search"></span></button>
                        <button data-bs-toggle="tooltip" data-bs-placement="left" title="Delete" data-bs-original-title="Delete" class="border-0 btn-transition btn btn-outline-danger" @onclick="()=>DeleteRow(temp)"><span class="pe-7s-trash"></span></button>

                    </CellDisplayTemplate>
                </DxGridDataColumn>


            </Columns>

        </DxGrid>


    </div>
</div>
@code {
    //IEnumerable<HRMSv4.Shared.HrMgmt.LeaveMonetization> monetizations;
    //RadzenDataGrid<HRMSv4.Shared.HrMgmt.LeaveMonetization> monetizationGrid;
    HRMSv4.Shared.HrMgmt.LeaveMonetization monToInsert;
    [CascadingParameter] public IModalService Modal { get; set; }
    object Data { get; set; }
    GridDevExtremeDataSource<HRMSv4.Shared.HrMgmt.LeaveMonetization> gridDevExtremeDataSource;
    string userId = "";

    bool isLoading;
    int count;
    IGrid? MyGrid { get; set; }
    DateTime? Start { get; set; } = DateTime.Now.AddDays(-30);
    DateTime? End { get; set; }
    List<string> statusList = new List<string>() { "All Records", "Approved", "Declined", "Pending" };
    string selectedStatus = "Pending";

    protected override async Task OnInitializedAsync()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;


        End = DateTime.Now;
        //devexpress server side - iqueryable
        gridDevExtremeDataSource = new GridDevExtremeDataSource<HRMSv4.Shared.HrMgmt.LeaveMonetization>(await _leaveMonizationService.GetMonetizationList(selectedStatus, (Start.HasValue ? Start.Value : null), (End.HasValue ? End.Value : null)));
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            // If underlying data is a large SQL table, specify PrimaryKey and PaginateViaPrimaryKey.
            // This can make SQL execution plans more efficient.
            loadOptions.PrimaryKey = new[] { "MonetizedLeaveCreditId" };
            loadOptions.PaginateViaPrimaryKey = true;

        };

        Data = gridDevExtremeDataSource;
    }

    async Task InsertRow()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),
                ContentScrollable = true,

            };
        //var parameters = new ModalParameters();
        //parameters.Add(nameof(PositionModal.posId), positionListViewModel.PositionId);
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.LeaveManagement.MonetizedLeaveCreditsModal>("Monetization Leave Credits", options);
        var modalResult = await _modalStatus.Result;
        if (modalResult.Cancelled == false)
        {
            gridDevExtremeDataSource = new GridDevExtremeDataSource<HRMSv4.Shared.HrMgmt.LeaveMonetization>(await _leaveMonizationService.GetMonetizationList(selectedStatus, (Start.HasValue ? Start.Value : null), (End.HasValue ? End.Value : null)));
            Data = gridDevExtremeDataSource;
            MyGrid.Reload();
        }
    }

    async Task FilterStatus(string stat)
    {
        selectedStatus = stat;

        gridDevExtremeDataSource = new GridDevExtremeDataSource<HRMSv4.Shared.HrMgmt.LeaveMonetization>(await _leaveMonizationService.GetMonetizationList(selectedStatus, (Start.HasValue ? Start.Value : null), (End.HasValue ? End.Value : null)));
        Data = gridDevExtremeDataSource;
        MyGrid.Reload();
    }

    async Task EditRow(HRMSv4.Shared.HrMgmt.LeaveMonetization lt)
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),
                ContentScrollable = true,

            };
        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.LeaveManagement.MonetizedLeaveCreditsModal.employeeId), lt.EmployeeId);
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.LeaveManagement.MonetizedLeaveCreditsModal.monetizedCreditId), lt.MonetizedLeaveCreditId);
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.LeaveManagement.MonetizedLeaveCreditsModal>("Update Monetization Leave Credits", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (modalResult.Cancelled == false)
        {
            gridDevExtremeDataSource = new GridDevExtremeDataSource<HRMSv4.Shared.HrMgmt.LeaveMonetization>(await _leaveMonizationService.GetMonetizationList(selectedStatus, (Start.HasValue ? Start.Value : null), (End.HasValue ? End.Value : null)));
            Data = gridDevExtremeDataSource;
            MyGrid.Reload();
        }
    }

    async Task DeleteRow(HRMSv4.Shared.HrMgmt.LeaveMonetization lt)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You are about to delete this record.",
                Icon = "warning",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#414141"
            });

        if (!string.IsNullOrWhiteSpace(result.Value))
        {
            var res = await _leaveMonizationService.DeleteRequestMonetization(lt.MonetizedLeaveCreditId);

            if (res.StatusCode == 200)
            {
                await _Swal.FireAsync("Success", "You have successfully deleted a record.", "success");
                gridDevExtremeDataSource = new GridDevExtremeDataSource<HRMSv4.Shared.HrMgmt.LeaveMonetization>(await _leaveMonizationService.GetMonetizationList(selectedStatus, (Start.HasValue ? Start.Value : null), (End.HasValue ? End.Value : null)));
                Data = gridDevExtremeDataSource;
                MyGrid.Reload();
            }
            else
            {
                await _Swal.FireAsync("Oops...", "Something went wrong!", "error");
            }
        }
    }

    async Task ShowApproval(HRMSv4.Shared.HrMgmt.LeaveMonetization lt)
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),
                ContentScrollable = true,

            };
        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.LeaveManagement.MonetizationDetailsModal.leaveMonetization), lt);
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.LeaveManagement.MonetizationDetailsModal>("Monetization Leave Credits Approval", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (modalResult.Cancelled == false)
        {
            gridDevExtremeDataSource = new GridDevExtremeDataSource<HRMSv4.Shared.HrMgmt.LeaveMonetization>(await _leaveMonizationService.GetMonetizationList(selectedStatus, (Start.HasValue ? Start.Value : null), (End.HasValue ? End.Value : null)));
            Data = gridDevExtremeDataSource;
            MyGrid.Reload();
        }
    }

    async Task Print()
    {
        var psgcCode = await localStorage.GetItemAsync<string>("AdminPsgcCode");

        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        string username = "";

        username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;

        string dtStart = ""; string dtEnd = "";
        dtStart = Start.HasValue ? Start.Value.Year + "-" + Start.Value.Month + "-" + Start.Value.Day : "1900-01-01";
        dtEnd = End.HasValue ? End.Value.Year + "-" + End.Value.Month + "-" + End.Value.Day : "1900-01-01";

        string arrayOfParemeters = selectedStatus + "," + psgcCode + "," + "na" + "," + username + "," + dtStart + "," + dtEnd;
        string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

        string url = $"/viewer/{"LeaveMonetizationReport"}/{_encryptedParameter}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    async Task OnDateChangedStart(DateTime? newValue)
    {
        try
        {
            Start = newValue;
            gridDevExtremeDataSource = new GridDevExtremeDataSource<HRMSv4.Shared.HrMgmt.LeaveMonetization>(await _leaveMonizationService.GetMonetizationList(selectedStatus, (Start.HasValue ? Start.Value : null), (End.HasValue ? End.Value : null)));
            Data = gridDevExtremeDataSource;
            MyGrid.Reload();
        }
        catch (Exception ex)
        {

            throw;
        }

    }

    async Task OnDateChangedEnd(DateTime? newValue)
    {
        try
        {
            End = newValue;
            gridDevExtremeDataSource = new GridDevExtremeDataSource<HRMSv4.Shared.HrMgmt.LeaveMonetization>(await _leaveMonizationService.GetMonetizationList(selectedStatus, (Start.HasValue ? Start.Value : null), (End.HasValue ? End.Value : null)));
            Data = gridDevExtremeDataSource;
            MyGrid.Reload();
        }
        catch (Exception ex)
        {

            throw;
        }

    }
}
