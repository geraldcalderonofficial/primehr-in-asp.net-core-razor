@inject IStaffing serviceStaffing
@inject IJSRuntime JSRuntime
@inject IPosition service
@inject IJobCategory serviceJobCategory
@inject SweetAlertService _swal
@using HRMSv4.Client.Service
@using HRMSv4.Shared.HrMgmt
@using HRMSv4.Shared.OnBoarding
@using DevExpress.Blazor
@using HRMSv4.Shared.SignalRData
@inject ILeavePermission _leavePermissionService
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.SignalR.Client
@inject HubConnection HubConnection
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="min-card mb-3 card">
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <div class="position-relative mb-3">
                    <label class="form-label" for="LeavePermissionStatus">Status</label>
                    <select class="form-select form-control-sm form-control" @onchange="@FilterStatus">
                        <option value="" disabled>Select Status</option>
                        <option value="All Records">All Records</option>
                        <option value="Approved">Approved</option>
                        <option value="Declined">Declined</option>
                        <option value="Pending" selected>Pending</option>
                    </select>
                </div>
            </div>
            <div class="col-md-4">
                <div class="position-relative mb-3">
                    <label class="form-label" for="LeavePermissionFromDate">From Date</label>
                    @*<DxDateEdit Date="@Start"
                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                    NullText="Select a date..."></DxDateEdit>*@
                    <DxDateEdit Date="@Start" SizeMode="SizeMode.Medium" Enabled="@isEnabledStart" DateChanged="@((DateTime? newValue) => OnDateChangedStart(newValue))"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                NullText="Select a date..."></DxDateEdit>
                </div>
            </div>
            <div class="col-md-4">
                <div class="position-relative mb-3">
                    <label class="form-label" for="LeavePermissionToDate">To Date</label>
                    <DxDateEdit SizeMode="SizeMode.Medium" Date="@End" Enabled="@isEnabledEnd"
                                DateChanged="@((DateTime? newValue) => OnDateChangedEnd(newValue))"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                NullText="Select a date..."></DxDateEdit>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="min-card mb-3 card">
    <div class="card-body" onbeforeunload="TestDataTablesRemove('#example')">
        <div class="col-lg-16" align="right">
            <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" style="margin-bottom: 10px; width:200px" @onclick="()=> PrintBlank()"> Print </button>
           @* <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" style="margin-bottom: 10px; width:200px" @onclick="InsertRow"> Add </button>*@
            <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" style="margin-bottom: 10px; width:200px" @onclick="InsertRow2"> Add</button>
        </div>
        <DxGrid @ref="MyGrid" Data="Data"
                ValidationEnabled="false"
                CustomizeEditModel="Grid_CustomizeEditModel"
                EditModelSaving="Grid_EditModelSaving"
                DataItemDeleting="Grid_DataItemDeleting"
                PopupEditFormCssClass="pw-800"
                EditMode="GridEditMode.EditRow"
                PagerVisible="true"
                PageSize="10">
            <Columns>
                <DxGridDataColumn FieldName="EmployeeName" Caption="Employee Name">
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="Position" Caption="Position" TextAlignment="GridTextAlignment.Center">
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="Organization" Caption="Organization">
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="Duration" Caption="Duration" AllowSort="false" TextAlignment="GridTextAlignment.Center">
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="Status" Caption="Status" AllowSort="false" TextAlignment="GridTextAlignment.Center">
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="LeavePermissionId" Caption="Action" AllowSort="false" TextAlignment="GridTextAlignment.Center">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as LeavePermissionView);
                            var roleUser = role;
                        }

                        @if(temp.Status != "Approved" && temp.Status != "Declined")
                        {
                              <button data-bs-toggle="tooltip" data-bs-placement="left" title="Edit" class="border-0 btn-transition btn btn-outline-success" @onclick="()=> EditRow(temp)"><span class="pe-7s-note"></span></button>
                        }

                        <button data-bs-toggle="tooltip" data-bs-placement="left" title="Details" class="border-0 btn-transition btn btn-outline-primary" @onclick="()=> ShowDetails(temp)"><span class="pe-7s-search"></span></button>
                        @if (temp.Status != "Pending")
                        {
                            <button data-bs-toggle="tooltip" data-bs-placement="left" title="Print" class="border-0 btn-transition btn btn-outline-warning" @onclick="()=> PrintUser(temp.LeavePermissionId.ToString())"><span class="pe-7s-print"></span></button>
                        }

                         @if(temp.Status != "Approved" && temp.Status != "Declined")
                         {
                              <button data-bs-toggle="tooltip" data-bs-placement="left" title="Delete" class="border-0 btn-transition btn btn-outline-danger" @onclick="()=>DeleteRow((int)context.Value)"><span class="pe-7s-trash"></span></button>
                         }
                       

                    </CellDisplayTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
    </div>
</div>

@code {

    [Parameter] public int EmployeeId { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }
    IGrid? MyGrid { get; set; }
    bool isButtonHide = false;
    string Status { get; set; }
    DateTime? Start { get; set; }
    DateTime? End { get; set; }

    bool isEnabledStart = true;
    bool isEnabledEnd = false;

    DateTime defaultDate = new DateTime(1900, 01, 01);
    DateTime newEndDate = new DateTime(2077, 01, 01);
    public string role = "";
    //public EventCallback<T> DateChanged { get; set; }

    //Server Side
    object Data { get; set; }
    GridDevExtremeDataSource<LeavePermissionView> gridDevExtremeDataSource;

    int count;
    List<LeavePermissionView> leavePermissions = new List<LeavePermissionView>();
    protected override async Task OnInitializedAsync()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        role = user.FindFirst(c => c.Type.Contains("role"))?.Value;

        if (role == "Administrator")
        {
            isButtonHide = false;
        }
        else
        {
            if (role == "Employee")
            {
                isButtonHide = true;
            }
        }

        if (Start == null)
        {

        }

        var myDate = DateTime.Now;
        //Start = new DateTime(myDate.Year, myDate.Month, 1);
        // End = Start.Value.AddMonths(1).AddDays(-1);
        //Start = null;
        //End = null;
        Status = "Pending";

        HubConnection.On<SignalRCarrier>("PermissionToLeaveApprovalRefresh", async survey =>
       {
           //await _header.NotificationList(0);
           //leavePermissions = await _leavePermissionService.All(Status, Start, End, EmployeeId);

           var allNotif = await _leavePermissionService.All(Status, Start, End, 0);

           gridDevExtremeDataSource = new GridDevExtremeDataSource<LeavePermissionView>(allNotif);
           Data = gridDevExtremeDataSource;
           MyGrid.Reload();
           StateHasChanged();
       });

        gridDevExtremeDataSource = new GridDevExtremeDataSource<LeavePermissionView>(await _leavePermissionService.All(Status, Start, End, 0));
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            // If underlying data is a large SQL table, specify PrimaryKey and PaginateViaPrimaryKey.
            // This can make SQL execution plans more efficient.
            loadOptions.PrimaryKey = new[] { "EmployeeId" };
            loadOptions.PaginateViaPrimaryKey = true;

        };

        Data = gridDevExtremeDataSource;

        //leavePermissions = await _leavePermissionService.All(Status, Start, End, 0);
        StateHasChanged();
    }

    async Task InsertRow()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),

            };
        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.LeavePermissionModal.EmployeeId), 0);
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.LeavePermissionModal.LeavePermissionId), 0);
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.LeavePermissionModal>("New Leave Permission Request", options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            gridDevExtremeDataSource = new GridDevExtremeDataSource<LeavePermissionView>(await _leavePermissionService.All(Status, Start, End, 0));
            Data = gridDevExtremeDataSource;
            MyGrid.Reload();
            //leavePermissions = await _leavePermissionService.All(Status, Start, End, 0);

            this.StateHasChanged();
        }
    }

    async Task InsertRow2()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),

            };
        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.LeavePermissionModalv2.EmployeeId), 0);
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.LeavePermissionModalv2.LeavePermissionId), 0);
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.LeavePermissionModalv2.leavepermissionview), new LeavePermissionView());
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.LeavePermissionModalv2>("New Leave Permission Request", options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            gridDevExtremeDataSource = new GridDevExtremeDataSource<LeavePermissionView>(await _leavePermissionService.All(Status, Start, End, 0));
            Data = gridDevExtremeDataSource;
            MyGrid.Reload();
            //leavePermissions = await _leavePermissionService.All(Status, Start, End, 0);

            this.StateHasChanged();
        }
    }

    async Task Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {

    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {

    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {

    }

    async Task EditRow(HRMSv4.Shared.HrMgmt.LeavePermissionView lt)
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),

            };
        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.LeavePermissionModalv2.leavepermissionview), lt);
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.LeavePermissionModalv2>("Edit Leave Permission", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            gridDevExtremeDataSource = new GridDevExtremeDataSource<LeavePermissionView>(await _leavePermissionService.All(Status, Start, End, 0));
            Data = gridDevExtremeDataSource;
            MyGrid.Reload();
            //leavePermissions = await _leavePermissionService.All(Status, Start, End, 0);
            this.StateHasChanged();
        }

    }

    async Task ShowDetails(HRMSv4.Shared.HrMgmt.LeavePermissionView lt)
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),

            };
        var parameters = new ModalParameters();

        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.LeavePermissionDetails.leavepermissionview), lt);
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.LeavePermissionDetails>("Details", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {

            gridDevExtremeDataSource = new GridDevExtremeDataSource<LeavePermissionView>(await _leavePermissionService.All(Status, Start, End, 0));
            Data = gridDevExtremeDataSource;
            MyGrid.Reload();
            //leavePermissions = await _leavePermissionService.All(Status, Start, End, 0);
            this.StateHasChanged();
        }
    }

    async Task DeleteRow(int id)
    {
        try
        {
            SweetAlertResult res = await _swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Are you sure?",
                    Text = "You will not be able to recover this record!",
                    Icon = "warning",
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes, delete it!",
                    CancelButtonText = "No, keep it",
                    CancelButtonColor = "red"
                });

            if (!string.IsNullOrEmpty(res.Value))
            {
                var result = await _leavePermissionService.Delete(id);

                if (result.StatusCode == 200)
                {
                    gridDevExtremeDataSource = new GridDevExtremeDataSource<LeavePermissionView>(await _leavePermissionService.All(Status, Start, End, 0));
                    Data = gridDevExtremeDataSource;
                    MyGrid.Reload();
                    //leavePermissions = await _leavePermissionService.All(Status, Start, End, 0);
                    StateHasChanged();

                    await _swal.FireAsync(
                                  "Deleted",
                                  "Record has been deleted.",
                                  "success"
                                  );
                }
                else
                {
                    await _swal.FireAsync(
                      "Oops...",
                      "Something went wrong.",
                      "error"
                      );
                }
            }

        }
        catch (Exception)
        {

            throw;
        }
    }

    async void FilterStatus(ChangeEventArgs e)
    {
        string temp = e.Value.ToString();
        Status = temp;

        gridDevExtremeDataSource = new GridDevExtremeDataSource<LeavePermissionView>(await _leavePermissionService.All(Status, Start, End, 0));
        Data = gridDevExtremeDataSource;
        MyGrid.Reload();
        //leavePermissions = await _leavePermissionService.All(temp, Start, End, 0);
        StateHasChanged();
    }

    //async void FilterDate(ChangeEventArgs e)
    //{
    //    //Start = start;
    //    string temp = e.Value.ToString();
    //    DateTime rawr = Convert.ToDateTime(temp);
    //    Start = rawr;
    //    leavePermissions = await _leavePermissionService.All(Status, Start, End);
    //    StateHasChanged();

    //}

    DateTime Date = DateTime.Today;
    bool IsDisabled = true;

    async Task OnDateChangedStart(DateTime? newValue)
    {

        if (newValue.HasValue) isEnabledEnd = true;
        else isEnabledEnd = false;

        Start = newValue == null ? null : newValue.Value;
        if (newValue != DateTime.Today)
        {

            gridDevExtremeDataSource = new GridDevExtremeDataSource<LeavePermissionView>(await _leavePermissionService.All(Status, Start, End, 0));
            Data = gridDevExtremeDataSource;
            MyGrid.Reload();
            //leavePermissions = await _leavePermissionService.All(Status, (Start == null ? defaultDate : Start), End, 0);
            StateHasChanged();
            IsDisabled = false;

        }
        else
        {
            IsDisabled = true;
        }

    }

    async Task OnDateChangedEnd(DateTime? newValue)
    {

        if (newValue.HasValue) isEnabledStart = false;
        else isEnabledStart = true;

        End = newValue == null ? null : newValue.Value;
        if (newValue != defaultDate)
        {

            gridDevExtremeDataSource = new GridDevExtremeDataSource<LeavePermissionView>(await _leavePermissionService.All(Status, Start, End, 0));
            Data = gridDevExtremeDataSource;
            MyGrid.Reload();
            //leavePermissions = await _leavePermissionService.All(Status, Start, (End == null ? defaultDate : End), 0);
            StateHasChanged();
            IsDisabled = false;

        }
        else
        {
            IsDisabled = true;
        }
    }

    //async Task Print()
    //{
    //    var psgcCode = await localStorage.GetItemAsync<string>("AdminPsgcCode");

    //    var user = (await _AutService.GetAuthenticationStateAsync()).User;
    //    string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

    //    string url = $"/viewer/{"PermissionToLeaveBlank"}";
    //    await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    //}

    async Task PrintBlank()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),

            };
        var parameters = new ModalParameters();
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.LeavePermissionSignatory>("Print Leave Form", options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            gridDevExtremeDataSource = new GridDevExtremeDataSource<LeavePermissionView>(await _leavePermissionService.All(Status, Start, End, 0));
            Data = gridDevExtremeDataSource;
            MyGrid.Reload();
            //leavePermissions = await _leavePermissionService.All(Status, Start, End, 0);

            this.StateHasChanged();
        }
    }

    async Task PrintUser(string Id)
    {
        var psgcCode = await localStorage.GetItemAsync<string>("AdminPsgcCode");

        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        string arrayOfParemeters = Id;
        string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

        string url = $"/viewer/{"PermissionToLeaveApplicationRequest"}/{_encryptedParameter}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }
}
