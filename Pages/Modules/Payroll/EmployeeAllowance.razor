@page "/module-employeeallowance"
@using DevExpress.Blazor
@using HRMSv4.Client.Interface.Payroll
@using HRMSv4.Client.Shared.Modals.Payroll.EmployeeAllowanceComponents
@using HRMSv4.Shared.Payroll
@inject IAllowancetype typeService
@inject IEmployeeAllowance service
@inject IEmployee empService
@inject ILevelOrganization levelService
@inject ILevelOrganization _IlevelOrganization
@inject IPlantilla plantillaService
@inject SweetAlertService Swal;
<style>
    .input-group-text {
        display: flex;
        align-items: center;
        padding: unset !important;
        font-size: 0.88rem;
        font-weight: 400;
        line-height: 1.5;
        color: #495057;
        text-align: center;
        white-space: nowrap;
        background-color: unset !important;
        border: unset !important;
        /* background-color: #eff9ff; */
        /* border: 1px solid #ced4da; */
        border-radius: 0.25rem;
        margin: unset !important;
    }

    .customTextBox .dxbs-btn-group {
        top: 0px;
    }

</style>
@if (HideActions)
{
    <HRMSv4.Client.Shared.MainComponents.Fab OnClick="ClickHandler" AllowanceMode="true"></HRMSv4.Client.Shared.MainComponents.Fab>
}
<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Employee Allowances
            </h3>
        </div>
        <div class="page-title-actions">
            <div class="d-inline-block dropdown">
                <button type="button" data-bs-toggle="dropdown" aria-haspopup="true"
                        aria-expanded="false" class="btn-shadow dropdown-toggle btn btn-info">
                    <span class="btn-icon-wrapper pe-2 opacity-7">
                        <i class="fa fa-business-time fa-w-20"></i>
                    </span>
                    Actions
                </button>
                <div tabindex="-1" role="menu" aria-hidden="true" class="dropdown-menu dropdown-menu-right">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link" href="/masterdata-allowancetype">
                                <i class="nav-link-icon pe-7s-note2"></i>
                                <span>Types</span>
                            </a>
                        </li>

                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="main-card mb-3 card">
            <div class="card-body">
                <div class="row">
                    <div class="mb-3 col-xl-3 col-sm-12">
                        <label class="" for="exampleEmail55">Organization Level</label>
                        <DxComboBox Data="@_highestLevel"
                                    NullText="--Select Level--"
                                    TextChanged="OnDeptSelect"
                                    @bind-Value="department"
                                    SizeMode="SizeMode.Medium"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                        @* <div class="input-group-text">
                        <button onclick="@GetOrgLevelModal" class="btn btn-light"><i class="fa fa-search"></i></button>
                        <DxTextBox @bind-Text="@orgLevelname" SizeMode="SizeMode.Medium"
                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                        BindValueMode="BindValueMode.OnInput"
                        NullText="Select organizational level.."
                        ReadOnly="true"
                        CssClass="cw-320 w-100 customTextBox" />
                        </div>*@
                    </div>
                    <div class="mb-3 col-xl-3 col-sm-12">
                        <label class="" for="exampleEmail55">Is Plantilla</label>
                        <DxComboBox Data="@IsPlantilla"
                                    @bind-Value="@plant"
                                    @bind-Text="@selected"
                                    SelectedItemChanged="SelectedChanged"
                                    FilteringMode="@FilteringMode"
                                    AllowUserInput="false"
                                    CssClass="cw-480" SizeMode="SizeMode.Medium" />
                    </div>

                </div>

                <div class="d-flex flex-wrap w-100">
                    <div class="w-auto mt-1 me-1 flex-grow-1" style="flex-basis: 700px">
                        <DxGrid Data="@empList"
                                SelectionMode="GridSelectionMode.Multiple"
                                KeyFieldName="EmployeeId"
                                AllowSelectRowByClick="true"
                                PageSize="15" PagerPosition="GridPagerPosition.Bottom"
                                PagerVisibleNumericButtonCount="10"
                                ShowGroupPanel="true"
                                AutoExpandAllGroupRows="true"
                                ShowFilterRow="true"
                                @bind-SelectedDataItems="@SelectedDataItems">
                            <Columns>
                                <DxGridDataColumn FieldName="Organization" GroupIndex="0" />
                                <DxGridDataColumn FieldName="EmployeeNumber" Caption="Employee No." Width="100px" />
                                <DxGridDataColumn FieldName="EmployeeName" Caption="Employee Name" />
                                <DxGridDataColumn FieldName="EmploymentStatus" Caption="Employment Status" />
                                <DxGridDataColumn FieldName="Position" Caption="Position Title" />
                            </Columns>
                        </DxGrid>

                    </div>
                    <div class="card mt-1 me-1 flex-grow-1 max-h-420" style="flex-basis: 100px">
                        <div class="card-header bg-transparent text-body py-2 border-bottom-0 fw-bold">Selected employee/s:</div>
                        <div class="card-body p-0 pb-2 overflow-auto">
                            <ul class="list-group list-group-flush bg-transparent border-0">
                                @foreach (var emp in SelectedDataItems.Cast<EmployeeAllowanceView>())
                                {
                                    <li class="list-group-item bg-transparent text-body py-1 border-0">
                                        <div class="row">
                                            <div class="row">
                                                <div class="col-6">Employee Number</div>
                                                <div class="col-1">:</div>
                                                <div class="col"><strong>@emp.EmployeeNumber</strong></div>
                                            </div>
                                        </div>
                                    </li>
                                    <li class="list-group-item bg-transparent text-body py-1 border-0">
                                        <div class="row">
                                            <div class="row">
                                                <div class="col-6">Employee Name</div>
                                                <div class="col-1" s>:</div>
                                                <div class="col"><strong>@emp.EmployeeName</strong></div>
                                            </div>
                                        </div>
                                    </li>

                                    <div class="divider"></div>
                                    <div class="overflow-auto p-3 mb-3 mb-md-0 mr-md-3 " style="max-width: 500px; max-height: 500px;">
                                        @foreach (var item in emp.AllowanceCount)
                                        {
                                        <li class="list-group-item bg-transparent text-body py-1 border-0">
                                            <div class="row">
                                                <div class="row">
                                                    <div class="col-6">Allowance Type</div>
                                                    <div class="col-1" s>:</div>
                                                    <div class="col">@item.AllowanceTypeName</div>
                                                </div>
                                            </div>
                                        </li>
                                        <li class="list-group-item bg-transparent text-body py-1 border-0">
                                            <div class="row">
                                                <div class="row">
                                                    <div class="col-6">Allowance Amount</div>
                                                    <div class="col-1" s>:</div>
                                                    <div class="col">@item.AllowanceAmount.Value.ToString("n2")</div>
                                                </div>
                                            </div>
                                        </li>
                                        <li class="list-group-item bg-transparent text-body py-1 border-0">
                                            <div class="row">
                                                <div class="row">
                                                    <div class="col-6">Specific Cutoff</div>
                                                    <div class="col-1" s>:</div>
                                                    <div class="col">@item.Cutoff</div>
                                                </div>
                                            </div>
                                        </li>
                                        <div class="divider"></div>
                                        }
                            </div>

                                }
                        </ul>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</div>
@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    DataGridFilteringMode FilteringMode { get; set; } = DataGridFilteringMode.StartsWith;
    bool HideActions = true;
    IReadOnlyList<object> SelectedDataItems { get; set; }
    IReadOnlyList<object> SelectedEmployees { get; set; }
    string userId { get; set; }
    string orgLevelname = "";
    int selectedOrgLevel { get; set; }
    bool plant = true;
    string selected = "";
    IEnumerable<EmployeeAllowanceView> empList = new List<EmployeeAllowanceView>();
    List<string> IsPlantilla = new List<string>() { "Plantilla", "Non-Plantilla" };
    public string department { get; set; } = "0";
    private List<SelectListItems> _highestLevel { get; set; } = new List<SelectListItems>();

    protected override async Task OnInitializedAsync()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        _highestLevel = await _IlevelOrganization.GetHighestLevel();
        //plant = true;
        selected = "Plantilla";
        //GetData();
        empList = await service.GetAll(int.Parse(department), true);
        SelectedDataItems = empList.Skip(1).Take(1).ToList();

    }
    //async Task GetOrgLevelModal()
    //{
    //    var parameters = new ModalParameters();
    //    parameters.Add(nameof(SharedLevelOrganization.IsPlantilla), true);

    //    var options = new ModalOptions()
    //        {
    //            DisableBackgroundCancel = true,
    //            Animation = ModalAnimation.FadeIn(0.2),
    //            ContentScrollable = true,
    //        };

    //    var moviesModal = Modal.Show<SharedLevelOrganization>("Organization Level", parameters, options);
    //    var result = await moviesModal.Result;

    //    if (!result.Cancelled)
    //    {
    //        selectedOrgLevel = result.Data != null ? int.Parse(result.Data.ToString()) : 0;

    //        var getLevel = await levelService.Get(selectedOrgLevel);
    //        orgLevelname = getLevel.Name;
    //        empList = await service.GetAll(selectedOrgLevel, plant);

    //        StateHasChanged();
    //    }

    //}
    void OnDeptSelect(string item)
    {
        department = item;
        GetData();
    }

    async void GetData()
    {
        try
        {
            var res = await plantillaService.PlantillaYear(userId);
            if (department == null)
            {
                department = "0";
            }

            if (selected == "Plantilla")
            {
                empList = await service.GetAll(int.Parse(department), true);
            }
            else
            {
                empList = await service.GetAll(int.Parse(department), false);
            }
            SelectedDataItems = empList.Skip(1).Take(1).ToList();
            StateHasChanged();
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    async void SelectedChanged(string newValue)
    {
        selected = newValue;
        GetData();
        if (newValue == null)
        {
            selected = "Plantilla";
        }
        else
        {
            if (newValue == "Plantilla")
            {
                plant = true;
                GetData();
            }
            else
            {
                plant = false;
                GetData();
            }
        }

        StateHasChanged();
    }

    async Task UpdateDataAsync()
    {
        //plant = true;
        //selected = "Plantilla";
        GetData();
    }
    async Task ClickHandler(string action)
    {
        List<EmployeeAllowanceView> emps = new List<EmployeeAllowanceView>();
        emps = SelectedDataItems.Cast<EmployeeAllowanceView>().ToList();
        var premList = await service.GetEmpAllowances(emps);

        if (emps.Count() == 0)
        {
            await Swal.FireAsync("Oops!", "Please select employee.", "warning");
        }
        else
        {
            if (action == "Add")
            {
                var options = new ModalOptions()
                    {
                        DisableBackgroundCancel = true,
                        ContentScrollable = false,
                    };
                var parameters = new ModalParameters();
                parameters.Add(nameof(GenerateAllowanceModal.selectedEmployee), emps);
                var _modalStatus = Modal.Show<GenerateAllowanceModal>("Add Employee Allowance", parameters, options);
                var modalResult = await _modalStatus.Result;
                if (modalResult.Cancelled == false)
                {
                    UpdateDataAsync();
                    empList = await service.GetAll(int.Parse(department), true);

                    SelectedDataItems = (from a in empList
                                         join b in emps on a.EmployeeId equals b.EmployeeId
                                         select a).ToList();


                    this.StateHasChanged();


                }
            }

            if (action == "Update")
            {
                SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Are you sure?",
                        Text = "You are about to update this allowance/s.",
                        Icon = "warning",
                        ShowCancelButton = true,
                        ConfirmButtonText = "Yes, I am sure!",
                        CancelButtonText = "Cancel",
                        CancelButtonColor = "#dc3741"

                    });
                if (!string.IsNullOrEmpty(result.Value))
                {

                    var options = new ModalOptions()
                        {
                            DisableBackgroundCancel = true,
                            ContentScrollable = false,
                        };
                    var parameters = new ModalParameters();
                    parameters.Add(nameof(ManageAllowanceModal.selectedEmployeeFromList), emps);
                    var _modalStatus = Modal.Show<ManageAllowanceModal>("Update Employee Allowance", parameters, options);
                    var modalResult = await _modalStatus.Result;
                    if (modalResult.Cancelled == false)
                    {
                        UpdateDataAsync();
                        empList = await service.GetAll(int.Parse(department), true);

                        SelectedDataItems = (from a in empList
                                             join b in emps on a.EmployeeId equals b.EmployeeId
                                             select a).ToList();


                        this.StateHasChanged();

                    }
                }
            }

            if (action == "Clear")
            {


                SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Are you sure?",
                        Text = "Do you really want to clear allowance/s?",
                        Icon = "warning",
                        ShowCancelButton = true,
                        ConfirmButtonText = "Yes, I am sure!",
                        CancelButtonText = "Cancel",
                        CancelButtonColor = "#dc3741"

                    });

                if (!string.IsNullOrEmpty(result.Value))
                {

                    ///show loading
                    EmployeeAllowanceView allowance = new EmployeeAllowanceView
                        {
                            AllowanceCount = emps
                            // UserId = userId
                        };


                    var res = await service.ClearAllowance(allowance);

                    if (res.StatusCode == 200)
                        await _Swal.FireAsync("Success", res.Value, "success");

                    UpdateDataAsync();
                    empList = await service.GetAll(int.Parse(department), true);

                    SelectedDataItems = (from a in empList
                                         join b in emps on a.EmployeeId equals b.EmployeeId
                                         select a).ToList();


                    this.StateHasChanged();

                }

            }
            this.StateHasChanged();
        }


    }
}
