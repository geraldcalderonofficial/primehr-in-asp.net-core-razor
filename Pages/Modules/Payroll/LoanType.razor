@page "/module-loans"
@using DevExpress.Blazor
@using HRMSv4.Shared.Payroll
@using HRMSv4.Client.Interface.Payroll
@inject IStaffing serviceStaffing
@inject IJSRuntime JSRuntime
@inject IPosition service
@inject ILoanType loanTypeService
@inject SweetAlertService _swal

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Loan Types
            </h3>
        </div>
        <div class="page-title-actions">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/module-deductions">Deductions</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Loan Types</li>
                </ol>
            </nav>
        </div>
    </div>
</div>

<div class="col-sm-12 col-xl-12 col-md-12 main-card mb-3 card">
    <div class="card-body" onbeforeunload="TestDataTablesRemove('#example')">
        <div class="col-lg-16" align="right">
            <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" style="margin-bottom: 10px; width:200px" onclick="@InsertRow"> Add </button>
        </div>
        <DxGrid @ref="MyGrid" Data="loanTypes"
                ValidationEnabled="false"
                CustomizeEditModel="Grid_CustomizeEditModel"
                EditModelSaving="Grid_EditModelSaving"
                DataItemDeleting="Grid_DataItemDeleting"
                PopupEditFormCssClass="pw-800"
                EditMode="GridEditMode.EditRow"
                PagerVisible="true"
                PageSize="10"
                ShowFilterRow="true">
            <Columns>
                <DxGridDataColumn Width="20rem" FieldName="LoanTypeName" Caption="Loan Type Name">
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="ShortName" Caption="Short Name">
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="Remarks" Caption="Remarks">
                </DxGridDataColumn>
                <DxGridDataColumn Width="8rem" FieldName="LoanTypeId" Caption="Action" AllowSort="false" TextAlignment="GridTextAlignment.Center">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as HRMSv4.Shared.Payroll.LoanType);
                        }
                        <button data-bs-toggle="tooltip" data-bs-placement="left" title="" data-bs-original-title="Edit" class="border-0 btn-transition btn btn-outline-success" @onclick="()=> EditRow(temp)"><span class="pe-7s-note"></span></button>
                        <button data-bs-toggle="tooltip" data-bs-placement="left" title="" data-bs-original-title="Delete" class="border-0 btn-transition btn btn-outline-danger" @onclick="()=> DeleteRow((int)context.Value)"><span class="pe-7s-trash"></span></button>
                    </CellDisplayTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
    </div>
</div>

@code {

    IGrid? MyGrid { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }
    IEnumerable<HRMSv4.Shared.Payroll.LoanType> loanTypes = new List<HRMSv4.Shared.Payroll.LoanType>();

    protected override async Task OnInitializedAsync()
    {
        loanTypes = await loanTypeService.GetLoanTypes();
        this.StateHasChanged();
    }

    async Task InsertRow()
    {
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.Payroll.LoanTypeModal>("Add Loan Type");
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            loanTypes = await loanTypeService.GetLoanTypes();
            this.StateHasChanged();
        }
    }

    async Task EditRow(HRMSv4.Shared.Payroll.LoanType lt)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.Payroll.LoanTypeModal._loanType), lt);

        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),

            };

        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.Payroll.LoanTypeModal>("Edit Loan Type", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            loanTypes = await loanTypeService.GetLoanTypes();
            this.StateHasChanged();
        }

    }

    async Task DeleteRow(int id)
    {
        try
        {
            SweetAlertResult res = await _swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Are you sure?",
                    Text = "You will not be able to recover this record!",
                    Icon = "warning",
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes, delete it!",
                    CancelButtonText = "No, keep it",
                    CancelButtonColor = "red"
                });

            if (!string.IsNullOrEmpty(res.Value))
            {
                var result = await loanTypeService.DeleteLoanType(id);

                if (result.StatusCode == 200)
                {

                    loanTypes = await loanTypeService.GetLoanTypes();
                    StateHasChanged();

                    await _swal.FireAsync(
                                  "Deleted",
                                  "Record has been deleted.",
                                  "success"
                                  );
                }
                else
                {
                    await _swal.FireAsync(
                      "Oops...",
                      "Something went wrong.",
                      "error"
                      );
                }
            }

        }
        catch (Exception)
        {

            throw;
        }
    }

    async Task Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {

    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {

    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {

    }

}
