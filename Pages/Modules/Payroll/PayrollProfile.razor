@page "/module-payrollprofiles"
@using DevExpress.Blazor
@using HRMSv4.Client.Interface.Payroll
@using HRMSv4.Client.Shared.Modals.Payroll.PayrollProfileComponents
@using HRMSv4.Shared.Payroll
@inject IEmployee empService
@inject ILevelOrganization levelService
@inject IPayrollProfile service
@inject IPlantilla plantillaService
@inject SweetAlertService Swal;

<style>
    .input-group-text {
        display: flex;
        align-items: center;
        padding: unset !important;
        font-size: 0.88rem;
        font-weight: 400;
        line-height: 1.5;
        color: #495057;
        text-align: center;
        white-space: nowrap;
        background-color: unset !important;
        border: unset !important;
        /* background-color: #eff9ff; */
        /* border: 1px solid #ced4da; */
        border-radius: 0.25rem;
        margin: unset !important;
    }

    .customTextBox .dxbs-btn-group {
        top: 0px;
    }

    .dxbs-checkbox .custom-control > .custom-control-input {
        width: inherit !important;
        height: inherit !important;
    }

    .dxbs-grid-header-content {
        justify-content: center;
    }

    .form-check-input {
        position: relative !important;
        margin-top: 0.3rem;
        margin-left: unset !important;
    }

</style>
@if (HideActions)
{
    <HRMSv4.Client.Shared.MainComponents.Fab OnClick="ClickHandler" PayrollProfileMode="true"></HRMSv4.Client.Shared.MainComponents.Fab>
}

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Payroll Profiles
            </h3>
        </div>
        <div class="page-title-actions">
            <div class="d-inline-block dropdown">
                <button type="button" data-bs-toggle="dropdown" aria-haspopup="true"
                        aria-expanded="false" class="btn-shadow dropdown-toggle btn btn-info">
                    <span class="btn-icon-wrapper pe-2 opacity-7">
                        <i class="fa fa-business-time fa-w-20"></i>
                    </span>
                    Actions
                </button>
                <div tabindex="-1" role="menu" aria-hidden="true" class="dropdown-menu dropdown-menu-right">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link" href="/masterdata/clusters">
                                <span>Clusters</span>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="main-card mb-3 card">
            <div class="card-body">
                <div class="row">
                    <div class="mb-3 col-xl-3 col-sm-12">
                        <label class="" for="exampleEmail55">Organization Level</label>
                        <DxComboBox Data="@_highestLevel"
                                    NullText="--Select Level--"
                                    TextChanged="OnDeptSelect"
                                    @bind-Value="department"
                                    SizeMode="SizeMode.Medium"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                      @*  <div class="input-group-text">
                            <button onclick="@GetOrgLevelModal" class="btn btn-light"><i class="fa fa-search"></i></button>
                            <DxTextBox @bind-Text="@orgLevelname" SizeMode="SizeMode.Medium"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       BindValueMode="BindValueMode.OnInput"
                                       NullText="Select organizational level.."
                                       ReadOnly="true"
                                       CssClass="cw-320 w-100 customTextBox" />
                        </div>*@
                    </div>
                    <div class="mb-3 col-xl-3 col-sm-12">
                        <label class="" for="exampleEmail55">Is Plantilla</label>
                        <DxComboBox Data="@IsPlantilla"
                                    @bind-Value="@plant"
                                    @bind-Text="@selected"
                                    SelectedItemChanged="SelectedChanged"
                                    FilteringMode="@FilteringMode"
                                    AllowUserInput="false"
                                    CssClass="cw-480" SizeMode="SizeMode.Medium" />
                    </div>


                </div>

                <div class="d-flex flex-wrap w-100">
                    <div class="w-auto mt-1 me-1 flex-grow-1" style="flex-basis: 700px">
                        <div class="align-self-end pl-2 pb-2" style="text-align: right;">
                            <DxButton Text="Column Chooser"
                                      RenderStyle="ButtonRenderStyle.Secondary"
                                      IconCssClass="btn-column-chooser"
                                      CssClass="column-chooser-button"
                                      Click="@OnClickColumnChooser" />
                        </div>

                        <DxGrid @ref="@Grid"
                                Data="@empList"
                                SelectionMode="GridSelectionMode.Single"
                                AllowSelectRowByClick="true"
                                KeyFieldName="EmployeeId"
                                @bind-SelectedDataItem="SelectedDataItem"
                                CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
                                PageSize="10" PagerPosition="GridPagerPosition.Bottom"
                                PagerVisibleNumericButtonCount="10"
                                ShowFilterRow="true">
                            <Columns>
                                <DxGridDataColumn FieldName="EmployeeName" Caption="Employee Name" Width="200px" MinWidth="150" />
                                <DxGridDataColumn FieldName="DepartmentName" Caption="Department" Width="200px" MinWidth="150" TextAlignment="GridTextAlignment.Left" />
                                <DxGridDataColumn FieldName="MonthlyRate" />
                                <DxGridDataColumn FieldName="HalfMonthRate" />
                                <DxGridDataColumn FieldName="DailyRate" />
                                <DxGridDataColumn FieldName="HourlyRate" />
                                <DxGridDataColumn FieldName="NumberOfAllowances" Caption="No. of Allowances" DisplayFormat="d" />
                                <DxGridDataColumn FieldName="NumberOfLoans" Caption="No. Of Loans" DisplayFormat="d" />
                                <DxGridDataColumn FieldName="NumberOfDeductions" Caption="No. Of Deductions" DisplayFormat="d" />
                                @* <DxGridDataColumn FieldName="GsisAmount" DisplayFormat="n2" />
                                <DxGridDataColumn FieldName="HdmfAmount" DisplayFormat="n2" />
                                <DxGridDataColumn FieldName="PhilHealthAmount" Caption="PhilHealth Amount" DisplayFormat="n2" />
                                <DxGridDataColumn FieldName="SssAmount" DisplayFormat="n2" />
                                <DxGridDataColumn FieldName="WithholdingTaxValue" DisplayFormat="n2" />*@
                            </Columns>
                        </DxGrid>
                    </div>
                    <div class="card mt-1 me-1 flex-grow-1 max-h-420" style="flex-basis: 100px">
                        <div class="card-header bg-transparent text-body py-2 border-bottom-0 fw-bold">Selected employee:</div>
                        <div class="card-body p-0 pb-2 overflow-auto">
                            <ul class="list-group list-group-flush bg-transparent border-0">
                                <li class="list-group-item bg-transparent text-body py-1 border-0">
                                    <div class="row">
                                        <div class="row">
                                            <div class="col-6">Employee Name</div>
                                            <div class="col-1" s>:</div>
                                            <div class="col"><strong>@((SelectedDataItem as PayrollProfileView)?.EmployeeName ?? "")</strong></div>
                                        </div>
                                    </div>
                                </li>
                                <li class="list-group-item bg-transparent text-body py-1 border-0">
                                    <div class="row">
                                        <div class="row">
                                            <div class="col-6">Monthly Rate</div>
                                            <div class="col-1" s>:</div>
                                            <div class="col"><strong>@((SelectedDataItem as PayrollProfileView)?.MonthlyRate.Value.ToString("n2") ?? "0.00")</strong></div>
                                        </div>
                                    </div>
                                </li>

                                <li class="list-group-item bg-transparent text-body py-1 border-0">
                                    <div class="row">
                                        <div class="row">
                                            <div class="col-6">Half Month Rate</div>
                                            <div class="col-1" s>:</div>
                                            <div class="col"><strong>@((SelectedDataItem as PayrollProfileView)?.HalfMonthRate.Value.ToString("n2") ?? "0.00")</strong></div>
                                        </div>
                                    </div>
                                </li>

                                <li class="list-group-item bg-transparent text-body py-1 border-0">
                                    <div class="row">
                                        <div class="row">
                                            <div class="col-6">Daily Rate</div>
                                            <div class="col-1" s>:</div>
                                            <div class="col"><strong>@((SelectedDataItem as PayrollProfileView)?.DailyRate.Value.ToString("n2") ?? "0.00")</strong></div>
                                        </div>
                                    </div>
                                </li>

                                <li class="list-group-item bg-transparent text-body py-1 border-0">
                                    <div class="row">
                                        <div class="row">
                                            <div class="col-6">Hourly Rate</div>
                                            <div class="col-1" s>:</div>
                                            <div class="col"><strong>@((SelectedDataItem as PayrollProfileView)?.HourlyRate.Value.ToString("n2") ?? "0.00")</strong></div>
                                        </div>
                                    </div>
                                </li>

                                <li class="list-group-item bg-transparent text-body py-1 border-0">
                                    <div class="row">
                                        <div class="row">
                                            <div class="col-6">No. of Allowances</div>
                                            <div class="col-1" s>:</div>
                                            <div class="col"><strong>@((SelectedDataItem as PayrollProfileView)?.NumberOfAllowances.ToString() ?? "0")</strong></div>
                                        </div>
                                    </div>
                                </li>

                                <li class="list-group-item bg-transparent text-body py-1 border-0">
                                    <div class="row">
                                        <div class="row">
                                            <div class="col-6">No. of Loans</div>
                                            <div class="col-1" s>:</div>
                                            <div class="col"><strong>@((SelectedDataItem as PayrollProfileView)?.NumberOfLoans.ToString() ?? "0")</strong></div>
                                        </div>
                                    </div>
                                </li>

                                <li class="list-group-item bg-transparent text-body py-1 border-0">
                                    <div class="row">
                                        <div class="row">
                                            <div class="col-6">No. of Deductions</div>
                                            <div class="col-1" s>:</div>
                                            <div class="col"><strong>@((SelectedDataItem as PayrollProfileView)?.NumberOfDeductions.ToString() ?? "0")</strong></div>
                                        </div>
                                    </div>
                                </li>

                                <li class="list-group-item bg-transparent text-body py-1 border-0">
                                    <div class="row">
                                        <div class="row">
                                            <div class="col-6">GSIS Amount</div>
                                            <div class="col-1" s>:</div>
                                            <div class="col"><strong>@((SelectedDataItem as PayrollProfileView).GsisAmount.HasValue ? (SelectedDataItem as PayrollProfileView)?.GsisAmount.Value.ToString("n2") : "0.00")</strong></div>
                                        </div>
                                    </div>
                                </li>

                                <li class="list-group-item bg-transparent text-body py-1 border-0">
                                    <div class="row">
                                        <div class="row">
                                            <div class="col-6">HDMF Amount</div>
                                            <div class="col-1" s>:</div>
                                            <div class="col"><strong>@((SelectedDataItem as PayrollProfileView).HdmfAmount.HasValue ? (SelectedDataItem as PayrollProfileView)?.HdmfAmount.Value.ToString("n2") : "0.00")</strong></div>
                                        </div>
                                    </div>
                                </li>

                                <li class="list-group-item bg-transparent text-body py-1 border-0">
                                    <div class="row">
                                        <div class="row">
                                            <div class="col-6">PHILHEALTH Amount</div>
                                            <div class="col-1" s>:</div>
                                            <div class="col"><strong>@((SelectedDataItem as PayrollProfileView).PhilHealthAmount.HasValue ? (SelectedDataItem as PayrollProfileView)?.PhilHealthAmount.Value.ToString("n2") : "0.00")</strong></div>
                                        </div>
                                    </div>
                                </li>
                                <li class="list-group-item bg-transparent text-body py-1 border-0">
                                    <div class="row">
                                        <div class="row">
                                            <div class="col-6">SSS Amount</div>
                                            <div class="col-1" s>:</div>
                                            <div class="col"><strong>@((SelectedDataItem as PayrollProfileView).SssAmount.HasValue ? (SelectedDataItem as PayrollProfileView)?.SssAmount.Value.ToString("n2") : "0.00")</strong></div>
                                        </div>
                                    </div>
                                </li>
                                <li class="list-group-item bg-transparent text-body py-1 border-0">
                                    <div class="row">
                                        <div class="row">
                                            <div class="col-6">Withholding Tax Value</div>
                                            <div class="col-1" s>:</div>
                                            <div class="col"><strong>@((SelectedDataItem as PayrollProfileView)?.WithholdingTaxValue.Value.ToString("n2") ?? "0.00")</strong></div>
                                        </div>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    DataGridFilteringMode FilteringMode { get; set; } = DataGridFilteringMode.StartsWith;
    bool HideActions = true;
    IGrid? Grid { get; set; }
    IReadOnlyList<object> SelectedEmployees { get; set; }
    string userId { get; set; }
    string orgLevelname = "";
    int selectedOrgLevel { get; set; }
    bool plant = true;
    string selected = "Plantilla";
    IEnumerable<PayrollProfileView> empList { get; set; }
    List<string> IsPlantilla = new List<string>() { "Plantilla", "Non-Plantilla" };
    object SelectedDataItem { get; set; }
    public string department { get; set; } = "0";
    private List<SelectListItems> _highestLevel { get; set; } = new List<SelectListItems>();

    protected override async Task OnInitializedAsync()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        _highestLevel = await levelService.GetHighestLevel();
        selected = "Plantilla";
        empList = await service.GetAll(int.Parse(department), true);
        SelectedDataItem = empList.FirstOrDefault();

    }
    void Grid_CustomizeCellDisplayText(GridCustomizeCellDisplayTextEventArgs e)
    {
        //if (e.FieldName == "CategoryId")
        //{
        //    e.DisplayText = Categories.Where(c => c.CategoryId == (int)e.Value).FirstOrDefault().CategoryName;
        //}
    }
    //async Task GetOrgLevelModal()
    //{
    //    var parameters = new ModalParameters();
    //    parameters.Add(nameof(SharedLevelOrganization.IsPlantilla), true);

    //    var options = new ModalOptions()
    //        {
    //            DisableBackgroundCancel = true,
    //            Animation = ModalAnimation.FadeIn(0.2),
    //            ContentScrollable = true,
    //        };

    //    var moviesModal = Modal.Show<SharedLevelOrganization>("Organization Level", parameters, options);
    //    var result = await moviesModal.Result;

    //    if (!result.Cancelled)
    //    {
    //        selectedOrgLevel = result.Data != null ? int.Parse(result.Data.ToString()) : 0;

    //        var getLevel = await levelService.Get(selectedOrgLevel);
    //        orgLevelname = getLevel.Name;
    //        empList = await service.GetAll(selectedOrgLevel, plant);

    //        StateHasChanged();
    //    }

    //}
    void OnDeptSelect(string item)
    {
        department = item;
        GetData();
    }

    async void SelectedChanged(string newValue)
    {
        selected = newValue;
        GetData();

        StateHasChanged();
    }

    async void GetData()
    {
        try
        {
            var res = await plantillaService.PlantillaYear(userId);
            if (department == null)
            {
                department = "0";
            }

            if (selected == "Plantilla")
            {
                empList = await service.GetAll(int.Parse(department), true);
            }
            else
            {
                empList = await service.GetAll(int.Parse(department), false);
            }

            StateHasChanged();
        }
        catch (Exception e)
        {
            throw e;
        }
    }
    async Task ClickHandler(string action)
    {
        object emp;
        emp = SelectedDataItem;

        if (emp == null)
        {
            await Swal.FireAsync("Oops!", "Select employee.", "warning");
        }

        if (action == "Update")
        {
            SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Are you sure?",
                    Text = "You are about to update this payroll profile.",
                    Icon = "warning",
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes, I am sure!",
                    CancelButtonText = "Cancel",
                    CancelButtonColor = "#dc3741"

                });
            if (!string.IsNullOrEmpty(result.Value))
            {

                var options = new ModalOptions()
                    {
                        DisableBackgroundCancel = true,
                        ContentScrollable = true,
                    };
                var parameters = new ModalParameters();
                parameters.Add(nameof(PayrollProfileModal.selectedEmployeeFromList), emp);
                var _modalStatus = Modal.Show<PayrollProfileModal>("Update Payroll Profile", parameters, options);
                var modalResult = await _modalStatus.Result;
                if (modalResult.Cancelled == false)
                {
                    this.StateHasChanged();
                    UpdateDataAsync();
                }
            }
        }

        if (action == "Clear")
        {
            SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Are you sure?",
                    Text = "Do you really want to clear values in this payroll profile?",
                    Icon = "warning",
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes, I am sure!",
                    CancelButtonText = "Cancel",
                    CancelButtonColor = "#dc3741"

                });

            if (!string.IsNullOrEmpty(result.Value))
            {

                var user = (await _AutService.GetAuthenticationStateAsync()).User;
                userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

                PayrollProfileView selected = new PayrollProfileView
                    {
                        EmployeeId = (emp as PayrollProfileView).EmployeeId,
                        UserId = userId
                    };

                var res = await service.ClearPayrollProfile(selected);

                if (res.StatusCode == 200)
                    await _Swal.FireAsync("Success", res.Value, "success");
                StateHasChanged();
                UpdateDataAsync();
            }
            else
            {
                await _Swal.FireAsync("Oops...", "Something went wrong!", "error");
            }
        }
        this.StateHasChanged();

    }
    void OnClickColumnChooser()
    {
        Grid.ShowColumnChooser(".column-chooser-button");
    }
    async Task UpdateDataAsync()
    {
        GetData();
    }

}
