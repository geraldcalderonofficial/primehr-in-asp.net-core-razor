@page "/placement-reappointment";  
@inject SweetAlertService Swal;
@using HRMSv4.Client.Shared.Modals;
@inject IPlacement service
@using DevExpress.Blazor

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
               Re-appointments
            </h3>
        </div>
        <div class="page-title-actions">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Re-appointments</li>
                </ol>
            </nav>
        </div>
    </div>
</div>

<div class="main-card mb-3 card">
    <div class="card-body">
        <div class="row">
             <div class="mb-3 col-xl-2 col-sm-12">
                <div class="row">
                    <label class="" for="exampleEmail55">Status: </label>
                    <DxComboBox CssClass="float-end w-150" Data="@filters" Value="selectedType" SizeMode="SizeMode.Medium"
                                ValueChanged="@((string fil) => Filter(fil))" />
                </div>

            </div>
        </div>
    </div>
</div>
<div class="main-card mb-3 card">
    <div class="card-header">
        <div class="col-12 mt-2">
            <h5 class="card-header-text float-start">Reappointment</h5>
        </div>
    </div>
    <div class="card-body">
        <DxGrid Data="@Employees" PageSize="10"
                ShowFilterRow="true"
                PagerPosition="GridPagerPosition.Bottom"
                PageSizeSelectorVisible="true"
                PageSizeSelectorItems="@(new int[] { 5, 10, 20, 100 })"
                PageSizeSelectorAllRowsItemVisible="true"
                PagerSwitchToInputBoxButtonCount="10"
                PagerVisibleNumericButtonCount="10">

            <Columns>
                <DxGridDataColumn FieldName="Status" />
                <DxGridDataColumn FieldName="ImageName" Caption="Image" Width="90px">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as ReappointmentEmployeeListView);
                        }
                        @if (!string.IsNullOrWhiteSpace(temp.ImageName))
                        {
                            if (temp.ImageName == "default-avatar-grey.png")
                            {
                                <div class="avatar-icon-wrapper mb-3 avatar-icon-xl">
                                    <div class="avatar-icon">
                                        <img src="images/avatars/default-avatar-grey.png">
                                    </div>
                                </div>
                            }
                            else
                            {

                                <a href="javascript:void(0);" @onclick="@(e => ShowImage("Uploads/Employees/Avatar/" + temp.EmployeeId + "/" + temp.ImageName))">
                                    <div class="avatar-icon-wrapper mb-3 avatar-icon-xl">
                                        <div class="avatar-icon">
                                            <img src="Uploads/Employees/Avatar/@temp.EmployeeId/@temp.ImageName">
                                        </div>
                                    </div>
                                </a>
                            }
                        }
                        else
                        {
                            <div class="avatar-icon-wrapper mb-3 avatar-icon-xl">
                                <div class="avatar-icon">
                                    <img src="images/avatars/default-avatar-grey.png">
                                </div>
                            </div>
                        }
                    </CellDisplayTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="FullName" Caption="Full Name"/>
                <DxGridDataColumn FieldName="NewPositi on"/>
                <DxGridDataColumn FieldName="NewOrganizationalLevel" />
                <DxGridDataColumn FieldName="EmploymentStatus" />
                <DxGridDataColumn FieldName="EffectivityDate" />
                <DxGridDataColumn FieldName="DateEncoded" />
                <DxGridDataColumn FieldName="ApprovedDeclined" Caption="Approved/Declined By" />
                <DxGridDataColumn FieldName="" Caption="Action" AllowSort="false" Width="90px" MinWidth="100" TextAlignment="GridTextAlignment.Center">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as ReappointmentEmployeeListView);
                        }
                       <button class="border-0 btn-transition btn btn-outline-success" data-bs-toggle="tooltip" data-bs-placement="top" title="" data-bs-original-title="Approve" @onclick="@(asd => Approve(temp))">
                            <i class="fa fa-check"></i>
                        </button>
                        <button class="border-0 btn-transition btn btn-outline-danger" data-bs-toggle="tooltip" data-bs-placement="top" title="" data-bs-original-title="Disapprove" @onclick="@(asd => Disapprove(temp))">
                            <i class="lnr-thumbs-down"></i>
                        </button>
                    </CellDisplayTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
    </div>
    @*<RadzenDataGrid Responsive=true @ref="reappointGrid" AllowFiltering="true" AllowPaging="true" PageSize="20" AllowSorting="true"
                    Data="@reappointEmployees" TItem="HRMSv4.Shared.OnBoarding.ReappointmentEmployeeListView" SelectionMode="DataGridSelectionMode.Single"
                    ColumnWidth="300px" PagerAlwaysVisible="true" ShowPagingSummary="true" PagerHorizontalAlign="HorizontalAlign.Center"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.SimpleWithMenu">
        <Columns>
            <RadzenDataGridColumn TItem="ReappointmentEmployeeListView" Property="Status" Title="Status" Frozen="true" Width="80px" />
            <RadzenDataGridColumn TItem="ReappointmentEmployeeListView" Title="Photo" Frozen="true" Sortable="false" Filterable="false" Width="60px">
                <Template Context="employee">
                    @if (string.IsNullOrWhiteSpace(employee.ImageName))
                    {
                        <RadzenImage Path="/MainLayout/images/avatars/default-avatar.png" style="width: 40px; height: 40px; border-radius: 8px;" />
                    }
                    else
                    {
                        <RadzenImage Path=@(@apiURL + "Uploads/Employees/Avatar/" + employee.EmployeeId + "/" + employee.ImageName) style="width: 40px; height: 40px; border-radius: 8px;" />
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ReappointmentEmployeeListView" Property="FullName" Title="Full Name" Width="140px" />
            <RadzenDataGridColumn TItem="ReappointmentEmployeeListView" Property="NewPosition" Title="Position" Width="140px" />
            <RadzenDataGridColumn TItem="ReappointmentEmployeeListView" Property="NewOrganizationalLevel" Title="Organizational Level" Width="140px" />
            <RadzenDataGridColumn TItem="ReappointmentEmployeeListView" Property="EmploymentStatus" Title="Employment Status" Width="140px" />
            <RadzenDataGridColumn TItem="ReappointmentEmployeeListView" Property="EffectivityDate" Title="Effectivity Date" Frozen="true" Width="140px" />
            <RadzenDataGridColumn TItem="ReappointmentEmployeeListView" Property="DateEncoded" Title="Date Encoded" Width="140px" />
            <RadzenDataGridColumn TItem="ReappointmentEmployeeListView" Property="ApprovedDeclined" Title="Approved/Declined By" Width="140px" />
            <!-- Action Buttons -->
            <RadzenDataGridColumn TItem="ReappointmentEmployeeListView" Context="category" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px">
                <Template Context="pam">
                    @if (pam.Status != "Approved" && pam.Status != "Disapproved")
                    {
                        <button class="border-0 btn-transition btn btn-outline-success" data-bs-toggle="tooltip" data-bs-placement="top" title="" data-bs-original-title="Approve" @onclick="@(asd => Approve(pam))">
                            <i class="fa fa-check"></i>
                        </button>
                        <button class="border-0 btn-transition btn btn-outline-danger" data-bs-toggle="tooltip" data-bs-placement="top" title="" data-bs-original-title="Disapprove" @onclick="@(asd => Disapprove(pam))">
                            <i class="fa fa-trash-alt"></i>
                        </button>
                    }
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>*@
</div>
@code {
        IEnumerable<HRMSv4.Shared.OnBoarding.ReappointmentEmployeeListView> reappointEmployees;
        //RadzenDataGrid<HRMSv4.Shared.OnBoarding.ReappointmentEmployeeListView> reappointGrid;
        [CascadingParameter] public IModalService Modal { get; set; }
        [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    public string? apiURL { get; set; }

    List<string> filters = new List<string> { "All", "Pending", "Approved", "Disapproved" };
    string selectedType { get; set; } = "Pending";
    string userId = "";

    object Employees { get; set; }
    GridDevExtremeDataSource<ReappointmentEmployeeListView> gridDevExtremeDataSource;

    protected override async Task OnInitializedAsync()
    {
        apiURL = AppInfo.ApiUrl;
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        await UpdateDataAsync();
    }

    async Task UpdateDataAsync()
    {
        reappointEmployees = await service.GetReappointedEmployeesAll("Pending");

        var tempList = reappointEmployees.AsQueryable();

        gridDevExtremeDataSource = new GridDevExtremeDataSource<ReappointmentEmployeeListView>(tempList);
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            loadOptions.PrimaryKey = new[] { "PersonnelActionMemoId" };
            loadOptions.PaginateViaPrimaryKey = true;

        };

        Employees = gridDevExtremeDataSource;

        StateHasChanged();
    }

    async Task Filter(string e)
    {
        string a = e;
        selectedType = a;
        await UpdateDataAsync();
        this.StateHasChanged();
    }

    async void ShowImage(string img)
    {
        await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Employee Capture Image",
                ImageUrl = img,
                ImageHeight = 600,
                ImageWidth = 400
            });
    }

    async void Approve(ReappointmentEmployeeListView pam)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You are about to approve this reappointment.",
                Icon = "question",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ApproveReappointmentModal.pamId), pam.PersonnelActionMemoId);
            parameters.Add(nameof(ApproveReappointmentModal.orgLevelId), pam.OrganizationalLevelId);
            var _modalStatus = Modal.Show<ApproveReappointmentModal>("Reappointment", parameters);
            var modalResult = await _modalStatus.Result;
            if (modalResult.Cancelled == false)
            {
                await UpdateDataAsync();
                this.StateHasChanged();
            }
        }
    }

    async void Disapprove(ReappointmentEmployeeListView pam)
    {

        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You are about to disapprove this reappointment.",
                Icon = "question",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            var user = (await _AutService.GetAuthenticationStateAsync()).User;
            var userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

          
             var res = await service.Disapprove(pam.PersonnelActionMemoId, userId);

            if (res.StatusCode == 200)
            {

                SweetAlertResult result1 = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Success",
                        Text = "You have successfully disapprove a reappointment.",
                        Icon = "success",
                        ShowCancelButton = true,
                        ConfirmButtonText = "Ok",
                    });
                if (!string.IsNullOrEmpty(result.Value))
                {
                    await UpdateDataAsync();
                    this.StateHasChanged();

                    ModalInstance.CloseAsync();
                }
            }
            else
            {
                await Swal.FireAsync("Oops...", "Unable to disapprove this record!", "error");
            }
        }
        else
        {

        }
    }
}
