@page "/placement-reclassification"
@inject IReclassification service
@using DevExpress.Blazor
@using HRMSv4.Shared.Selection
@inject SweetAlertService Swal;

<style>
    .container-center {
        width: 50%;
        height: auto;
        margin: 0 auto;
        padding: 10px;
        position: relative;
    }

    .button-center {
        width: 10%;
        height: auto;
        margin: 0 auto;
        padding: 10px;
        position: relative;
    }

    .cancel-btn-properties {
        background-color: #616161;
        color: white;
        margin-right: 2px
    }
</style>

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Re-classification
            </h3>
        </div>
        <div class="page-title-actions">

            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Re-classification</li>
                </ol>
            </nav>
        </div>
    </div>
</div>
<div class="main-card mb-2 card container-center">
    <div class="card-body">
        <div class="row">
            <div class="col-md-6 col-sm-12">
                <h5 class="card-title">From</h5>
                <div class="position-relative mb-3">
                    <label for="exampleEmail" class="form-label">From Position</label>
                    <DxComboBox NullText="Select a position..." SizeMode="SizeMode.Medium"
                                Data="@plantillaPositions"
                                TextFieldName="@nameof(Position.PositionTitle)"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                FilteringMode="DataGridFilteringMode.Contains"
                                ValueChanged="@((Position p) => FromPositionChange(p))"
                                CssClass="cw-480" /> @* *@
                </div>
                <div class="position-relative mb-3">
                    <label for="examplePassword" class="form-label">Salary Grade</label> <br />
                    <label for="examplePassword" class="form-label">@SalaryGradeNumber</label>
                </div>
                <div class="position-relative mb-3">
                    <label for="exampleSelect" class="form-label">Select Included</label>
                    <DxComboBox NullText="Select..." SizeMode="SizeMode.Medium"
                                Data="@selection"
                                @bind-Value="@selectedIncluded"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"
                                CssClass="cw-480" />
                </div>
            </div>
            <div class="col-md-6 col-sm-12">
                <h5 class="card-title">To</h5>
                <div class="position-relative mb-3">
                    <label for="exampleEmail" class="form-label">To Position</label>
                    <DxComboBox NullText="Select a position..." SizeMode="SizeMode.Medium"
                                Data="@allPositions"
                                @bind-Value="@selectedToPosition"
                                TextFieldName="@nameof(Position.PositionTitle)"
                                FilteringMode="DataGridFilteringMode.Contains"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"
                                CssClass="cw-480" /> @* *@
                </div>
                <div class="position-relative mb-3">
                    <label for="examplePassword" class="form-label">Salary Grade</label> <br />
                    <DxComboBox NullText="Select..."
                                Data="@SalaryGrades" SizeMode="SizeMode.Medium"
                                @bind-Value="@selectedSalaryGrade"
                                FilteringMode="DataGridFilteringMode.Contains"
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"
                                CssClass="cw-480" />
                </div>
                <div class="position-relative mb-3">
                    <label for="exampleSelect" class="form-label">Effectivity Date</label>
                    <DxDateEdit @bind-Date="@DateTimeValue" SizeMode="SizeMode.Medium"
                                MinDate="@DateTimeValue"
                                PickerDisplayMode="DatePickerDisplayMode.ScrollPicker"
                                ScrollPickerFormat="MMMM dd yyyy"
                                DisplayFormat="MMMM dd yyyy"
                                CssClass="cw-320" />
                </div>
            </div>
        </div>
    </div>
</div>
<div class="main-card mb-3 card container-center">
    <div class="card-body">
        <DxGrid Data="@rcListOnlyEmployees"
                KeyFieldName="EmployeeId"
                SelectionMode="GridSelectionMode.Multiple"
                AllowSelectRowByClick="true"
                @bind-SelectedDataItems="@selectedRcList"
                CustomizeCellDisplayText="Grid_CustomizeCellDisplayText">
            <Columns>
                <DxGridDataColumn FieldName="EmployeeNumber" />
                <DxGridDataColumn FieldName="FullName" />
                <DxGridDataColumn FieldName="OrganizationalLevel" />
            </Columns>
        </DxGrid>
    </div>
</div>
<div class="mt-2 container-center">
    <div class="row float-center">
        <button class="btn btn-default col cancel-btn-properties">Cancel</button>
        <button class="btn btn-primary col" @onclick="() => Save()" style="margin-left:2px;">Save</button>
    </div>
</div>
@code {
    List<Position> plantillaPositions = new List<Position>();
    List<Position> allPositions = new List<Position>();
    Position selectedFromPosition { get; set; }
    Position selectedToPosition { get; set; }
    DateTime DateTimeValue { get; set; }
    List<string> selection = new List<string>();
    string selectedIncluded { get; set; } = "All Plantilla Items";
    string selectedSalaryGrade { get; set; } = "1";

    List<ReclassificationListView> rcList = new List<ReclassificationListView>();
    List<ReclassificationListView> rcListOnlyEmployees = new List<ReclassificationListView>();
    IReadOnlyList<object> selectedRcList { get; set; }
    List<string> SalaryGrades = new List<string>();

    int SalaryGradeId { get; set; } = 0;
    string SalaryGradeNumber { get; set; } = "";

    string userId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        plantillaPositions = await service.GetPlantillaPosition();
        allPositions = await service.GetAllPosition();
        DateTimeValue = await service.GetEffectivityDate();

        //add selection
        selection.Add("All Plantilla Items");
        selection.Add("Occupied Items");
        selection.Add("Specific Employees");

        for (int i = 1; i <= 30; i++)
        {
            SalaryGrades.Add(i.ToString());
        }

        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

    }

    async void FromPositionChange(Position p)
    {
        if (p != null)
        {
            selectedFromPosition = p;
            rcList = await service.GetEmployeesReclassify(p.PositionId);
            rcListOnlyEmployees = rcList.Where(a => a.EmployeeId != 0).ToList();
            SalaryGradeId = rcList.FirstOrDefault().SalaryGradeId;
            SalaryGradeNumber = rcList.FirstOrDefault().SalaryGradeNumber.ToString();
            StateHasChanged();
        }
        else
        {
            selectedFromPosition = new Position();
            rcList = new List<ReclassificationListView>();
            rcListOnlyEmployees = new List<ReclassificationListView>();
            SalaryGradeId = 0;
            SalaryGradeNumber = string.Empty;
        }
       
    }

    async void Save()
    {
        if (selectedFromPosition == null)
        {
            await _Swal.FireAsync("Oops...", "Please select from what position", "error");
            return;
        }

        if (selectedToPosition == null)
        {
            await _Swal.FireAsync("Oops...", "Please select to what position", "error");
            return;
        }

        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You are about to reclassify a position.",
                Icon = "question",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });
        if (!string.IsNullOrEmpty(result.Value))
        {
            ReclassificationDetail detail = new ReclassificationDetail();
            detail.FromPositionId = selectedFromPosition.PositionId;
            detail.Included = selectedIncluded;
            detail.ToPositionId = selectedToPosition.PositionId;
            detail.FromSalaryGradeId = SalaryGradeId;
            detail.FromSalaryGrade = SalaryGradeNumber;
            detail.SalaryGradeNumber = selectedSalaryGrade;
            detail.EffectivityDate = DateTimeValue;


            detail.UserId = userId;

            if (selectedIncluded == "All Plantilla Items")
            {
                detail.reclassificationListViews = rcList;
                detail.ServiceRecordId = rcList.FirstOrDefault().ServiceRecordId;
                detail.HistoryEntryId = rcList.FirstOrDefault().HistoryEntryId;
            }
            else if (selectedIncluded == "Specific Employees")
            {
                var list = (List<ReclassificationListView>)selectedRcList;

                if(list.Count() == 0){
                    await _Swal.FireAsync("Oops...", "Please select employees to reclassify", "warning");
                    return;
                }

                detail.reclassificationListViews = list;
                detail.ServiceRecordId = list.FirstOrDefault().ServiceRecordId;
                detail.HistoryEntryId = list.FirstOrDefault().HistoryEntryId;
            }
            else if (selectedIncluded == "Occupied Items")
            {
                detail.reclassificationListViews = rcListOnlyEmployees;
                detail.ServiceRecordId = rcListOnlyEmployees.FirstOrDefault().ServiceRecordId;
                detail.HistoryEntryId = rcList.FirstOrDefault().HistoryEntryId;
            }


            var res = await service.PostReclassification(detail);
            if(res.StatusCode == 200)
            {
                selectedIncluded = "All Plantilla Items";
                selectedSalaryGrade = "1";
                rcList = new List<ReclassificationListView>();
                rcListOnlyEmployees = new List<ReclassificationListView>();
                selectedRcList = null;
                selectedSalaryGrade = "1";
                plantillaPositions = new List<Position>();
                plantillaPositions = await service.GetPlantillaPosition();
                selectedToPosition = null;
                DateTimeValue = await service.GetEffectivityDate();
                SalaryGradeNumber = "";
                StateHasChanged();

                await Swal.FireAsync("Success!", res.Value, "success");
            }

        }
        
    }

    void Grid_CustomizeCellDisplayText(GridCustomizeCellDisplayTextEventArgs e)
    {

    }
}
