@page "/placement-separation"
@inject SweetAlertService Swal;
@using HRMSv4.Client.Shared.Modals;
@using HRMSv4.Shared.DbViews
@using HRMSv4.Shared.Misc
@inject IPlacement service
@using System.Linq.Dynamic.Core
@using DevExpress.Blazor

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Separation
            </h3>
        </div>
        <div class="page-title-actions">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Separation</li>
                </ol>
            </nav>
        </div>
    </div>
</div>
<div class="main-card mb-3 card">
    <div class="card-body">
        <div class="row">
            <div class="mb-3 col-xl-2 col-sm-12">
                <div class="row">
                    <label class="" for="exampleEmail55">Status: </label>
                    <DxComboBox CssClass="float-end w-150" Data="@filters" Value="selectedType" SizeMode="SizeMode.Medium"
                                ValueChanged="@((string fil) => Filter(fil))" />
                </div>

            </div>
        </div>
    </div>
</div>
<div class="main-card mb-3 card">
    <div class="card-header">
        <div class="col-12 mt-2">
            <h5 class="card-header-text float-start">Separation</h5>

        </div>
    </div>
   
     <div class="card-body">
        <DxGrid Data="@Employees" PageSize="10"
                ShowFilterRow="true"
                PagerPosition="GridPagerPosition.Bottom"
                PageSizeSelectorVisible="true"
                PageSizeSelectorItems="@(new int[] { 5, 10, 20, 100 })"
                PageSizeSelectorAllRowsItemVisible="true"
                PagerSwitchToInputBoxButtonCount="10"
                PagerVisibleNumericButtonCount="10">

            <Columns>
                <DxGridDataColumn FieldName="Status" />
                <DxGridDataColumn FieldName="ImageName" Caption="Image" Width="90px">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as EmpSeparationList);
                        }
                        @if (!string.IsNullOrWhiteSpace(temp.ImageName))
                        {
                            if (temp.ImageName == "default-avatar-grey.png")
                            {
                                <div class="avatar-icon-wrapper mb-3 avatar-icon-xl">
                                    <div class="avatar-icon">
                                        <img src="images/avatars/default-avatar-grey.png">
                                    </div>
                                </div>
                            }
                            else
                            {

                                <a href="javascript:void(0);" @onclick="@(e => ShowImage("Uploads/Employees/Avatar/" + temp.EmployeeId + "/" + temp.ImageName))">
                                    <div class="avatar-icon-wrapper mb-3 avatar-icon-xl">
                                        <div class="avatar-icon">
                                            <img src="Uploads/Employees/Avatar/@temp.EmployeeId/@temp.ImageName">
                                        </div>
                                    </div>
                                </a>
                            }
                        }
                        else
                        {
                            <div class="avatar-icon-wrapper mb-3 avatar-icon-xl">
                                <div class="avatar-icon">
                                    <img src="images/avatars/default-avatar-grey.png">
                                </div>
                            </div>
                        }
                    </CellDisplayTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="fullname" Caption="Full Name" />
                <DxGridDataColumn FieldName="positiontitle" />
                <DxGridDataColumn FieldName="salaryrate" />
                <DxGridDataColumn FieldName="EmploymentStatusName" />
                <DxGridDataColumn FieldName="EffectivityDate" />
                <DxGridDataColumn FieldName="SeparationType" />
                <DxGridDataColumn FieldName="UserName" Caption="Approved/Declined By" />
                <DxGridDataColumn FieldName="" Caption="Action" AllowSort="false" Width="90px" MinWidth="100" TextAlignment="GridTextAlignment.Center">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as EmpSeparationList);
                        }
                        @if(temp.Status != "Approved" && temp.Status != "Disapproved")
                        {
                            <button class="border-0 btn-transition btn btn-outline-success" data-bs-toggle="tooltip" data-bs-placement="top" title="" data-bs-original-title="Approve" @onclick="@(asd => Approve(temp))">
                                <i class="fa fa-check"></i>
                            </button>
                            <button class="border-0 btn-transition btn btn-outline-danger" data-bs-toggle="tooltip" data-bs-placement="top" title="" data-bs-original-title="Disapprove" @onclick="@(asd => Disapprove(temp))">
                                <i class="lnr-thumbs-down"></i>
                            </button>
                        }

                       
                    </CellDisplayTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    IEnumerable<HRMSv4.Shared.DbViews.EmpSeparationList> _sepEmployees;
    RadzenDataGrid<HRMSv4.Shared.DbViews.EmpSeparationList>? sepGrid;

    public string? apiURL { get; set; }
    private string? selectedString { get; set; }

    bool isLoading;
    int count;

    List<string> filters = new List<string> { "All", "Pending", "Approved", "Disapproved" };
    string selectedType { get; set; } = "Pending";
    string userId = "";

    object Employees { get; set; }
    GridDevExtremeDataSource<EmpSeparationList> gridDevExtremeDataSource;

    protected override async Task OnInitializedAsync()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        await UpdateDataAsync();
    }

    async Task UpdateDataAsync()
    {
        _sepEmployees = await service.GetSeparationEmployees(selectedType);

        var tempList = _sepEmployees.AsQueryable();

        gridDevExtremeDataSource = new GridDevExtremeDataSource<EmpSeparationList>(tempList);
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            loadOptions.PrimaryKey = new[] { "PersonnelActionMemoId" };
            loadOptions.PaginateViaPrimaryKey = true;

        };

        Employees = gridDevExtremeDataSource;

        StateHasChanged();
    }

    async void ShowImage(string img)
    {
        await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Employee Capture Image",
                ImageUrl = img,
                ImageHeight = 600,
                ImageWidth = 400
            });
    }

    async Task Filter(string e)
    {
        string a = e;
        selectedType = a;

        await UpdateDataAsync();
        this.StateHasChanged();
    }

    async Task Approve(EmpSeparationList sep)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm",
                Text = "Confirming you want to approve " + sep.SeparationType + " employee request.",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "No",
                CancelButtonColor = "#414141",
            });

        if (result.IsConfirmed)
        {

            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    Animation = ModalAnimation.FadeIn(0.2),
                    ContentScrollable = true,
                };

            var parameters = new ModalParameters();
            parameters.Add(nameof(SeparationStatusRequest.es), sep);
            var formModal = Modal.Show<SeparationStatusRequest>("Approved", parameters, options);
            var modalResult = await formModal.Result;

            if (!modalResult.Cancelled)
            {
                //_sepEmployees = await service.GetSeparationEmployees(selectedString);
                await UpdateDataAsync();
                StateHasChanged();
            }
        }
    }

    async Task Disapprove(EmpSeparationList sep)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm",
                Text = "Confirming you want to decline " + sep.SeparationType + " employee request.",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "No",
                CancelButtonColor = "#414141",
            });

        if (result.IsConfirmed)
        {

            var user = (await _AutService.GetAuthenticationStateAsync()).User;
            string userId = user.FindFirst(c => c.Type.Contains("nameidentifier")).Value;

            if (string.IsNullOrWhiteSpace(sep.UserName))
            {
                sep.UserName = string.Empty;
            }

            sep.UpdatedBy = userId;
            Response res = await service.Disapprove(sep.PersonnelActionMemoId, sep.UpdatedBy);
            if (res.StatusCode == 200)
            {
                await _Swal.FireAsync("Success", "Employee request was declined!", "success");
                await UpdateDataAsync();
                StateHasChanged();
            }
            else
            {
                await _Swal.FireAsync("Oops!", "Something went wrong.", "error");
            }
        }
    }
}
