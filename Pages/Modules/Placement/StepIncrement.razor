@page "/placement-stepincrement"
@using DevExpress.Blazor
@using HRMSv4.Client.Shared.Modals.Placement
@inject IPlacement service


@if (HideApproval)
{
    <HRMSv4.Client.Shared.MainComponents.Fab OnClick="ClickHandler" ApprovalMode="true"></HRMSv4.Client.Shared.MainComponents.Fab>
}

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Step Increment
            </h3>
        </div>
        <div class="page-title-actions">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Step Increment</li>
                </ol>
            </nav>
        </div>
    </div>
</div>

<div class="main-card mb-3 card">
    <div class="card-body">
        <div class="row col-sm-12">
            <div class="row">
                <div class="mb-3 col-xl-2 col-sm-12">
                    <div class="row">
                        <label class="" for="exampleEmail55">Status: </label>
                        <DxComboBox Data="@statusList" @bind-Text="@selectedStatus" SizeMode="SizeMode.Medium" ValueChanged="@((string e) => OnChangedStatus(e))" />
                    </div>

                </div>
            </div>
        </div>
        <div class="row col-12">
            <div class="col-12 mt-2">
                <h5 class="card-header-text float-start">Requests for Step Increment</h5>
                <DxGrid Data="@list" AutoExpandAllGroupRows="true"
                        PopupEditFormCssClass="pw-800"
                        SelectionMode="GridSelectionMode.Multiple"
                        AllowSelectRowByClick="true"
                        PageSize="50" PagerPosition="GridPagerPosition.TopAndBottom"
                        PagerVisibleNumericButtonCount="50"
                        @bind-SelectedDataItems="@SelectedDataItems">
                    <Columns>
                        <DxGridDataColumn FieldName="Status" />
                        <DxGridDataColumn FieldName="FullName" />
                        <DxGridDataColumn FieldName="PositionTitle" />
                        <DxGridDataColumn FieldName="FromStep" />
                        <DxGridDataColumn FieldName="FromSalary" />
                        <DxGridDataColumn FieldName="NewStep" />
                        <DxGridDataColumn FieldName="NewSalary" />
                        <DxGridDataColumn FieldName="EffectivityDate" />
                        <DxGridDataColumn FieldName="Encoder" />
                        <DxGridDataColumn FieldName="DateEncoded" />
                        <DxGridDataColumn FieldName="OrganizationalLevel" />
                        @* <DxGridDataColumn TextAlignment="DevExpress.Blazor.GridTextAlignment.Center" FieldName="" Width="100px">
                        <CellDisplayTemplate>
                        @{
                        var temp = (context.DataItem as PamStepIncrementListView);
                        }
                        <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="top" title="Approve" @onclick="@(() => Approve(temp))">
                        <i class="lnr-thumbs-up"></i>
                        </button>
                        <button class="border-0 btn-transition btn btn-outline-primary" data-toggle="tooltip" data-placement="top" title="Disapprove" @onclick="@(() => Disapprove(temp))">
                        <i class="lnr-thumbs-down"></i>
                        </button>
                        </CellDisplayTemplate>
                        </DxGridDataColumn>*@
                    </Columns>
                </DxGrid>
            </div>
        </div>
    </div>
</div>

@code {

    List<string> statusList = new List<string> { "All Records", "Pending", "Approved", "Disapproved" };
    string selectedStatus { get; set; }

    List<PamStepIncrementListView> list = new List<PamStepIncrementListView>();
    IReadOnlyList<object> SelectedDataItems { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    public string? apiURL { get; set; }
    string userId = "";

    bool HideApproval = true;

    protected override async Task OnInitializedAsync()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        list = await service.GetStepIncrement("Pending");

        if (list.Count() == 0)
        {
            HideApproval = false;
        }

        selectedStatus = "Pending";
        StateHasChanged();
    }

    async void OnChangedStatus(string value)
    {

        list = await service.GetStepIncrement(value);
        StateHasChanged();
    }

    async Task SelectedNewEmployee(PamStepIncrementListView selectedRow)
    {
        apiURL = AppInfo.ApiUrl;

    }

    async Task Filter(ChangeEventArgs e)
    {
        string a = e.Value.ToString();

    }

    async Task ClickHandler(string action)
    {
        var selected = SelectedDataItems.Cast<PamStepIncrementListView>().ToList();

        if (selected == null || selected.Count == 0)
        {
            return;
        }

        if (action == "Approve")
        {
            SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirm",
                    Text = "Confirming you want to approve this step increment request.",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes",
                    CancelButtonText = "No",
                    CancelButtonColor = "#414141",
                });
            if (result.IsConfirmed)
            {
                var options = new ModalOptions()
                    {
                        DisableBackgroundCancel = true,
                        //Animation = ModalAnimation.FadeIn(0.2),
                        ContentScrollable = true,
                    };

                var parameters = new ModalParameters();
                parameters.Add(nameof(StepIncrementApprovalModal.stepInc), selected);
                var formModal = Modal.Show<StepIncrementApprovalModal>("Approved", parameters, options);
                var modalResult = await formModal.Result;

                if (!modalResult.Cancelled)
                {
                    list = await service.GetStepIncrement("Pending");
                    StateHasChanged();
                }
            }


        }
        else if (action == "Decline")
        {
            if (selected.Count() > 0)
            {
                SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Are you sure?",
                        Text = "You are about to disapprove this step increment.",
                        Icon = "question",
                        ShowCancelButton = true,
                        ConfirmButtonText = "Yes",
                        CancelButtonText = "Cancel",
                        CancelButtonColor = "#dc3741"

                    });

                if (!string.IsNullOrEmpty(result.Value))
                {
                    var user = (await _AutService.GetAuthenticationStateAsync()).User;
                    var userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

                    List<int> todelete = selected.Select(a => a.PersonnelActionMemoId).ToList();

                    var response = await service.DisapproveAll(todelete, userId);
                    if (response.StatusCode == 200)
                    {
                        await _Swal.FireAsync("Success", "Request declined", "success");
                        list = await service.GetStepIncrement("Pending");
                        StateHasChanged();
                    }
                    else
                    {
                        await _Swal.FireAsync("Error", response.Value, "error");
                    }

                }
            }

        }
    }

}
