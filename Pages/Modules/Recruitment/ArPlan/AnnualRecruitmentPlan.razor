@page "/annualrecruitmentplan"
@inject IRecruitmentPlan service
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using System.Linq.Dynamic.Core
@using DevExpress.Blazor
@using System
@using System.Web
@using HRMSv4.Client.Shared.Modals.RecruitmentModals

<HRMSv4.Client.Shared.MainComponents.Breadcrumbs HeaderText="Annual Recruitment Plan" Text="Annual Recruitment Plan" Path="/module/annualrecruitmentplan" />
<div class="main-card mb-3 card">
    <div class="card-body">
        <div class="row">
            <div class="col-lg-12" align="right">
                <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" onclick="@NewRecruitmentPlan" style="margin-bottom: 10px; width:200px"> New Recruitment Plan </button>
            </div>
        </div>
        <DxGrid Data="plans" AutoCollapseDetailRow="AutoCollapseDetailRow">
            <Columns>
                <DxGridDataColumn FieldName="Year" TextAlignment="GridTextAlignment.Center" />
                <DxGridDataColumn FieldName="VacantPositionsCount" Caption="Vacant Positions" />
                <DxGridDataColumn FieldName="ApproachesCount" Caption="Approaches" />
                <DxGridDataColumn FieldName="RecruitmentPlanId" Caption="Action" AllowSort="false" Width="90px" MinWidth="100" TextAlignment="GridTextAlignment.Center">
                    <CellDisplayTemplate>
                        <button class="border-0 btn-transition btn btn-outline-warning" data-toggle="tooltip" data-placement="left" title="View" @onclick="() => Details((int)context.Value)"><i class="lnr-eye"></i></button>
                        <button class="border-0 btn-transition btn btn-outline-primary" data-toggle="tooltip" data-placement="left" title="Print" @onclick="() => PrintEvaluation((int)context.Value)"><i class="lnr-printer"></i></button>
                    </CellDisplayTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
    </div>
</div>

@code {
    IGrid Grid { get; set; }
    List<RecruitmentPlanListView> plans = new List<RecruitmentPlanListView>();
    [CascadingParameter] public IModalService Modal { get; set; }
    bool AutoCollapseDetailRow { get; set; }
    string userId = "";
    protected override async Task OnInitializedAsync()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        plans = await service.GetRecruitmentPlans();
    }

    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        Grid.ExpandDetailRow(0);
    //    }
    //}

    void AutoCollapseDetailRow_Changed(bool newValue)
    {
        AutoCollapseDetailRow = newValue;
        if (newValue)
        {
            Grid.BeginUpdate();
            Grid.CollapseAllDetailRows();
            Grid.ExpandDetailRow(0);
            Grid.EndUpdate();
        }
    }

    async Task NewRecruitmentPlan()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };

        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.RecruitmentModals.RecruitmentPlanModal>("New Recruitment Plan", options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            plans = await service.GetRecruitmentPlans();
            StateHasChanged();
        }
    }

    void Details(int id)
    {
        string beforeUrlEncoded = string.Empty;
        var tempId = _crypto.ConvertStringToHex(id.ToString(), System.Text.Encoding.Unicode);
        string url = $"/recruitmentplan-detail/{tempId}";
        _navigation.NavigateTo(url);
    }

    async void PrintEvaluation(int rpId)
    {
        try
        {
            var form = Modal.Show<RecruitmentPlanReportSettingsModal>("Print Settings");
            var response = await form.Result;
            ReportRp settings = new ReportRp();
            settings = response.Data != null ? response.Data as ReportRp : null;
            var user = (await _AutService.GetAuthenticationStateAsync()).User;
            string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
            var psgcCode = await localStorage.GetItemAsync<string>("AdminPsgcCode");
            var replacePrepBy = settings.PreparedBy.Replace(",", "");
            var replaceAppBy = settings.ApprovedBy.Replace(",", "");
            string arrayOfParemeters = rpId.ToString() + "," + replacePrepBy + "," + replaceAppBy + "," + settings.PreparedByPosition + "," + settings.ApprovedByPosition + "," + userId + "," + psgcCode;
            string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

            string url = $"/viewer/{"RecruitmentPlanReport"}/{_encryptedParameter}";
            await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        }
        catch (Exception e)
        {
            throw;
        }
        
    }
}
