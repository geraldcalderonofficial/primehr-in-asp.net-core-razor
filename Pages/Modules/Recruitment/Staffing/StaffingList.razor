@page "/module-staffing-list"
@using HRMSv4.Client.Interface.Workplan
@using HRMSv4.Shared.Workforceplan
@inject IStaffing serviceStaffing
@inject IJSRuntime JSRuntime
@using DevExpress.Blazor
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<HRMSv4.Client.Shared.MainComponents.Breadcrumbs HeaderText="Staffing List" Text="Staffing List" Path="/module/staffinglist" />
<div class="main-card mb-3 card">
    <div class="card-body">
        <div class="row">
            <div class="col-lg-12">
                <div class="w-100">
                    <button class="col-md-2 mb-2 mt-2 me-2 btn btn-outline-2x btn-outline-primary float-end" onclick="@HandleNewRecord">
                        <span class="ladda-label">New Staffing Plan</span>
                    </button>
                </div>
                <DxGrid @ref="MyGrid" Data="staffingData"
                        KeyFieldName="StaffPlanId"
                        ValidationEnabled="false"
                        EditModelSaving="Grid_EditModelSaving"
                        EditMode="GridEditMode.EditRow"
                        PopupEditFormCssClass="pw-800"
                        PagerVisible="true"
                        PageSize="10">
                    <Columns>
                        <DxGridDataColumn FieldName="Year" TextAlignment="DevExpress.Blazor.GridTextAlignment.Center">
                            <CellDisplayTemplate>
                                @{
                                    var temp = (context.DataItem as StaffingPlanSignatoryView);
                                }
                                @temp!.Year
                            </CellDisplayTemplate>
                            <CellEditTemplate>
                                @{
                                    var record = (StaffingPlanSignatoryView)context.EditModel;
                                }
                                <DxComboBox Data="@Year"
                                            NullText="Select Year"
                                            @bind-Value="@record.Year" />
                            </CellEditTemplate>
                        </DxGridDataColumn>
                        <DxGridDataColumn FieldName="PreparedByName">
                            <CellEditTemplate>
                                <DxTextBox Enabled=false NullText="to be filled in report generation"></DxTextBox>
                            </CellEditTemplate>
                        </DxGridDataColumn>
                        <DxGridDataColumn FieldName="ApprovedByName">
                            <CellEditTemplate>
                                <DxTextBox Enabled=false NullText="to be filled in report generation"></DxTextBox>
                            </CellEditTemplate>
                        </DxGridDataColumn>
                        <DxGridDataColumn TextAlignment="DevExpress.Blazor.GridTextAlignment.Center" FieldName="">
                            <CellDisplayTemplate>
                                @{
                                    var temp = (context.DataItem as StaffingPlanSignatoryView);
                                }
                                <button class="border-0 btn-transition btn btn-outline-dark" data-toggle="tooltip" data-placement="left" title="Info" @onclick="@(() => ViewStaffing(temp))">
                                    <i class="lnr-pencil"></i>
                                </button>
                                <button class="border-0 btn-transition btn btn-outline-primary" data-toggle="tooltip" data-placement="left" title="Print" @onclick="@(() => PrintPlan(temp))">
                                    <i class="lnr-printer"></i>
                                </button>
                                <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" data-placement="left" title="Delete" @onclick="@(() => Delete(temp))">
                                    <i class="lnr-trash"></i>
                                </button>
                            </CellDisplayTemplate>
                            <CellEditTemplate>
                                <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="left" title="Save" @onclick="@(() => MyGrid!.SaveChangesAsync())">
                                    <i class="lnr-checkmark-circle"></i>
                                </button>
                                <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" data-placement="left" title="Cancel" data-bs-original-title="Cancel" @onclick="@(() => MyGrid!.CancelEditAsync())">
                                    <i class="lnr-cross"></i>
                                </button>
                            </CellEditTemplate>
                        </DxGridDataColumn>
                    </Columns>
                </DxGrid>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    IGrid? MyGrid { get; set; }

    List<StaffingPlanSignatoryView> staffingData = new List<StaffingPlanSignatoryView>();
    List<int> Year = new List<int>();

    string userId = "";

    // Unknown/Unused ->
    //bool allowCompositeDataCells = false;
    //private string yearFrom { get; set; }
    //List<StaffingYearList> lisfOfYears = new List<StaffingYearList>();

    protected override async Task OnInitializedAsync()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))!.Value!;

        staffingData = await serviceStaffing.GetAllStaffList();
        //yearFrom = DateTime.Now.Year.ToString(); -> Unknown/Unused

        for (int i = DateTime.Now.Year - 1; i <= (DateTime.Now.Year) + 1; i++)
        {
            // Unknown/Unused ->
            //var newItem = new StaffingYearList();
            //newItem.Year = i;
            //newItem.YearString = i.ToString();
            //lisfOfYears.Add(newItem);
            Year.Add(i);
        }
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs item)
    {
        var modelData = item.EditModel as StaffingPlanSignatoryView;
        modelData!.User = userId;
        if (modelData.Year == 0)
        {
            await _Swal.FireAsync("Warning", "Please select valid year", "warning");
            return;
        }

        var result = await serviceStaffing.AddStaffPlan(modelData);
        if (result.StatusCode == 200)
        {
            var tempId = _crypto.ConvertStringToHex(result.Value, System.Text.Encoding.Unicode);
            string url = $"/module-staffing-plan/{tempId}";
            _navigation.NavigateTo(url);
            return;
        }
        await _Swal.FireAsync("Warning", result.Value, "warning");
    }

    void ViewStaffing(StaffingPlanSignatoryView item)
    {
        var tempId = _crypto.ConvertStringToHex(item.StaffPlanId.ToString(), System.Text.Encoding.Unicode);
        string url = $"/module-staffing-plan/{tempId}";
        _navigation.NavigateTo(url);
    }

    async Task PrintPlan(StaffingPlanSignatoryView item)
    {
        var psgcCode = await localStorage.GetItemAsync<string>("AdminPsgcCode");
        //string arrayOfParemeters = item.Year.ToString() + "," + userId + "," + psgcCode; -> Updated to modern syntax
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string username = "";
        username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;

        string arrayOfParemeters = $"{item.Year.ToString()},{username},{psgcCode}";
        string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);
        string url = $"/viewer/{"StaffingPlanReport"}/{_encryptedParameter}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    async void HandleNewRecord()
    {
        await MyGrid!.StartEditNewRowAsync();
    }

    async void Delete(StaffingPlanSignatoryView item)
    {
        SweetAlertResult r = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm",
                Text = "Confirming you want to delete selected record.",
                Icon = "question",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes"
            });
        if (!string.IsNullOrEmpty(r.Value))
        {

            var res = await serviceStaffing.Delete(item.StaffPlanId);

            if (res.StatusCode == 200)
            {
                await _Swal.FireAsync("Warning", res.Value, "warning");
            }
            else
            {
                if (res.StatusCode == 500)
                {
                    await _Swal.FireAsync("Warning", res.Value, "warning");
                }
            }
            StateHasChanged();
        }
    }
}
