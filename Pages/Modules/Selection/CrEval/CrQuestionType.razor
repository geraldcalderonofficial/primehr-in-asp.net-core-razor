@page "/module-crquestiontype"
@inject IJSRuntime JSRuntime
@using HRMSv4.Client.Service
@inject IApplicantEvaluation service
@using System.Linq.Dynamic.Core
@using HRMSv4.Shared.Selection
@using DevExpress.Blazor

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Question Types
            </h3>
        </div>
        <div class="page-title-actions">

            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/module-applicantevaluation">Application Evaluation</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Question Types</li>
                </ol>
            </nav>
        </div>
    </div>
</div>

<div class="main-card mb-3 card">
    <div class="card-body" onbeforeunload="TestDataTablesRemove('#example')">
        <div class="col-lg-16" align="right">
            <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" onclick="@InsertRow" disabled="@(qtToInsert != null)" style="margin-bottom: 10px; width:200px"> Add Type </button>
        </div>
        <DxGrid @ref="MyGrid" Data="@TypeList" ValidationEnabled="false"
                SelectionMode="GridSelectionMode.Single"
                AllowSelectRowByClick="true"
                CustomizeEditModel="Grid_CustomizeEditModel"
                EditModelSaving="Grid_EditModelSaving"
                DataItemDeleting="Grid_DataItemDeleting"
                EditCanceling="editCancel"
                PopupEditFormCssClass="pw-800"
                EditMode="GridEditMode.EditRow"
                PagerVisible="true"
                PageSize="50">
            <Columns>
                <DxGridDataColumn FieldName="QuestionTypeName">
                    <CellEditTemplate>
                        @{
                            var record = (QuestionType)context.EditModel;
                        }
                        <DxTextBox CssClass="cw-320" NullText="Enter template name" @bind-Text="record.QuestionTypeName" />
                    </CellEditTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn TextAlignment="DevExpress.Blazor.GridTextAlignment.Center" FieldName="" Width="100px">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as QuestionType);
                        }
                        <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="top" title="Edit" disabled="@editMode" @onclick="@(() => MyGrid.StartEditDataItemAsync(temp))">
                            <i class="lnr-pencil"></i>
                        </button>
                        <button class="border-0 btn-transition btn btn-outline-primary" data-toggle="tooltip" data-placement="top" title="Delete" disabled="@editMode" @onclick="@(() => DeleteRow(temp))">
                            <i class="lnr-trash"></i>
                        </button>
                    </CellDisplayTemplate>
                    <CellEditTemplate>
                        <button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="top" title="Save" @onclick="@(() => MyGrid.SaveChangesAsync())">
                            <i class="lnr-checkmark-circle"></i>
                        </button>
                        <button class="border-0 btn-transition btn btn-outline-danger" data-toggle="tooltip" data-placement="top" title="Cancel" @onclick="@(() => MyGrid.CancelEditAsync())">
                            <i class="lnr-cross"></i>
                        </button>
                    </CellEditTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
    </div>
</div>

@code {
    IEnumerable<HRMSv4.Shared.Selection.QuestionType> qtypes;
    List<QuestionType> types = new List<QuestionType>();
    object SelectedTemplateItem { get; set; }
    IGrid? MyGrid { get; set; }
    string userId = "";
    bool editMode = false;

    object TypeList { get; set; }
    GridDevExtremeDataSource<QuestionType> gridDevExtremeDataSource;

    HRMSv4.Shared.Selection.QuestionType qtToInsert;
    string qtToEdit;
    bool isLoading;
    int count;

    protected override async Task OnInitializedAsync()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        await UpdateDataAsync();
    }

    async Task UpdateDataAsync()
    {
        qtypes = await service.GetTypes();

        var tempList = qtypes.AsQueryable();

        gridDevExtremeDataSource = new GridDevExtremeDataSource<QuestionType>(tempList);
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            // If underlying data is a large SQL table, specify PrimaryKey and PaginateViaPrimaryKey.
            // This can make SQL execution plans more efficient.
            loadOptions.PrimaryKey = new[] { "QuestionTypeId" };
            loadOptions.PaginateViaPrimaryKey = true;

        };

        TypeList = gridDevExtremeDataSource;


        StateHasChanged();
    }
    async Task InsertRow()
    {
        editMode = true;
        await MyGrid.StartEditNewRowAsync();
    }

    void editCancel(GridEditCancelingEventArgs e)
    {
        editMode = false;
    }
    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            var newSched = (QuestionType)e.EditModel;
        }
        else
        {
            var temp = (QuestionType)e.EditModel;
        }
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var data = e.EditModel as QuestionType;


        if (string.IsNullOrEmpty(data.QuestionTypeName))
        {
            await _Swal.FireAsync("Oops", "Please enter question type name", "warning");
            return;
        }

        else
        {
            Response result = new Response();
            if (data.QuestionTypeId > 0)
            {
                data.UpdatedBy = userId;
                result = await service.Update(data);
            }
            else{
                data.CreatedBy = userId;
                result = await service.AddType(data);
            }
                

            if (result.StatusCode == 200)
            {
                await _Swal.FireAsync("Success", result.Value, "success");
                await UpdateDataAsync();
            }
            else
            {
                await _Swal.FireAsync("Error", result.Value, "error");
            }
        }

    }

    async Task DeleteRow(QuestionType ws)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You are about to delete this record.",
                Icon = "warning",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });
        if (!string.IsNullOrEmpty(result.Value))
        {
            var res = await service.Delete(ws.QuestionTypeId);

            if (res.StatusCode == 200)
            {
                await _Swal.FireAsync("Success", res.Value, "success");
                await UpdateDataAsync();
            }
            else
            {
                await _Swal.FireAsync("Oops...", "Something went wrong!", "error");
            }
        }

    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var temp = (QuestionType)e.DataItem;
        var result = await service.Delete(temp.QuestionTypeId);
        if (result.StatusCode == 200)
        {
            await _Swal.FireAsync("Success", result.Value, "success");
            await UpdateDataAsync();
        }
        else
        {
            await _Swal.FireAsync("Error", result.Value, "error");
        }
    }

    string GetValidString(string str)
    {
        string validString = "";
        if (str != null)
        {
            string[] newStr = str.Split(' ');
            List<string> validList = newStr.Where(c => c != "" && c != "\t" && c != "\n").ToList();
            foreach (string str1 in validList)
            {
                if (validString != "")
                {
                    validString += " " + str1;
                }
                else
                {
                    validString = str1;
                }
            }
        }

        return validString;
    }
}
