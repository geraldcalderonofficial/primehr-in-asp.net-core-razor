@page "/module-applicant-interview"
@inject IApplicants _appService
@inject SweetAlertService Swal
@using System.Linq.Dynamic.Core
@using HRMSv4.Shared.Misc
@using HRMSv4.Shared.OnBoarding
@using HRMSv4.Shared.Selection
@inject IApplicantCompetency _appComptencyService
@inject IJSRuntime JSRuntime
@using DevExpress.Blazor
@using HRMSv4.Shared.SignalRData
@using Microsoft.AspNetCore.SignalR.Client
@inject HubConnection HubConnection

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
               Applicants Interview
            </h3>
        </div>
        <div class="page-title-actions">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Applicants Interview</li>
                </ol>
            </nav>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-8 col-xl-8 col-md-8">
        <div class="main-card mb-3 card">
            <div class="card-header">
                <div class="col-sm-12 col-xl-12 col-md-12">
                    <span style="vertical-align:middle; line-height: 2.5rem;">Applicants List</span>
                    <select class="form-select form-control-sm form-control col-md-3" @onchange="@OnTypeSelect" style="float:right !important; margin-top: 5px;">
                        <option value=0 disabled>Select Type</option>
                        <option value=1 selected>External Applicants</option>
                        <option value=2>Internal Applicants</option>
                    </select>
                    @* <select class="form-select form-control-sm form-control col-md-3" @onchange="@OnStatusSelect" style="float:right !important; margin-top: 5px;">
                        <option value="All">All</option>
                        <option value="Pending" selected>Pending</option>
                        <option value="Approved">Approved</option>
                        <option value="Disapproved">Disapproved</option>
                    </select>*@
                </div>
            </div>
        </div>
        <DxGrid @ref="MyGrid" Data="@_applicants"
                SelectionMode="GridSelectionMode.Single"
                ShowFilterRow="true"
                AllowSelectRowByClick="true" 
                KeyFieldName="EmployeeId" SelectedDataItemChanged="SelectedApplicant">
            <Columns>
                <DxGridDataColumn FieldName="" FilterRowEditorVisible="false" Width="60px" Caption="Image">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as ApplicantListView);
                        }

                        @if (temp.ImageName == "default-avatar-grey.png")
                        {
                            <RadzenImage Path="/MainLayout/images/avatars/default-avatar-grey.png" style="width: 40px; height: 40px; border-radius: 8px;" />
                        }
                        else
                        {
                            <RadzenImage Path=@(@apiURL + "Uploads/Employees/Avatar/" + temp.EmployeeId + "/" + temp.ImageName) style="width: 40px; height: 40px; border-radius: 8px;" />
                        }
                    </CellDisplayTemplate>

                </DxGridDataColumn>
                  <DxGridDataColumn FieldName="FullName" Caption="Applicant Name">

                  </DxGridDataColumn>
                <DxGridDataColumn FieldName="RegisteredAt" Caption="Registered At">

                  </DxGridDataColumn>
                <DxGridDataColumn FieldName="lastAppliedAt" Caption="Last Applied At">

                  </DxGridDataColumn>
               
            </Columns>
        </DxGrid>
    </div>
    <div class="col-sm-4 col-xl-4 col-md-4">
        <div class="card-header">Details</div>
        <ul class="list-group list-group-flush mb-3">
            <li class="list-group-item">
                <div class="widget-content p-0">
                    <div class="widget-content-wrapper">
                        <div class="widget-content-left me-3">
                            @if (string.IsNullOrWhiteSpace(@ApplicantAvatar))
                            {
                                    <img class="rounded-circle" src="/images/avatars/default-avatar-grey.png" style="width: 40px; height: 40px; border-radius: 8px;" />
                            }
                            else
                            {
                                    <img class="rounded-circle" src=@(@apiURL + "Uploads/Employees/Avatar/" + @EmployeeId + "/" + ApplicantAvatar) style="width: 40px; height: 40px; border-radius: 8px;" />
                            }
                        </div>
                        <div class="widget-content-left">
                            <div class="widget-heading">@FullName</div>
                            <div class="widget-subheading"></div>
                        </div>
                    </div>
                    <div class="widget-content p-0">
                        <div class="widget-content-wrapper">
                            <div class="widget-content-left">
                                <div class="widget-subheading">Address: @Address</div>
                            </div>
                        </div>
                    </div>
                    <div class="widget-content p-0">
                        <div class="widget-content-wrapper">
                            <div class="widget-content-left">
                                <div class="widget-subheading">Email Address: @EmailAddress</div>
                            </div>
                        </div>
                    </div>
                    <div class="widget-content p-0">
                        <div class="widget-content-wrapper">
                            <div class="widget-content-left">
                                <div class="widget-subheading">Mobile No.: @MobileNumber</div>
                            </div>
                        </div>
                    </div>
                    <div class="widget-content p-0">
                        <div class="widget-content-wrapper">
                            <div class="widget-content-left">
                                <div class="widget-subheading">Landline No.: @LandlineNo</div>
                            </div>
                        </div>
                    </div>
                    <div class="widget-content p-0">
                        <div class="widget-content-wrapper">
                            <div class="widget-content-left">
                                <div class="widget-subheading">Previous Employee No.</div>
                            </div>
                        </div>
                    </div>
                </div>
            </li>
        </ul>
        <div class="main-card mb-3 card">
            <div class="card-body">
                <h5 class="card-title">Applied Jobs</h5>
                <div class="table-responsive">
                    <table class="mb-0 table table-hover" style="font-size:13px;">
                        <thead>
                            <tr>
                                <th>Type</th>
                                <th>Position</th>
                                <th>Designation</th>
                                <th>Applied</th>
                                <th>Status</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (@_jobs != null)
                            {
                                foreach (var item in @_jobs)
                                {
                                            <tr>
                                                <th scope="row">
                                            @if (@item.IsPlantilla == true)
                                            {
                                                Status = "Plantilla";
                                            }
                                            else
                                            {
                                                Status = "NonPlantilla";
                                            }
                                            @Status
                                                </th>
                                                <td>@item.PositionTitle</td>
                                                <td>@item.Designation</td>
                                                <td>@item.DateApplied</td>
                                                <td>
                                                    @item.Status
                                                </td>
                                                <td>
                                            <button title="Competency Assessment" class="btn btn-link grid-btn-link" @onclick="() => ApplicantAssessment(item.PersonnelActionMemoId)"><i class="ion ion-android-checkmark-circle"></i></button>
                                                </td>
                                            </tr>
                                }
                            }
                            else
                            {
                                    <tr>
                                        <td [attr.colspan]="columns.length">
                                            No records found
                                        </td>
                                    </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
@code {

    IEnumerable<ApplicantListView> _applicants;
    List<AppliedJobsView> _jobs = new List<AppliedJobsView>();
    RadzenDataGrid<ApplicantListView>? _applicantsGrid;
    object SelectedDataItem { get; set; }
    public string? apiURL { get; set; }
    bool isLoading;
    int count;
    string applicationStatus = "Pending";
    private int NotificationCount { get; set; } = 0;
    IGrid? MyGrid { get; set; }

    /* Detail Info */
    public int EmployeeId { get; set; }
    public string? ApplicantAvatar { get; set; }
    public string? FullName { get; set; }
    public string? Address { get; set; }
    public string? EmailAddress { get; set; }
    public string? MobileNumber { get; set; }
    public string? LandlineNo { get; set; }
    public string? Status { get; set; }

    public int status { get; set; } = 1;
    public string deptFilter { get; set; } = "null";
    public int orderByFilter { get; set; }
    string userId = "";
    ApplicantListView selectedRow = new ApplicantListView();

    protected override async Task OnInitializedAsync()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        apiURL = AppInfo.ApiUrl;

        //devexpress
        _applicants = await _appComptencyService.GetApplicantsInterview(status, applicationStatus);

        HubConnection.On<SignalRCarrier>("RefreshResult", async survey =>
        {
            _jobs = await _appComptencyService.GetJobApplied(selectedRow.EmployeeId);
            //_applicants = await _appComptencyService.GetApplicantsInterview(status, applicationStatus);
            //NotificationCount = _applicants.Count();
            StateHasChanged();
        });
    }

    //async Task SelectedApplicant(ApplicantListView selectedRow)
    async Task SelectedApplicant(object selected)
    {    
        selectedRow = selected as ApplicantListView;
        var data = await _appService.GetApplicantDetails(selectedRow.EmployeeId);

        EmployeeId = data.EmployeeId;
        ApplicantAvatar = data.ImageName;
        FullName = data.FullName;
        Address = data.Address;
        EmailAddress = data.EmailAddress;
        MobileNumber = data.MobileNumber;
        LandlineNo = data.LandlineNumber;

        _jobs = await _appComptencyService.GetJobApplied(selectedRow.EmployeeId);

        this.StateHasChanged();
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        var data = await _appService.GetApplications(status, applicationStatus);
        var query = data.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        count = query.Count();

        _applicants = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        isLoading = false;
    }

    async Task Reset()
    {
        _applicantsGrid.Reset(true);
        await _applicantsGrid.FirstPage(true);
    }

    public async Task OnTypeSelect(ChangeEventArgs e)
    {
        status = e.Value != null ? int.Parse(e.Value.ToString()) : 0;
        //await Reset();
        _applicants = await _appComptencyService.GetApplicantsInterview(status, applicationStatus);
        MyGrid.ClearSelection();
        _jobs.Clear();

        EmployeeId = 0;
        ApplicantAvatar = "";
        FullName = "";
        Address = "";
        EmailAddress = "";
        MobileNumber = "";
        LandlineNo = "";

        selectedRow = new ApplicantListView();
        StateHasChanged();
    }

    public async Task OnStatusSelect(ChangeEventArgs e)
    {
        //isLoading = true;
        applicationStatus = e.Value.ToString();
        //await Reset();
    }

    async Task ApplicantAssessment(int pamId)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Do you really want to proceed?",
                Text = "",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "No",
                CancelButtonColor = "#999999"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            var getSelected = await _appComptencyService.GetSelectedAssessment(pamId);
            if (getSelected.CompetencyAssessmentId > 0)
            {
                var tempId = _crypto.ConvertStringToHex(pamId.ToString(), System.Text.Encoding.Unicode);
                string url = $"/module-applicant-assessment/{tempId}";
                await JSRuntime.InvokeAsync<object>("open", url, "_blank");
            }
            else
            {
                CompetencyAssessment assessment = new CompetencyAssessment();
                assessment.DateAssessed = DateTime.Now;
                assessment.PersonnelActionMemoId = pamId;
                assessment.EmployeeId = EmployeeId;
                assessment.CreatedBy = userId;
                var resultAdd = await _appComptencyService.Add(assessment);
                if (resultAdd.StatusCode == 200)
                {
                    _jobs = await _appComptencyService.GetJobApplied(selectedRow.EmployeeId);
                    StateHasChanged();
                    var tempId = _crypto.ConvertStringToHex(pamId.ToString(), System.Text.Encoding.Unicode);
                    string url = $"/module-applicant-assessment/{tempId}";
                    await JSRuntime.InvokeAsync<object>("open", url, "_blank");
                }
                
            }
        }

       
       
        
    }

   
}
