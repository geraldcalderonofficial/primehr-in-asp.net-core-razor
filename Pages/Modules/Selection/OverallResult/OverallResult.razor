@page "/overallresult"
@using DevExpress.Blazor
@using HRMSv4.Client.Shared.Modals.Selection
@using HRMSv4.Shared.Selection
@inject IPaperEvaluation peService
@inject IOverallResult service
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Overall Selection Methodology and Criteria
            </h3>
        </div>
        <div class="page-title-actions">
            <div class="d-inline-block dropdown">
                <button type="button" data-bs-toggle="dropdown" aria-haspopup="true"
                        aria-expanded="false" class="btn-shadow dropdown-toggle btn btn-info">
                    <span class="btn-icon-wrapper pe-2 opacity-7">
                        <i class="fa fa-business-time fa-w-20"></i>
                    </span>
                    Actions
                </button>
                <div tabindex="-1" role="menu" aria-hidden="true" class="dropdown-menu dropdown-menu-right">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link" href="/overall-criteriaitems">
                                <i class="nav-link-icon pe-7s-note2"></i>
                                <span>Screening Criteria Items</span>
                            </a>
                        </li>

                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="main-card mb-3 card">
    <div class="card-body">
        <div class="row">
            <div class="col-sm-12">
                <div class="row">
                    <div class="mb-3 col-xl-4 col-sm-12">
                        <label class="form-label" for="exampleEmail55">Positions</label>
                        @if (positionList != null)
                        {
                            @*FilteringMode="@FilteringMode"*@

                            <DxComboBox Id="ComboBox1" NullText="Select a position..."
                                    Data="@positionList" SizeMode="SizeMode.Medium"
                                    
                                    @bind-Value="@positionId"
                                    @bind-Text="@Text"
                                    TextFieldName="@nameof(Position.PositionTitle)"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                    CssClass="cw-480"
                                    SelectedItemChanged="@((Position pos) => OnPositionSelect(pos))" />
                        }
                        @*<RadzenDropDown Change="@(args => OnPositionSelect(args, "DropDown"))" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="positionId" Data="@positionList" TextProperty="PositionTitle" ValueProperty="PositionId" Class="w-100" />*@
                    </div>
                    <div class=" mb-3 col" align="right">
                        <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" style="margin-bottom: 10px; width:200px" onclick="@Print"> Print Comparative Report </button>
                        <button hidden="@hideTurnAroundReport" class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" style="margin-bottom: 10px; width:200px" onclick="@PrintTat"> Print Turn Around Time Report </button>

                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <DxGrid Data="@overall" PageSize="10"
                        ShowFilterRow="true"
                        PagerPosition="GridPagerPosition.Bottom"
                        PageSizeSelectorVisible="true"
                        PageSizeSelectorItems="@(new int[] { 5, 10, 20, 100 })"
                        PageSizeSelectorAllRowsItemVisible="true"
                        PagerSwitchToInputBoxButtonCount="10"
                        PagerVisibleNumericButtonCount="10">
                    <Columns>
                        <DxGridDataColumn FieldName="PositionTitle" />
                        <DxGridDataColumn FieldName="ApplicantName" />
                        <DxGridDataColumn FieldName="IsCheckPaperEvaluation" Caption="Paper Evaluation">
                            <CellDisplayTemplate>
                                @if ((bool)context.Value == true)
                                {
                                    <i class="pe-7s-check" style="color:green"></i>
                                }
                                else{
                                    <i class="pe-7s-close-circle" style="color:red"></i>
                                }
                            </CellDisplayTemplate>
                        </DxGridDataColumn>
                        <DxGridDataColumn FieldName="IsCheckExam" Caption="Exam">
                            <CellDisplayTemplate>
                                @if ((bool)context.Value == true)
                                {
                                    <i class="pe-7s-check" style="color:green"></i>
                                }
                                else
                                {
                                    <i class="pe-7s-close-circle" style="color:red"></i>
                                }
                            </CellDisplayTemplate>
                        </DxGridDataColumn>
                        <DxGridDataColumn FieldName="IsCheckInterview" Caption="Interview">
                            <CellDisplayTemplate>
                                @if ((bool)context.Value == true)
                                {
                                    <i class="pe-7s-check" style="color:green"></i>
                                }
                                else
                                {
                                    <i class="pe-7s-close-circle" style="color:red"></i>
                                }
                            </CellDisplayTemplate>
                        </DxGridDataColumn>
                    </Columns>
                </DxGrid>
            </div>
        </div>
    </div>
</div>
@code {
    IEnumerable<Position> positionList;
    int? positionId = 0;
    int posId = 0;
    string text = "";
    string Text { get => text; set { text = value; InvokeAsync(StateHasChanged); } }
    DataGridFilteringMode FilteringMode { get; set; } = DataGridFilteringMode.StartsWith;
    List<HRMSv4.Shared.Selection.OverallResult> overall = new List<HRMSv4.Shared.Selection.OverallResult>();
    [CascadingParameter] public IModalService Modal { get; set; }
    bool hasPrint = false;

    bool hideTurnAroundReport { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        positionList = await peService.GetOpenPositions();
        overall = await service.GetOverallResult(0);
    }


    async void OnPositionSelect(Position pos)
    {
        if(pos == null)
        {
            var temp = await service.GetOverallResult(0);
            overall = temp.ToList();
            hasPrint = false;
            posId = 0;
            hideTurnAroundReport = true;

        }
        else
        {
            var temp = await service.GetOverallResult(pos.PositionId);
            overall = temp.ToList();
            if (pos.PositionId != 0) hasPrint = true;
            else hasPrint = false;
            posId = pos.PositionId;
            hideTurnAroundReport = false;
        }

        

        

        
        StateHasChanged();
    }

    async Task Print()
    {
        var options = new ModalOptions()
        {
            DisableBackgroundCancel = true,
            //Animation = ModalAnimation.FadeIn(0.2),
            ContentScrollable = true,
        };
        //var parameters = new ModalParameters();
        //parameters.Add(nameof(Shared.Modals.Selection.ComparativeReportModal.jobVacancyIds), overall.Select(c => c.JobVacancyId).Distinct().ToList());
        //parameters.Add(nameof(Shared.Modals.Selection.ComparativeReportModal.applicantIds), overall.Select(c => c.ApplicantId).Distinct().ToList());

        var _modalStatus = Modal.Show<Shared.Modals.Selection.ComparativeReportModal>("Overall Comparative Result", options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            var psgcCode = await localStorage.GetItemAsync<string>("AdminPsgcCode");

            var user = (await _AutService.GetAuthenticationStateAsync()).User;
            string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

            string username = "";
            username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;

            string jobVacancyIdString = string.Join(';', overall.Select(c => c.JobVacancyId).Distinct().ToList());
            string applicantIdString = string.Join(';', overall.Select(c => c.ApplicantId).Distinct().ToList());
            string psgcAndUser = string.Format("{0};{1}", psgcCode, username);
            string arrayOfParemeters = string.Format("{0}${1}${2}", jobVacancyIdString, applicantIdString, psgcAndUser);
            string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

            string url = $"/viewer/{"OverallComparativeReport"}/{_encryptedParameter}";
            await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        }
    }

    async Task PrintTat()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(TurnAroundTimeReportModal.posId), posId);
        var _modalStatus = Modal.Show<Shared.Modals.Selection.TurnAroundTimeReportModal>("Turn Around Time", parameters);
        var modalResult = await _modalStatus.Result;
        ReportTurnAroundTime result = new ReportTurnAroundTime();
        result= modalResult.Data != null ? modalResult.Data as ReportTurnAroundTime : null;
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        var psgcCode = await localStorage.GetItemAsync<string>("AdminPsgcCode");
        var prepName = result.PreparedBy.Replace(",", "");
        var notedName = result.NotedBy.Replace(",", "");
        string arrayOfParemeters = result.Position + "," + result.Office + "," + prepName + "," + notedName + "," + result.PreparedByPosition + "," + result.NotedByPosition + "," + userId + "," + psgcCode;
        string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

        string url = $"/viewer/{"TurnAroundTimeReport"}/{_encryptedParameter}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }
}