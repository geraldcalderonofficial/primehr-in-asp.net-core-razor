@page "/overall-criteriaitems"
@using HRMSv4.Shared.Selection
@inject IOverallResult service
@using System.Linq.Dynamic.Core
@using DevExpress.Blazor
@using System
@using System.Web

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Screening Criteria Items
            </h3>
        </div>
        <div class="page-title-actions">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/overallresult">Overall Result</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Screening Criteria Items</li>
                </ol>
            </nav>
        </div>
    </div>
</div>
<div class="main-card mb-3 card">
    <div class="card-body">

        <div class="row">
            <div class="col-lg-12">
                <div class="col-lg-12" align="right">
                    @*<button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" onclick="@NewRecruitmentPlan" style="margin-bottom: 10px; width:200px"> New Recruitment Plan </button>*@
                </div>
                <DxGrid Data="@items" ShowGroupPanel="true" AutoExpandAllGroupRows="true"
                        ValidationEnabled="false"
                        CustomizeEditModel="Grid_CustomizeEditModel"
                        EditModelSaving="Grid_EditModelSaving"
                        PopupEditFormCssClass="pw-800"
                        EditMode="GridEditMode.EditRow">
                    <Columns>
                        <DxGridDataColumn FieldName="Methodology" GroupIndex="0" />
                        <DxGridDataColumn FieldName="Criterion" />
                        <DxGridDataColumn FieldName="HighestPossibleScore">
                            <CellEditTemplate>
                                @{
                                    var criteria = (ScreeningCriteriaItem)context.EditModel;
                                }
                                <DxMaskedInput @bind-Value="@criteria.HighestPossibleScore"
                                               CssClass="cw-320"
                                               Mask="@NumericMask.WholeNumber" />
                            </CellEditTemplate>
                        </DxGridDataColumn>
                        <DxGridDataColumn FieldName="OverallScorePercentage">
                            <CellEditTemplate>
                                @{
                                    var criteria = (ScreeningCriteriaItem)context.EditModel;
                                }
                                <DxMaskedInput @bind-Value="@criteria.OverallScorePercentage"
                                               CssClass="cw-320"
                                               Mask="@NumericMask.WholeNumber" />
                            </CellEditTemplate>
                        </DxGridDataColumn>
                        <DxGridDataColumn FieldName="ResponsibleParty">
                            <CellEditTemplate>
                                @{
                                    var criteria = (ScreeningCriteriaItem)context.EditModel;
                                }
                                <DxTextBox @bind-Text="@criteria.ResponsibleParty"></DxTextBox>
                            </CellEditTemplate>
                        </DxGridDataColumn>
                        <DxGridCommandColumn Width="140px" DeleteButtonVisible="false" NewButtonVisible="false" />
                    </Columns>
                    <TotalSummary>
                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="OverallScorePercentage" />
                    </TotalSummary>
                </DxGrid>
            </div>
        </div>
    </div>
</div>
@code {
    List<ScreeningCriteriaItem> items = new List<ScreeningCriteriaItem>();
    ScreeningCriteriaItem sci = new ScreeningCriteriaItem();
    ScreeningCriteriaItem sciToEdit = new ScreeningCriteriaItem();
    string userId = "";

    protected override async Task OnInitializedAsync()
    {

        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        items = await service.GetCriteriaItems();

        if (items.Count() == 0)
        {
            sci.Methodology = "asd";
            sci.Criterion = "asd";
            sci.ResponsibleParty = "asd";
            var res = await service.PostCriteriaItem(sci);
            if (res.StatusCode == 200)
            {
                items = await service.GetCriteriaItems();
            }
            else
            {
                await _Swal.FireAsync("Oops...", "Something went wrong.", "error");
            }

        }
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        //if (e.IsNew)
        //{
        //    sciToEdit = (ScreeningCriteriaItem)e.EditModel;

        //}
    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var data = e.EditModel as ScreeningCriteriaItem;

        //check if more than 100

        var list = items.Where(a=>a.ScreeningCriteriaItemId != data.ScreeningCriteriaItemId).ToList();
        double totalPercentage = list.Sum(a => a.OverallScorePercentage);
        double plusEdit = totalPercentage + data.OverallScorePercentage;

        if(plusEdit > 100)
        {
            await _Swal.FireAsync("Oops...", "Overall percentage total must not be grater than 100", "error");
        }
        else{
            data.UpdatedBy = userId;
            await service.PutCriteriaItem(data);
            await UpdateDataAsync();
        }

        
    }

    async Task UpdateDataAsync()
    {
        items = new List<ScreeningCriteriaItem>();
        items = await service.GetCriteriaItems();
    }


}
