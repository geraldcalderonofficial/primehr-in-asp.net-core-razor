@page "/module-paperevaluation"
@inject IJSRuntime JSRuntime
@using DevExpress.Blazor
@using HRMSv4.Client.Service
@inject IPaperEvaluation service
@using System.Linq.Dynamic.Core
@using HRMSv4.Shared.Selection
@inject SweetAlertService Swal;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<style>
    .app-page-title.app-page-title-simple {
        padding: 1rem 0;
    }
</style>
<div class="app-page-title py-0 m-0">
    <div class="page-title-wrapper">
        <HRMSv4.Client.Shared.MainComponents.Breadcrumbs HeaderText="Paper Evaluation Summary" Text="Paper Evaluation Summary" Path="/module/paperevaluationsummary" />
        <div class="page-title-actions">
            <div class="d-inline-block dropdown">
                <button type="button" data-bs-toggle="dropdown" aria-haspopup="true"
                        aria-expanded="false" class="btn-shadow dropdown-toggle btn btn-info">
                    <span class="btn-icon-wrapper pe-2 opacity-7">
                        <i class="fa fa-business-time fa-w-20"></i>
                    </span>
                    Actions
                </button>
                <div tabindex="-1" role="menu" aria-hidden="true" class="dropdown-menu dropdown-menu-right">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link" href="/evaluation-templateitem">
                                <i class="nav-link-icon pe-7s-note2"></i>
                                <span>Template Items</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/evaluation-applicant">
                                <i class="nav-link-icon pe-7s-id"></i>
                                <span>Applicants</span>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="main-card mb-3 card">
    <div class="card-body">
        <div class="row">
            <div class="col-sm-12">
                <div class="row">
                    <div class="mb-3 col-xl-2 col-sm-12">
                        <div class="row">
                            <label class="" for="exampleEmail55">Date Conducted: </label>
                            <DxDateEdit 
                                        Date="Date"
                                        NullText="Select a date..."
                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                        DateChanged="@((DateTime newValue) => OnDateChanged(newValue))"
                                        SizeMode="SizeMode.Medium"
                                        PickerDisplayMode="DatePickerDisplayMode.ScrollPicker"
                                        ScrollPickerFormat="MMMM yyyy"
                                        MinDate="@(new DateTime(2022, 01, 01))"
                                        Mask="@DateTimeMaskValue">
                                    
                            </DxDateEdit>
                        </div>

                    </div>
                    <div class=" mb-3 col" align="right">
                        <button class="btn btn-outline-2x btn-outline-primary" hidden="@IsHidden" @onclick="() => PrintSummary(Date)" style="margin-bottom: 10px; width:200px"> Print Summary Report </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-12">
                <DxGrid Data="@data" PageSize="10"
                        ShowFilterRow="true"
                        PagerPosition="GridPagerPosition.Bottom"
                        PageSizeSelectorVisible="true"
                        PageSizeSelectorItems="@(new int[] { 5, 10, 20, 100 })"
                        PageSizeSelectorAllRowsItemVisible="true"
                        PagerSwitchToInputBoxButtonCount="10"
                        PagerVisibleNumericButtonCount="10">
    
                    <Columns>
                        <DxGridDataColumn FieldName="ApplicantName"/>
                        <DxGridDataColumn FieldName="EducEarnedPoints" Caption="Educational Background Earned Points" />
                        <DxGridDataColumn FieldName="EducPtsPercentage" Caption="Educational Background Percentage (10%)" TextAlignment="GridTextAlignment.Right" />
                        <DxGridDataColumn FieldName="ExpiEarnedPoints" Caption="Experience Earned Points" />
                        <DxGridDataColumn FieldName="ExpiPtsPercentage" Caption="Experience Percentage (10%)" TextAlignment="GridTextAlignment.Right" />
                        <DxGridDataColumn FieldName="TrEarnedPoints" Caption="Training Earned Points"/>
                        <DxGridDataColumn FieldName="TrPtsPercentage" Caption="Training Percentage (10%)" TextAlignment="GridTextAlignment.Right" />
                        <DxGridDataColumn FieldName="" Caption="Action" AllowSort="false" Width="90px" MinWidth="100" TextAlignment="GridTextAlignment.Center">
                            <CellDisplayTemplate>
                                @{
                                    var temp = (context.DataItem as PaperEvaluationItemSummaryReport);
                                }
                                <button data-bs-toggle="tooltip" data-bs-placement="left" data-bs-original-title="Print" class="border-0 btn-transition btn btn-outline-primary" title="Print" @onclick="() => PrintEvaluation(temp.PersonnelActionMemoId, temp.EmployeeId, temp.ApplicationDate)"><i class="lnr-printer"></i></button>
                            </CellDisplayTemplate>
                        </DxGridDataColumn>
                    </Columns>
                </DxGrid>
            </div>
        </div>
    </div>
</div>
@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    DateTime Date { get; set; } = DateTime.Today;
    string DateTimeMaskValue { get; set; } = DateTimeMask.MonthAndYear;
    IEnumerable<PaperEvaluationItemSummaryReport> data = new List<PaperEvaluationItemSummaryReport>();
    bool IsDisabled = true;
    bool IsHidden;
    protected override async Task OnInitializedAsync()
    {
        data = await service.GetPaperEvaluationItems(Date);
        IsHidden = data.Count() > 0 ? false : true;
    }

    async void PrintSummary(DateTime date)
    {
        var psgcCode = await localStorage.GetItemAsync<string>("AdminPsgcCode");
        var dateToString = date.ToString("MMMM yyyy");
        var form = Modal.Show<PaperEvalSummaryReportModal>("Print Settings");
        var response = await form.Result;
        ReportPe settings = new ReportPe();
        settings = response.Data != null ? response.Data as ReportPe : null;
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        string userName = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;
        var replacePrepBy = settings.PreparedBy.Replace(",", "");
        var replaceAppBy = settings.ApprovedBy.Replace(",", "");
        string arrayOfParemeters = settings.PreparedById + "," + settings.ApprovedById + "," + dateToString + "," + userName + "," + psgcCode;
        string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

        string url = $"/viewer/{"PaperEvaluationSummaryReport"}/{_encryptedParameter}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    async void PrintEvaluation(int pamId, int? empId, string date)
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        var psgcCode = await localStorage.GetItemAsync<string>("AdminPsgcCode");
        var dateApplied = date.Replace(",", "");
        string arrayOfParemeters = pamId.ToString() + "," + empId.ToString() + "," + dateApplied + "," + userId + "," + psgcCode;
        string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

        string url = $"/viewer/{"PaperEvaluationReport"}/{_encryptedParameter}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    async void OnDateChanged(DateTime newValue)
    {
        Date = newValue;
        data = await service.GetPaperEvaluationItems(Date);
        StateHasChanged();
    }
}
