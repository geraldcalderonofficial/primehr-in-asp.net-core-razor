@page "/evaluation-applicant"
@using HRMSv4.Shared.Selection
@inject IPaperEvaluation service
@inject IJSRuntime JSRuntime
@using System.Linq.Dynamic.Core
@using DevExpress.Blazor

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Applicants for Evaluation
            </h3>
        </div>
        <div class="page-title-actions">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/module-paperevaluation">Paper Evaluation</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Applicants</li>
                </ol>
            </nav>
        </div>
    </div>
</div>
<div class="main-card mb-3 card">
    <div class="card-body">
        <div class="row">
            <div class="col-sm-12">
                <div class="row">
                    <div class="mb-3 col-xl-4 col-sm-12">
                        <label class="form-label" for="exampleEmail55">Positions</label>
                        @if (positionList != null)
                        {
                            <DxComboBox Id="ComboBox1" NullText="Select a position..."
                                    Data="@positionList"
                                    FilteringMode="@FilteringMode"
                                    @bind-Value="@positionId"
                                    @bind-Text="@Text"
                                    TextFieldName="@nameof(Position.PositionTitle)"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                    CssClass="cw-480"
                                    SelectedItemChanged="@((Position pos) => OnPositionSelect(pos))" />
                        }
                        @*<RadzenDropDown Change="@(args => OnPositionSelect(args, "DropDown"))" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="positionId" Data="@positionList" TextProperty="PositionTitle" ValueProperty="PositionId" Class="w-100" />*@
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-12">
                <DxGrid Data="@data" PageSize="10"
                        ShowFilterRow="true"
                        PagerPosition="GridPagerPosition.Bottom"
                        PageSizeSelectorVisible="true"
                        PageSizeSelectorItems="@(new int[] { 5, 10, 20, 100 })"
                        PageSizeSelectorAllRowsItemVisible="true"
                        PagerSwitchToInputBoxButtonCount="10"
                        PagerVisibleNumericButtonCount="10">
                    <Columns>
                        <DxGridDataColumn FieldName="PositionTitle" SortIndex="0" SortOrder="GridColumnSortOrder.Ascending" />
                        <DxGridDataColumn FieldName="FullName" SortIndex="1" SortOrder="GridColumnSortOrder.Ascending" />
                        <DxGridDataColumn FieldName="RegisteredAt" />
                        <DxGridDataColumn FieldName="" AllowSort="false" Width="90px" MinWidth="100" TextAlignment="GridTextAlignment.Center">
                            <CellDisplayTemplate>
                                @{
                                    var temp = (context.DataItem as EvaluationApplicantListView);
                                }
                                <button class="btn btn-link grid-btn-link" @onclick="() => StartEvaluation(temp.PersonnelActionMemoId, temp.EmployeeId)" data-bs-toggle="tooltip" data-bs-placement="left" data-bs-original-title="Evaluate" title="Evaluate"><i class="ion ion-android-checkmark-circle"></i></button>
                            </CellDisplayTemplate>
                        </DxGridDataColumn>
                    </Columns>
                </DxGrid>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    List<EvaluationApplicantListView> data = new List<EvaluationApplicantListView>();
    IEnumerable<Position> positionList;
    int positionId = 0;

    string text = "";
    string Text { get => text; set { text = value; InvokeAsync(StateHasChanged); } }
    DataGridFilteringMode FilteringMode { get; set; } = DataGridFilteringMode.StartsWith;


    protected override async Task OnInitializedAsync()
    {
        var tempPositions = await service.GetOpenPositions();
        Position p = new Position
            {
                PositionId = 0,
                PositionTitle = "All"
            };

        List<Position> newPos = new List<Position>();
        newPos = tempPositions.ToList();
        newPos.Add(p);

        newPos = newPos.OrderBy(a => a.PositionId).ToList();

        positionList = newPos.AsEnumerable();
        data = await service.GetApplicants(positionId);
    }

    async void OnPositionSelect(Position pos)
    {
        positionId = pos.PositionId;
        data = new List<EvaluationApplicantListView>();
        data = await service.GetApplicants(positionId);

        StateHasChanged();
    }

    async void StartEvaluation(int pamId, int empId)
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        var userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        if (pamId == 0)
        {
            return;
        }

        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "Do you really want to evaluate this applicant?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "No",
                CancelButtonColor = "#999999"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            var data = new HRMSv4.Shared.Selection.PaperEvaluation
                {
                    PersonnelActionMemoId = pamId,
                    EvaluatorEmployeeId = userId,
                    TotalScore = 0
                };

            Response res = await service.PostApplicantEvaluation(data);

            if (res.StatusCode == 200)
            {
                if (res.Value == "")
                {
                    return;
                }

                string peId = res.Value;
                string beforeUrlEncoded = string.Empty;
                var tempId = _crypto.ConvertStringToHex(peId.ToString(), System.Text.Encoding.Unicode);
                var emmp = _crypto.ConvertStringToHex(empId.ToString(), System.Text.Encoding.Unicode);
                string url = $"/evaluation/{tempId}/{emmp}/";
                _navigation.NavigateTo(url);
            }
        }

    }

}

