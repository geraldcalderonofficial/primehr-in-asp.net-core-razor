@page "/module-workforceplans"
@using DevExpress.Blazor
@using HRMSv4.Client.Interface.Workplan
@using HRMSv4.Shared.Workforceplan
@inject IWorkplan service
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<HRMSv4.Client.Shared.MainComponents.Breadcrumbs HeaderText="Work Plans" Text="Work Plans" Path="/module/workplans" />
<div class="main-card mb-3 card">
    <div class="card-body">
        <div class="row mb-3">
            <div class="w-100">
                <button class="col-md-2 mb-2 mt-2 me-2 btn btn-outline-2x btn-outline-primary float-end" onclick="@PrintVacant">
                    <span class="ladda-label">Print Vacant Status</span>
                </button>
                <button class="col-md-2 mb-2 mt-2 me-2 btn btn-outline-2x btn-outline-primary float-end" onclick="@HandleNewRecord">
                    <span class="ladda-label">+ New</span>
                </button>
            </div>
        </div>
        <DxGrid @ref="MyGrid" Data="_wp"
                KeyFieldName="WorkforcePlanId"
                PagerVisible="true"
                PageSize="5">
            <Columns>
                <DxGridDataColumn FieldName="Year" Width="4rem" DisplayFormat="d" TextAlignment="DevExpress.Blazor.GridTextAlignment.Center" />
                <DxGridDataColumn FieldName="Introduction" />
                <DxGridDataColumn FieldName="MissionStatement" />
                <DxGridDataColumn FieldName="VisionStatement" DisplayFormat="{0:n2}" />
                <DxGridDataColumn FieldName="SeparationDataStaffCount" Width="12rem" />
                <DxGridDataColumn FieldName="SeparationDataReasons" Width="12rem" />
                <DxGridDataColumn FieldName="PreparedBy" />
                <DxGridDataColumn FieldName="ApprovedBy" />
                <DxGridDataColumn TextAlignment="DevExpress.Blazor.GridTextAlignment.Center">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as HRMSv4.Shared.Workforceplan.WorkforceListView);
                        }
                        <button class="border-0 btn-transition btn btn-outline-dark" data-toggle="tooltip" data-placement="left" title="Edit" @onclick="@(args => edit(temp))"><i class="lnr-pencil"></i></button>
                        @*<button class="border-0 btn-transition btn btn-outline-success" data-toggle="tooltip" data-placement="left" title="Approve" disabled @onclick="@(args => approve(temp))"><i class="lnr-checkmark-circle"></i></button>*@
                        <button class="border-0 btn-transition btn btn-outline-primary" data-toggle="tooltip" data-placement="left" title="Print" @onclick="@(args => PrintPlan(temp))"><i class="lnr-printer"></i></button>
                    </CellDisplayTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
    </div>
</div>
@code {
    IGrid? MyGrid { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }

    bool allowCompositeDataCells = false;

    IEnumerable<WorkforceListView> _wp;

    protected override async Task OnInitializedAsync()
    {
        _wp = await service.GetAll();
    }

    async void HandleNewRecord()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                ContentScrollable = true,
            };
        var parameters = new ModalParameters();
        //parameters.Add(nameof(ApplicantsModal.JobVacancyId), es.JobVacancyId);
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.Workforce.WorkforceModal>("Workforce Plan", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (modalResult.Cancelled == false)
        {

        }
    }

    async void PrintVacant()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                ContentScrollable = true,
            };
        var parameters = new ModalParameters();
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.Workforce.WorkForceModals.VacantStatusReportModal>("Print Vacant Position Status", options);
        var modalResult = await _modalStatus.Result;
        if (modalResult.Cancelled == false)
        {

        }
    }

    async void edit(WorkforceListView wp)
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                ContentScrollable = true,
            };
        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.Workforce.WorkforceModal.WorkforcePlanId), wp.WorkforcePlanId);
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.Workforce.WorkforceModal.hasPlanId), false);
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.Workforce.WorkforceModal.PYear), wp.Year);
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.Workforce.WorkforceModal>("Workforce Plan", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (modalResult.Cancelled == true)
        {
            _wp = await service.GetAll();
            this.StateHasChanged();
        }

    }

    async void approve(WorkforceListView wp)
    {
        SweetAlertResult r = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm",
                Text = "Confirming you wish to appoved selected record.",
                Icon = "question",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes"
            });
        if (!string.IsNullOrEmpty(r.Value))
        {
            StateHasChanged();
        }
    }

    async Task PrintPlan(WorkforceListView selectedRow)
    {
        var psgcCode = await localStorage.GetItemAsync<string>("AdminPsgcCode");
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        string username = "";
        username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;

        string param2 = "";
        string arrayOfParemeters = selectedRow.Year.ToString() + "," + psgcCode + "," +userId + "," + username;
        string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

        string url = $"/viewer/{"WorkForcePlanReport"}/{_encryptedParameter}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }
}
