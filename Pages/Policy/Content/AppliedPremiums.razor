@using HRMSv4.Client.Interface.Premiums
@using HRMSv4.Client.Shared.Modals.Premiums
@using DevExpress.Blazor
@using HRMSv4.Shared.HrMgmt
@inject IGeneralPolicy service
@inject SweetAlertService _Swal


<style>
    .form-check-input.custom-control-input {
        width: 4vh !important;
        height: 3vh !important;
    }
</style>

<BusyIndicator Message="Please wait while loading data..." Data="plantillaPremiums">
    <div class="" id="appliedPremiums">
        <div class="row">
            <div class="col-sm-12">
                <div class="card-header">
                    <h5 class="card-header-text">Applied Premiums</h5>
                    <div class="btn-actions-pane-right text-capitalize">
                        <div class="d-inline-block dropdown">
                            <button type="button" data-bs-toggle="dropdown" aria-haspopup="true"
                                    aria-expanded="false" class="btn-shadow dropdown-toggle btn btn-info">
                                <span class="btn-icon-wrapper pe-2 opacity-7">
                                    <i class="fa fa-business-time fa-w-20"></i>
                                </span>
                                Masterdata
                            </button>
                            <div tabindex="-1" role="menu" aria-hidden="true" class="dropdown-menu dropdown-menu-right">
                                <ul class="nav flex-column">
                                    <li class="nav-item">
                                        <a class="nav-link" onclick="@(()=>Masterdata("gsis"))">
                                            <i class="nav-link-icon pe-7s-file"></i>
                                            <span>GSIS</span>
                                        </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" onclick="@(()=>Masterdata("sss"))">
                                            <i class="nav-link-icon pe-7s-file"></i>
                                            <span>SSS</span>
                                        </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" onclick="@(()=>Masterdata("philhealth"))">
                                            <i class="nav-link-icon pe-7s-file"></i>
                                            <span>PhilHealth</span>
                                        </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" onclick="@(()=>Masterdata("hdmf"))">
                                            <i class="nav-link-icon pe-7s-file"></i>
                                            <span>HDMF</span>
                                        </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" onclick="@(()=>Masterdata("tax"))">
                                            <i class="nav-link-icon pe-7s-file"></i>
                                            <span>Withholding Tax</span>
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-block" style="padding:1.25rem">
                    <div class="btn-actions-pane-right float-right text-capitalize" hidden="@hideView">
                        <button class="btn-wide btn-outline-2x me-md-2 btn btn-outline-focus btn-sm" onclick="@ToEdit"><i class="pe-7s-note"></i></button>
                    </div>

                    <h6 class="text-muted text-uppercase font-size-md opacity-7 mb-3 fw-normal">
                        Plantilla
                    </h6>
                    <table class="mb-0 table table-hover" hidden="@hideView">
                        <thead>
                            <tr>
                                <th>Premiums</th>
                                <th>Enabled</th>
                                <th>Deducted to Cut-off</th>
                                <th>Fixed Premium Amount</th>
                                <th>Computation Basis</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in plantillaPremiums)
                            {
                                <tr>
                                    <th scope="row">@item.AppliedPremiumName</th>
                                    <td>
                                        @{
                                            string a = "";
                                            if (@item.IsEnabled.Value) a = "ON";
                                            else a = "OFF";
                                        }
                                        @a
                                    </td>
                                    <td>@item.AppliedCutoff</td>
                                    <td style="text-align:right">@item.FixedPremiumAmount.Value.ToString("n2")</td>
                                    <td>@item.PremiumComputationBasis</td>
                                </tr>
                            }

                        </tbody>
                    </table>
                    <table class="mb-0 table table-hover" hidden="@hideEdit">
                        <thead>
                            <tr>
                                <th>Premiums</th>
                                <th>Enabled</th>
                                <th>Deducted to Cut-off</th>
                                <th>Fixed Premium Amount</th>
                                <th>Computation Basis</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in plantillaPremiums)
                            {
                                <tr>
                                    <th scope="row">@item.AppliedPremiumName</th>
                                    <td style="">
                                        <DxCheckBox CssClass="chkClass" CheckType="CheckType.Switch"
                                                LabelPosition="LabelPosition.Left"
                                                @bind-Checked="@item.IsEnabled"
                                                Alignment="CheckBoxContentAlignment.SpaceBetween">
                                        </DxCheckBox>
                                    </td>
                                    <td>
                                        <DxComboBox Data="@deductedList" @bind-Value="@item.AppliedCutoff" SizeMode="SizeMode.Medium" />
                                    </td>
                                    <td style="text-align:right">
                                        <DxMaskedInput @bind-Value="item.FixedPremiumAmount"
                                                   CssClass="cw-320" SizeMode="SizeMode.Medium"
                                                   Mask="n2">
                                        </DxMaskedInput>
                                    </td>
                                    <td>
                                        <DxComboBox Data="@computationList" @bind-Value="@item.PremiumComputationBasis" SizeMode="SizeMode.Medium" />
                                    </td>
                                </tr>
                            }

                        </tbody>
                    </table>
                    <h6 class="text-muted text-uppercase font-size-md opacity-7 mb-3 fw-normal">
                        Non-Plantilla
                    </h6>
                    <table class="mb-0 table table-hover" hidden="@hideView">
                        <thead>
                            <tr>
                                <th>Premiums</th>
                                <th>Enabled</th>
                                <th>Deducted to Cut-off</th>
                                <th>Fixed Premium Amount</th>
                                <th>Computation Basis</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in nonplantillaPremiums)
                            {
                                <tr>
                                    <th scope="row">@item.AppliedPremiumName</th>
                                    <td>
                                        @{
                                            string a = "";
                                            if (@item.IsEnabled.Value) a = "ON";
                                            else a = "OFF";
                                        }
                                        @a
                                    </td>
                                    <td>@item.AppliedCutoff</td>
                                    <td style="text-align:right">@item.FixedPremiumAmount.Value.ToString("n2")</td>
                                    <td>@item.PremiumComputationBasis</td>
                                </tr>
                            }

                        </tbody>
                    </table>
                    <table class="mb-0 table table-hover" hidden="@hideEdit">
                        <thead>
                            <tr>
                                <th>Premiums</th>
                                <th>Enabled</th>
                                <th>Deducted to Cut-off</th>
                                <th>Fixed Premium Amount</th>
                                <th>Computation Basis</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in nonplantillaPremiums)
                            {
                                <tr>
                                    <th scope="row">@item.AppliedPremiumName</th>
                                    <td>
                                        <DxCheckBox CssClass="chkClass" CheckType="CheckType.Switch"
                                                LabelPosition="LabelPosition.Left"
                                                @bind-Checked="@item.IsEnabled"
                                                Alignment="CheckBoxContentAlignment.SpaceBetween">
                                        </DxCheckBox>
                                    </td>
                                    <td>
                                        <DxComboBox Data="@deductedList" @bind-Value="@item.AppliedCutoff" SizeMode="SizeMode.Medium" />
                                    </td>
                                    <td style="text-align:right">
                                        <DxMaskedInput @bind-Value="item.FixedPremiumAmount"
                                                   CssClass="cw-320" SizeMode="SizeMode.Medium"
                                                   Mask="n2">
                                        </DxMaskedInput>
                                    </td>
                                    <td>
                                        <DxComboBox Data="@computationList" @bind-Value="@item.PremiumComputationBasis" SizeMode="SizeMode.Medium" />
                                    </td>
                                </tr>
                            }

                        </tbody>
                    </table>
                    <div class="" style="display: unset !important;">
                        <div class="float-end mt-5" hidden="@hideEdit">
                            <button type="button" id="next-btn" class="btn-shadow btn-wide me-3 btn btn-outline-secondary" onclick="@Cancel">Cancel</button>
                            <button type="button" id="prev-btn" class="btn-shadow btn-wide btn btn-outline-primary" onclick="@Save">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</BusyIndicator>
@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    bool hideEdit { get; set; } = true;
    bool hideView { get; set; } = false;
    List<string> deductedList = new List<string> { "NONE", "1-15", "16-30" };
    string deductedGsis { get; set; }
    List<string> computationList = new List<string> { "Salary Rate", "Monthly Basic Pay", "Monthly Taxable", "Monthly Gross Salary" };
    string computation { get; set; }
    bool isEnabledGsis { get; set; } = false;

    List<AppliedPremiumsPolicy> plantillaPremiums = new List<AppliedPremiumsPolicy>();
    List<AppliedPremiumsPolicy> nonplantillaPremiums = new List<AppliedPremiumsPolicy>();


    protected override async Task OnInitializedAsync()
    {
        plantillaPremiums = null;
        await Task.Delay(2000); // simulate loading
        var premiums = await service.GetPremiums();
        plantillaPremiums = premiums.Where(a => a.IsPlantilla).ToList();
        nonplantillaPremiums = premiums.Where(a => !a.IsPlantilla).ToList();
    }

    void CheckedChanged(bool value)
    {
        isEnabledGsis = value;
    }

    async void ToEdit()
    {
        hideEdit = false;
        hideView = true;
        StateHasChanged();
    }

    void Cancel()
    {
        hideEdit = true;
        hideView = false;
        StateHasChanged();
    }

    async void Save()
    {
        try
        {
            SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Do you really want to update the applied premiums?",
                    Text = "Warning this action cannot be undone.",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes",
                    CancelButtonText = "No",
                    CancelButtonColor = "#999999"
                });

            if (result.IsConfirmed)
            {
                List<AppliedPremiumsPolicy> premiums = new List<AppliedPremiumsPolicy>();

                premiums.AddRange(plantillaPremiums);
                premiums.AddRange(nonplantillaPremiums);

                AppliedPremiumsModel pre = new AppliedPremiumsModel();

                pre.premiums = premiums;
                pre.UserId = "Ronald";

                var res = await service.UpdateAppliedPremiums(pre);
                if (res.StatusCode == 200)
                {
                    var asd = await service.GetPremiums();
                    plantillaPremiums = premiums.Where(a => a.IsPlantilla).ToList();
                    nonplantillaPremiums = premiums.Where(a => !a.IsPlantilla).ToList();
                     Cancel();
                    await _Swal.FireAsync("Success", res.Value, "success");
                    await ModalInstance.CloseAsync();

                   
                }
                else
                {
                    await _Swal.FireAsync("Oops...", res.Value, "error");
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    async void Masterdata(string temp)
    {
        if (temp == "hdmf")
        {
            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    ContentScrollable = false,
                };

            var _modalStatus = Modal.Show<HdmfMasterdataModal>("HDMF", options);
            var modalResult = await _modalStatus.Result;
            if (modalResult.Cancelled == false)
            {
                //weekList = new List<WeeklyScheduleDay>();
                //weekList = await service.GetAllDays(temp.WeeklyScheduleId);
                //this.StateHasChanged();
            }
        }
        else if (temp == "sss")
        {
            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    ContentScrollable = false,
                };
            var _modalStatus = Modal.Show<SssMasterdataModal>("SSS", options);
            var modalResult = await _modalStatus.Result;
            if (modalResult.Cancelled == false)
            {

            }

        }
        else if (temp == "philhealth")
        {
            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    ContentScrollable = false,
                };
            var _modalStatus = Modal.Show<PhilHealthMasterdataModal>("PhilHealth", options);
            var modalResult = await _modalStatus.Result;
            if (modalResult.Cancelled == false)
            {

            }
        }

        else if (temp == "gsis")
        {
            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    ContentScrollable = false,
                };
            var _modalStatus = Modal.Show<GsisMasterdataModal>("GSIS", options);
            var modalResult = await _modalStatus.Result;
            if (modalResult.Cancelled == false)
            {

            }

        }

        else if (temp == "tax")
        {
            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    ContentScrollable = false,
                };
            var _modalStatus = Modal.Show<WithHoldingMasterdataModal>("WithHolding Tax", options);
            var modalResult = await _modalStatus.Result;
            if (modalResult.Cancelled == false)
            {

            }

        }
    }

}
