@inject IJSRuntime JSRuntime
@inject SweetAlertService _swal
@using HRMSv4.Client.Interface.Payroll
@using HRMSv4.Shared.HrPolicy
@using DevExpress.Blazor
@inject IMultiplier service

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Multiplier
            </h3>
        </div>
    </div>
</div>

<div class="min-card mb-3 card row">
    <div class="card-body mb-4" onbeforeunload="TestDataTablesRemove('#example')" style="margin: 0 auto">
        <div class="col-lg-16" align="right">
            <button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" style="margin-bottom: 10px; width:200px" @onclick="@InsertRow"> Add </button>
        </div>
        <DxGrid @ref="MyGrid" Data="Data"
                ValidationEnabled="false"
                CustomizeEditModel="Grid_CustomizeEditModel"
                EditModelSaving="Grid_EditModelSaving"
                DataItemDeleting="Grid_DataItemDeleting"
                PopupEditFormCssClass="pw-800"
                EditMode="GridEditMode.EditRow"
                PagerVisible="true"
                PageSize="10">
            <Columns>
                <DxGridDataColumn FieldName="DateImplemented" Caption="Date Implemented" TextAlignment="GridTextAlignment.Center">
                <CellDisplayTemplate>
                    @{
                        var temp = (context.DataItem as MultiplierView);
                    }
                    @temp.DateImplemented.ToString("yyyy-MM-dd")
                </CellDisplayTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="Plantilla" Caption="Employment Status" TextAlignment="GridTextAlignment.Center">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as MultiplierView);

                        }
                        @if (temp.IsPlantilla == true)
                        {
                            <label>Plantilla</label>
                        }
                        else
                        {
                            <label>Non-Plantilla</label>
                        }
                    </CellDisplayTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="RegularHoliday" Caption="Regular Holiday" DisplayFormat="P5" TextAlignment="GridTextAlignment.Center" />
                <DxGridDataColumn FieldName="SpecialNonWorkingDay" Caption="Special Non-Working" DisplayFormat="P5" TextAlignment="GridTextAlignment.Center" />
                <DxGridDataColumn FieldName="RegularOT" Caption="Overtime" DisplayFormat="P5" TextAlignment="GridTextAlignment.Center" />
                <DxGridDataColumn FieldName="RestDay" Caption="Rest Day" DisplayFormat="P5" TextAlignment="GridTextAlignment.Center" />
                <DxGridDataColumn FieldName="NightShift" Caption="Night Shift" DisplayFormat="P5" TextAlignment="GridTextAlignment.Center" />
                <DxGridDataColumn FieldName="MultiplierId" Caption="Action" AllowSort="false" TextAlignment="GridTextAlignment.Center" Width="100px">
                    <CellDisplayTemplate>
                        @{
                            var temp = (context.DataItem as MultiplierView);

                        }
                        <button data-bs-toggle="tooltip" data-bs-placement="left" title="Edit" data-bs-original-title="Edit" class="border-0 btn-transition btn btn-outline-success" @onclick="()=> EditRow(temp)"><span class="pe-7s-note"></span></button>
                        <button data-bs-toggle="tooltip" data-bs-placement="left" title="Delete" data-bs-original-title="Delete" class="border-0 btn-transition btn btn-outline-danger" @onclick="()=>DeleteRow((int)context.Value)"><span class="pe-7s-trash"></span></button>
                    </CellDisplayTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
    </div>
</div>

@code {

    object Data { get; set; }
    GridDevExtremeDataSource<MultiplierView> gridDevExtremeDataSource;
    IGrid? MyGrid { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }
    MultiplierView multipliers = new MultiplierView();

    protected override async Task OnInitializedAsync()
    {
        await UpdateAsync();

        gridDevExtremeDataSource = new GridDevExtremeDataSource<MultiplierView>(await service.GetAll());
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            // If underlying data is a large SQL table, specify PrimaryKey and PaginateViaPrimaryKey.
            // This can make SQL execution plans more efficient.
            loadOptions.PrimaryKey = new[] { "MultiplierId" };
            loadOptions.PaginateViaPrimaryKey = true;

        };

    }

    async Task InsertRow()
    {
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.Payroll.MultiplierModal>("Multiplier");
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            await UpdateAsync();
        }

    }

    async Task UpdateAsync()
    {
        gridDevExtremeDataSource = new GridDevExtremeDataSource<MultiplierView>(await service.GetAll());
        Data = gridDevExtremeDataSource;
        MyGrid.Reload();
    }

    async Task EditRow(HRMSv4.Shared.HrPolicy.MultiplierView mt)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.Payroll.MultiplierModal.multiplierView), mt);

        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                Animation = ModalAnimation.FadeIn(0.2),

            };

        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.Payroll.MultiplierModal>("Multipliers", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            //multipliers = await service.GetAll();
            await UpdateAsync();
            this.StateHasChanged();
        }

    }

    async Task DeleteRow(int id)
    {
        try
        {
            SweetAlertResult res = await _swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Are you sure?",
                    Text = "You will not be able to recover this record!",
                    Icon = "warning",
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes, delete it!",
                    CancelButtonText = "No, keep it",
                    CancelButtonColor = "red"
                });

            if (!string.IsNullOrEmpty(res.Value))
            {
                var result = await service.Delete(id);

                if (result.StatusCode == 200)
                {

                    await UpdateAsync();
                    this.StateHasChanged();
                    await _swal.FireAsync(
                                  "Deleted",
                                  "Record has been deleted.",
                                  "success"
                                  );
                }
                else
                {
                    await _swal.FireAsync(
                      "Oops...",
                      "Something went wrong.",
                      "error"
                      );
                }
            }

        }
        catch (Exception)
        {

            throw;
        }
    }

    async Task Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {

    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {

    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {

    }


}