@page "/policies"
@using System.Globalization
@using HRMSv4.Shared.HrPolicy
@inject IGeneralPolicy service
@inject IPlantilla plantillaService
@inject ISalaryGrade sgService

<div class="app-page-title" style="margin-bottom:unset!important">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <h3>
                Policies
            </h3>
        </div>
        
    </div>
</div>
<div class="app-container app-theme-white body-tabs-shadow fixed-header fixed-sidebar">
    <div class="app-header header-shadow">
        <HRMSv4.Client.Shared.MainComponents.Header />
    </div>

        <div class="app-main__outer" style="padding-left:0px!important;">
            <div class="app-main__inner p-0">
                <div class="app-inner-layout chat-layout">
                    <div class="app-inner-layout__wrapper row-fluid g-0">
                        <div class="app-inner-layout__sidebar card" style="background-color:aliceblue">
                            <div class="p-3">
                                <div class="dropdown-menu nav p-0 dropdown-menu-inline dropdown-menu-rounded dropdown-menu-hover-primary">
                                    @foreach (var item in comptypes)
                                    {
                                        @switch (item.Name)
                                        {
                                            case "General":
                                                <a @onclick="() => selected = Array.IndexOf(comptypes, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 active dropdown-item">
                                                    General
                                                </a>
                                                break;
                                            case "JobApplication":
                                                <a @onclick="() => selected = Array.IndexOf(comptypes, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item">
                                                    Job Application
                                                </a>
                                                break;
                                            case "TimeKeeping":
                                                <a @onclick="() => selected = Array.IndexOf(comptypes, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item">
                                                    Time Keeping
                                                </a>
                                                break;
                                            case "AppliedPremiums":
                                                 <a @onclick="() => selected = Array.IndexOf(comptypes, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item">
                                                    Applied Premiums
                                                </a>
                                                break;
                                            case "Leave":
                                                <a @onclick="() => selected = Array.IndexOf(comptypes, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item">
                                                    Leave
                                                </a>
                                                break;
                                            case "Multiplier":
                                                <a @onclick="() => selected = Array.IndexOf(comptypes, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item">
                                                    Multiplier
                                                </a>
                                                break;
                                            case "Holidays":
                                               <a @onclick="() => selected = Array.IndexOf(comptypes, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item">
                                                    Holidays
                                                </a>
                                                break;
                                            case "StepIncrement":
                                                <a @onclick="() => selected = Array.IndexOf(comptypes, item)" data-bs-toggle="tab" tabindex="0" class="mb-1 dropdown-item">
                                                    Step Increment
                                                </a>
                                                break;
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12 app-inner-layout__content card" style="padding: 20px; background-color:#fff">
                            <div class="pb-5 pt-3">
                                <div class="mobile-app-menu-btn mb-3">
                                    <button type="button" class="hamburger hamburger--elastic">
                                        <span class="hamburger-box">
                                            <span class="hamburger-inner"></span>
                                        </span>
                                    </button>
                                </div>
                                <div class="tab-content">
                                    @GetRenderFragment(comptypes[selected])
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
 
</div>


@code {
    DateTime? value = DateTime.Now;

    List<int> Year = new List<int>();
    DateTime defaultNewDate = DateTime.Parse("1900-01-01 00:00:00");
    string userId = string.Empty;

    List<string> _list = new List<string>(new[] { "General", "JobApplication", "TimeKeeping",  "AppliedPremiums", "Leave", "Multiplier", "Holidays", "StepIncrement" });
    int selected { get; set; } = 0;
    RenderFragment GetRenderFragment(Type type)
    {
        RenderFragment renderFragment = renderTreeBuilder =>
        {
            renderTreeBuilder.OpenComponent(0, type);
            renderTreeBuilder.CloseComponent();
        };
        return renderFragment;
    }

    ComponentBase[] components = {
        new Content.General(),
        new Content.JobApplication(),
        new Content.TimeKeeping(),
        new Content.AppliedPremiums(),
        new Content.Leave(),
        new Content.Multiplier(),
        new Content.Holidays(),
        new Content.StepIncrement()
    };

    Type[] comptypes => components.Select(c => c.GetType()).ToArray();

    protected override async Task OnInitializedAsync()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
               
        StateHasChanged();
    }

    void OnChange(DateTime? value, string name, string format)
    {
        //console.Log($"{name} value changed to {value?.ToString(format)}");
    }
}