@using HRMSv4.Client.Interface.Timekeeping
@inherits ComponentBase
@inject IDevices service
@using DevExpress.Blazor
@using HRMSv4.Shared.Timekeeping;
@using Newtonsoft.Json

<div class="mb-2">
    <span style="color:blue;">Station Name:</span> <strong>@device.StationName</strong>
</div>
<DxGrid Data="DetailGridData"
        PageSize="5"
        SelectionMode="GridSelectionMode.Single" AllowSelectRowByClick="true"
        AutoExpandAllGroupRows="true">
    <Columns>
        <DxGridDataColumn FieldName="DeviceType" Caption="Type" GroupIndex="0" />
        <DxGridDataColumn FieldName="FaceScannerType" Width="40%" />
        <DxGridDataColumn FieldName="SerialNumber" />
        <DxGridDataColumn FieldName="DevicePort" />
        <DxGridDataColumn FieldName="StationId" Caption="Action" AllowSort="false" TextAlignment="GridTextAlignment.Center">
            <CellDisplayTemplate>
                @{
                    var temp = (context.DataItem as HRMSv4.Shared.Timekeeping.Device);
                }
                <button data-bs-toggle="tooltip" data-bs-placement="left" title="Edit" data-bs-original-title="Edit record" class="border-0 btn-transition btn btn-outline-success" @onclick="(()=> Edit(temp))"><span class="pe-7s-note"></span></button>
                <button data-bs-toggle="tooltip" data-bs-placement="left" title="Details" data-bs-original-title="Station details" class="border-0 btn-transition btn btn-outline-primary" @onclick="(()=> Details(temp))"><span class="pe-7s-search"></span></button>
                <button data-bs-toggle="tooltip" data-bs-placement="left" title="Delete" data-bs-original-title="Delete record" class="border-0 btn-transition btn btn-outline-danger" @onclick="(()=> Delete(temp))"><span class="pe-7s-trash"></span></button>
                <button data-bs-toggle="tooltip" data-bs-placement="left" title="Sync time" data-bs-original-title="Set device time" class="border-0 btn-transition btn btn-outline-primary" @onclick="()=> SyncTime(temp)"><span class="pe-7s-stopwatch"></span></button>
                <button data-bs-toggle="tooltip" data-bs-placement="left" title="Transfer Register Employee" data-bs-original-title="Set device time" class="border-0 btn-transition btn btn-outline-primary" @onclick="()=> TransferRecords(temp)"><span class="pe-7s-next-2"></span></button>
                <button data-bs-toggle="tooltip" data-bs-placement="left" title="Restart device" data-bs-original-title="Set device time" class="border-0 btn-transition btn btn-outline-danger" @onclick="()=> Restart(temp)"><span class="lnr-undo"></span></button>
            </CellDisplayTemplate>
        </DxGridDataColumn>
    </Columns>
</DxGrid>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public HRMSv4.Shared.Timekeeping.Station device { get; set; }
    object DetailGridData { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Loaddata();
    }

    public class deviceResponse
    {
        public string code { get; set; }
        public string msg { get; set; }
        public string result { get; set; }
        public string success { get; set; }
    }

    async void Loaddata()
    {
        var devices = await service.All();
        DetailGridData = devices
            .Where(i => i.StationId == device.StationId)
            .ToArray();
        StateHasChanged();
    }
    async void Restart(HRMSv4.Shared.Timekeeping.Device _d)
    {
        try
        {
            SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmation",
                    Text = "Confirming you want to restart device.",
                    Icon = "question",
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes",
                    CancelButtonText = "Cancel",
                    CancelButtonColor = "#dc3741"

                });
            if (!string.IsNullOrEmpty(result.Value))
            {
                var http = new HttpClient();

                http.BaseAddress = new Uri("http://" + _d.DeviceIp + ":" + _d.DevicePort + "/");
                http.DefaultRequestHeaders.Accept.Clear();
                http.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                var data = new FormUrlEncodedContent(new[] { new KeyValuePair<string, string>("pass", _d.Password) });

                HttpResponseMessage response = await http.PostAsync("restartDevice", data);
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    async void TransferRecords(HRMSv4.Shared.Timekeeping.Device _d)
    {
        try
        {
            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    ContentScrollable = false,
                };
            var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.TimeKeeping.DeviceSelection>("Select Device", options);
            var modalResult = await _modalStatus.Result;
            if (modalResult.Cancelled == false)
            {
                var resData = modalResult.Data as HRMSv4.Shared.Timekeeping.Device;

                var user = (await _AutService.GetAuthenticationStateAsync()).User;
                string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

                var source = new DataConn
                    {
                        FromDeviceIp = _d.DeviceIp,
                        FromDeviceId = _d.DeviceId,
                        ToDeviceId = resData.DeviceId,
                        ToDeviceIp = resData.DeviceIp,
                        FromPort = int.Parse(_d.DevicePort),
                        FromPass = _d.Password,
                        CreatedBy = userId
                    };

                Response res = await service.TransferData(source);

                if (res.StatusCode == 200)
                {
                    
                    await _Swal.FireAsync("Success", "A list of registered employee from this device has been successfully transfer to selected device.", "success");
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private static readonly DateTime UnixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
    public static long GetCurrentUnixTimestampMillis()
    {
        return (long)(DateTime.UtcNow - UnixEpoch).TotalMilliseconds;
    }

    async void SyncTime(HRMSv4.Shared.Timekeeping.Device _d)
    {
        try
        {
            string devicePort = string.Empty;
            string deviceIP = string.Empty;

            SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmation",
                    Text = "Are you sure you want to sync device time to server time?.",
                    Icon = "question",
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes",
                    CancelButtonText = "Cancel",
                    CancelButtonColor = "#dc3741"

                });
            if (!string.IsNullOrEmpty(result.Value))
            {
                if (string.IsNullOrWhiteSpace(_d.DevicePort))
                {
                    await _Swal.FireAsync("Warning", "Please specify device port.", "warning");
                    return;
                }

                if (string.IsNullOrWhiteSpace(_d.DeviceIp))
                {
                    await _Swal.FireAsync("Warning", "Please specify device IP address.", "warning");
                    return;
                }

                var http = new HttpClient();

                http.BaseAddress = new Uri("http://" + _d.DeviceIp + ":" + _d.DevicePort + "/");
                http.DefaultRequestHeaders.Accept.Clear();
                http.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                long Timestamp = GetCurrentUnixTimestampMillis();

                var data = new FormUrlEncodedContent(new[] { new KeyValuePair<string, string>("pass", _d.Password), new KeyValuePair<string, string>("timestamp", Timestamp.ToString()) });

                HttpResponseMessage response = await http.PostAsync("setTime", data);

                if (response.IsSuccessStatusCode)
                {
                    var stringData = await response.Content.ReadAsStringAsync();
                    var jsonConversion = JsonConvert.DeserializeObject<deviceResponse>(stringData);

                    if (jsonConversion.success == "true")
                    {
                        await _Swal.FireAsync("Success", "A device was successfully sync.", "success");
                    }
                    else
                    {
                        await _Swal.FireAsync("Warning", "Unable to connect to device scanner.", "warning");
                    }
                }
                else
                {
                    await _Swal.FireAsync("Warning", "Unable to connect to device scanner.", "warning");
                }
            }
        }
        catch (Exception e)
        {
            await _Swal.FireAsync("Error", e.Message + " Device is unreachable unable to sync time.", "error");
        }
    }

    async Task Delete(HRMSv4.Shared.Timekeeping.Device _d)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "Do you really want to delete this record? This process cannot be undone.",
                Icon = "question",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });
        if (!string.IsNullOrEmpty(result.Value))
        {
            try
            {
                HttpResponseMessage httres = await service.Delete(_d.DeviceId);
                if (httres.IsSuccessStatusCode)
                {
                    SweetAlertResult sres = await _Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Success",
                            Text = "Selected item was successfully deleted.",
                            Icon = "success",
                            ShowCancelButton = false,
                            ConfirmButtonText = "Ok",
                        });
                    if (!string.IsNullOrEmpty(sres.Value))
                    {
                        Loaddata();
                    }
                }
                else
                {
                    await _Swal.FireAsync("Error", "Something when wrong.", "error");
                }
            }
            catch (Exception e)
            {
                await _Swal.FireAsync("Error", e.Message, "error");
            }
        }
    }

    async Task Details(HRMSv4.Shared.Timekeeping.Device _d)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "You want to show details of this selected station.",
                Icon = "question",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });
        if (!string.IsNullOrEmpty(result.Value))
        {
            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    ContentScrollable = false,
                };
            var parameters = new ModalParameters();
            parameters.Add(nameof(HRMSv4.Client.Shared.Modals.TimeKeeping.Station.CompDevice.DeviceId), _d.DeviceId);
            var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.TimeKeeping.Station.CompDevice>("Device details", parameters, options);
            var modalResult = await _modalStatus.Result;
            if (modalResult.Cancelled == false)
            {
                StateHasChanged();
            }
        }
    }

    async Task Edit(HRMSv4.Shared.Timekeeping.Device _d)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "Are you sure want to edit this record.",
                Icon = "question",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });
        if (!string.IsNullOrEmpty(result.Value))
        {
            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    ContentScrollable = false,
                };
            var parameters = new ModalParameters();
            parameters.Add(nameof(HRMSv4.Client.Shared.Modals.TimeKeeping.Station.CompDevice.DeviceId), _d.DeviceId);
            var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.TimeKeeping.Station.CompDevice>("Edit Device", parameters, options);
            var modalResult = await _modalStatus.Result;
            if (modalResult.Cancelled == false)
            {
                Loaddata();
            }
        }
    }
}