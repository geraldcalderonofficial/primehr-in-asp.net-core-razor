@using DevExpress.Blazor
@using HRMSv4.Client.Interface.Timekeeping
@using HRMSv4.Shared.Timekeeping;
@inject IApprovedLog _approvedlog;

<div class="cw-480 dxbs-preventsel">
    <div class="row">
        <div class="col-6" style="display: flex; flex-wrap: inherit; align-content: center;">
            <div class="row">
                <div id="flyout-overview-target-container" style="margin-left: 10px; display: inline-block;">
                    <DxButton RenderStyle="ButtonRenderStyle.None" Click="() => IsOpen = !IsOpen"> <i class="fa fa-filter" Click="() => IsOpen = !IsOpen"> FILTER LOGS</i></DxButton>
                </div>
            </div>
            <div>
                <DxFlyout @bind-IsOpen=@IsOpen
                          Position=FlyoutPosition.RightStart
                          CloseOnOutsideClick=false
                          HeaderVisible=true
                          FooterVisible=true
                          HeaderText="Filter Logs"
                          PositionTarget="#flyout-overview-target-container"
                          PreventCloseOnPositionTargetClick="true" style="width: 400px; padding 10px;">
                    <BodyTemplate>
                        <div class="p-2 mb-3">
                            @if (IsMobile)
                            {
                                <span class="custom-flyout-header">Poul</span>
                                <span class="custom-flyout-body">Designer</span>
                            }
                            else
                            {
                                <div class="d-block-flex mb-2">
                                    <label class="form-label">From</label>
                                    <DxDateEdit @bind-Date="@FromDateTime"
                                            NullText="Select a date..."
                                            SizeMode="SizeMode.Medium"
                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                            CssClass="cw-320">
                                    </DxDateEdit>
                                </div>
                                <div class="d-block-flex mb-2">
                                    <label class="form-label">To</label>
                                    <DxDateEdit @bind-Date="@ToDateTime"
                                            NullText="Select a date..."
                                            SizeMode="SizeMode.Medium"
                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                            CssClass="cw-320">
                                    </DxDateEdit>
                                </div>
                            }
                        </div>
                    </BodyTemplate>
                    <FooterTextTemplate>
                        <div class="w-100">
                            <DxButton CssClass="float-start" RenderStyle="ButtonRenderStyle.Secondary" Click="() => IsOpen = false" Text="Close"></DxButton>
                            <DxButton CssClass="float-end popup-button" RenderStyle="ButtonRenderStyle.Primary" Text="Submit" Click=@(()=> FilterLogs()) />
                        </div>
                    </FooterTextTemplate>
                </DxFlyout>
            </div>
        </div>
        <div class="col-6">
            @*<div class="input-group float-end w-50 py-3">
                <DxButton IconCssClass="fa fa-search" RenderStyle="ButtonRenderStyle.Secondary" RenderStyleMode="ButtonRenderStyleMode.Outline" />
                <input type="text" class="form-control" placeholder="Search by name" aria-label="Example text with button addon" aria-describedby="button-addon1">
            </div>*@
        </div>
    </div>
</div>
<DxGrid @ref="Grid"
        Data="DetailGridData"
        PageSize="20"
        ShowFilterRow
        SelectionMode="GridSelectionMode.Single" AllowSelectRowByClick="true"
        AutoExpandAllGroupRows="true">
    <Columns>
        <DxGridDataColumn FieldName="ImageName"
                          Caption="Avatar"
                          TextAlignment="GridTextAlignment.Center"
                          Width="5rem"
                          FilterRowEditorVisible="false">
            <CellDisplayTemplate>
                @{
                    var temp = (context.DataItem as HRMSv4.Shared.Timekeeping.ApprovedLogView);
                }
                @if (!string.IsNullOrWhiteSpace(temp.ImageName))
                {
                    if (temp.ImageName == "default-avatar-grey.png")
                    {
                        <div class="avatar-icon-wrapper mb-3 avatar-icon-sm">
                            <div class="avatar-icon">
                                <img src="/images/avatars/default-avatar-grey.png" alt="@temp.FullName">
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="avatar-icon-wrapper mb-3 avatar-icon-sm">
                            <div class="avatar-icon">
                                <img src="Uploads/Employees/FaceImage/Logs/@temp.ImageName" alt="@temp.FullName">
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="avatar-icon-wrapper mb-3 avatar-icon-sm">
                        <div class="avatar-icon">
                            <img src="/images/avatars/default-avatar-grey.png" alt="@temp.FullName">
                        </div>
                    </div>
                }
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FilterRowEditorVisible="false" FieldName="LogDate" Caption="Date" TextAlignment="GridTextAlignment.Center" />
        <DxGridDataColumn FieldName="FullName" Caption="Name" TextAlignment="GridTextAlignment.Left" />
        <DxGridDataColumn FilterRowEditorVisible="false" Caption="Total Hours" TextAlignment="GridTextAlignment.Center">
            <CellDisplayTemplate>
                @{
                    var data = (context.DataItem as ApprovedLogView);
                }
                <label>@decimal.Round(data.TotalHours.Value, 2)</label>
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FilterRowEditorVisible="false" Caption="OTH" TextAlignment="GridTextAlignment.Center">
            <CellDisplayTemplate>
                @{
                    var data = (context.DataItem as ApprovedLogView);
                }
                <label>@decimal.Round(data.OvertimeHours.Value, 2)</label>
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FilterRowEditorVisible="false" Caption="NPH" TextAlignment="GridTextAlignment.Center">
            <CellDisplayTemplate>
                @{
                    var data = (context.DataItem as ApprovedLogView);
                }
                <label>@decimal.Round(data.NightPremiumHours.Value, 2)</label>
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FilterRowEditorVisible="false" Caption="NPOTH" TextAlignment="GridTextAlignment.Center">
            <CellDisplayTemplate>
                @{
                    var data = (context.DataItem as ApprovedLogView);
                }
                <label>@decimal.Round(data.NightPremiumOvertimeHours.Value, 2)</label>
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FilterRowEditorVisible="false" Caption="Remarks" TextAlignment="GridTextAlignment.Center">
            <CellDisplayTemplate>
                @{
                    var data = (context.DataItem as ApprovedLogView);
                }
                <label>@decimal.Round(data.VacationLeaveCreditOffset.Value, 2)</label>
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FilterRowEditorVisible="false" FieldName="IsRegularHoliday" Caption="Regular Holiday" TextAlignment="GridTextAlignment.Center" />
        <DxGridDataColumn FilterRowEditorVisible="false" FieldName="IsWorkingHoliday" Caption="Working Holiday" TextAlignment="GridTextAlignment.Center" />
        <DxGridDataColumn FilterRowEditorVisible="false" FieldName="IsNonWorkingHoliday" Caption="Non Working Holiday" TextAlignment="GridTextAlignment.Center" />
        <DxGridDataColumn FilterRowEditorVisible="false" FieldName="HasAttendedHoliday" Caption="Has Attended Holiday" TextAlignment="GridTextAlignment.Center" />
    </Columns>
</DxGrid>

@code {
    IGrid? Grid { get; set; }
    bool IsOpen { get; set; } = false;
    bool IsMobile { get; set; }

    DateTime? FromDateTime { get; set; } = DateTime.Now;
    DateTime? ToDateTime { get; set; } = DateTime.Now;

    object DetailGridData { get; set; }

    protected override Task OnInitializedAsync()
    {
        FilterLogs();
        return base.OnInitializedAsync();
    }

    async void FilterLogs()
    {
        DetailGridData = await _approvedlog.GetApprovedLogs();
        StateHasChanged();
    }
}
