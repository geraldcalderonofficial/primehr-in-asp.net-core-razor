@using DevExpress.Blazor
@using HRMSv4.Client.Interface.Timekeeping
@using HRMSv4.Shared.Timekeeping
@using Newtonsoft.Json
@inject IDevices _device
@inject IEmployeeLogs _logs
@inject IEmployee _employee

<div class="p-2">
    <div class="row">
        <div class="col-md-6 p-2">

            @* <div id="flyout-overview-target-container" style="margin-left: 10px; display: inline-block;">
            <DxButton RenderStyle="ButtonRenderStyle.None" Click="() => IsOpen = !IsOpen"> <i class="fa fa-filter" Click="() => IsOpen = !IsOpen"> Filter logs</i></DxButton>
            </div>
            <div class="p-2">
            <DxFlyout @bind-IsOpen=@IsOpen
            Position=FlyoutPosition.RightStart
            CloseOnOutsideClick=false
            HeaderVisible=true
            FooterVisible=true
            HeaderText="Filter Logs"
            PositionTarget="#flyout-overview-target-container"
            PreventCloseOnPositionTargetClick="true" style="width: 400px; padding 10px;">
            <BodyTemplate>
            <div class="p-2 mb-3">
            @if (IsMobile)
            {
            <span class="custom-flyout-header">Poul</span>
            <span class="custom-flyout-body">Designer</span>
            }
            else
            {
            <div class="d-block-flex mb-2">
            <label class="form-label">From</label>
            <DxDateEdit @bind-Date="@FromDateTime"
            NullText="Select a date..."
            SizeMode="SizeMode.Medium"
            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
            CssClass="cw-320">
            </DxDateEdit>
            </div>
            <div class="d-block-flex mb-2">
            <label class="form-label">To</label>
            <DxDateEdit @bind-Date="@ToDateTime"
            NullText="Select a date..."
            SizeMode="SizeMode.Medium"
            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
            CssClass="cw-320">
            </DxDateEdit>
            </div>
            <div class="d-block-flex mb-2">
            <label class="form-label">Employment Status</label>
            <DxComboBox Data="@EmpStatus"
            TextFieldName="@nameof(EmploymentStatus.EmploymentStatusName)"
            SizeMode="SizeMode.Medium"
            @bind-Value="@SelectedEmploymentStatus"
            CssClass="cw-480" />
            </div>
            }
            </div>
            </BodyTemplate>
            <FooterTextTemplate>
            <div class="w-100">
            <DxButton CssClass="float-start" RenderStyle="ButtonRenderStyle.Secondary" Click="() => IsOpen = false" Text="Close"></DxButton>
            <DxButton CssClass="float-end popup-button" RenderStyle="ButtonRenderStyle.Primary" Text="Submit" Click=@(()=> FilterLogs()) />
            </div>
            </FooterTextTemplate>
            </DxFlyout>
            </div>*@
        </div>
        <div class="row">
            <div class="col-3">
                <DxComboBox Data="@(new string[] {"Plantilla", "Non-Plantilla"})"
                            @bind-Value="platiliaType"
                            SizeMode="SizeMode.Medium" />
            </div>
            <div class="col-9">
                <div onclick="@GenerateApprovedLogs" class="float-right mb-3"><button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" style="margin-bottom: 10px;"><i class="lnr-thumbs-up" style="color:#5cb85c"> </i> Approved Logs</button></div>
                <div onclick="@GenerateEmployeeLogs" class="float-right mb-3"><button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" style="margin-bottom: 10px;"><i class="lnr-history" style="color:#0275d8"> </i> Employee Logs</button></div>
            </div>
        </div>
    </div>
</div>
<DxGrid @ref="Grid"
        Data="MasterGridData"
        ShowFilterRow="true"
        SelectionMode="GridSelectionMode.Single" AllowSelectRowByClick="true"
        AutoCollapseDetailRow="AutoCollapseDetailRow">
    <Columns>
        <DxGridDataColumn FieldName="ImageName"
                          Caption="Avatar"
                          Width="5%"
                          TextAlignment="GridTextAlignment.Center"
                          FilterRowEditorVisible=false>
            <CellDisplayTemplate>
                @{
                    var temp = (context.DataItem as HRMSv4.Shared.OnBoarding.EmployeeListView);
                }
                @if (!string.IsNullOrWhiteSpace(temp.ImageName))
                {
                    if (temp.ImageName == "default-avatar-grey.png")
                    {
                        <div class="avatar-icon-wrapper mb-3 avatar-icon-sm">
                            <div class="avatar-icon">
                                <img src="/images/avatars/default-avatar-grey.png" alt="@temp.FullName">
                            </div>
                        </div>
                    }
                    else
                    {
                        <a href="javascript:void(0);">
                            <div class="avatar-icon-wrapper mb-3 avatar-icon-sm">
                                <div class="avatar-icon">
                                    <img src="Uploads/Employees/FaceImage/Logs/@temp.ImageName" alt="@temp.FullName">
                                </div>
                            </div>
                        </a>
                    }
                }
                else
                {
                    <div class="avatar-icon-wrapper mb-3 avatar-icon-sm">
                        <div class="avatar-icon">
                            <img src="/images/avatars/default-avatar-grey.png" alt="@temp.FullName">
                        </div>
                    </div>
                }
            </CellDisplayTemplate>
        </DxGridDataColumn>

        <DxGridDataColumn FieldName="EmployeeNumber" Width="10%" Caption="Employee No." TextAlignment="GridTextAlignment.Left" />
        <DxGridDataColumn FieldName="FullName" Caption="Name" TextAlignment="GridTextAlignment.Left" SortIndex="0" />
        <DxGridDataColumn FieldName="Department" Caption="Department" Width="40%" TextAlignment="GridTextAlignment.Left" />
        <DxGridDataColumn FieldName="Designation" Caption="Designation" Width="20%" TextAlignment="GridTextAlignment.Left" />
    </Columns>
    <DetailRowTemplate>
        <SubEmployeeLogs timelogs="(HRMSv4.Shared.OnBoarding.EmployeeListView)context.DataItem" />
    </DetailRowTemplate>
</DxGrid>
@*</div>*@

@code {
    IGrid? Grid { get; set; }
    object MasterGridData { get; set; }
    bool AutoCollapseDetailRow { get; set; }

    IEnumerable<Device> Data { get; set; }

    IEnumerable<EmploymentStatus> EmpStatus { get; set; }
    EmploymentStatus SelectedEmploymentStatus { get; set; }
    IReadOnlyList<object> selectedStations { get; set; }

    bool IsOpen { get; set; } = false;
    bool IsMobile { get; set; }

    Device Value { get; set; }

    //IReadOnlyList<object> selectedStations { get; set; }

    DateTime? FromDateTime { get; set; } = DateTime.Now;
    DateTime? ToDateTime { get; set; } = DateTime.Now;

    GridDevExtremeDataSource<EmployeeListView> gridDevExtremeDataSource;


    string selectedPlatiliaType = "Plantilla";
    string platiliaType
    {
        get { return selectedPlatiliaType; }
        set
        {
            selectedPlatiliaType = value;
            async void handler(string val)
            {
                await setFilter(val);
            }
            handler(value);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await setFilter(selectedPlatiliaType);
    }
    async Task setFilter(string isPlantilla)
    {
        try
        {
            int isPlant = isPlantilla == "Plantilla" ? 1 : 0;
            var user = (await _AutService.GetAuthenticationStateAsync()).User;
            string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value!;
            IsOpen = false;
            var _empLogs = await _employee.GetAllFiltered(isPlant);
            gridDevExtremeDataSource = new GridDevExtremeDataSource<EmployeeListView>(_empLogs.AsQueryable());
            gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
            {
                loadOptions.PrimaryKey = new[] { "EmployeeId" };
                loadOptions.PaginateViaPrimaryKey = true;
            };
            MasterGridData = gridDevExtremeDataSource;
            StateHasChanged();
        }
        catch (Exception)
        {
            throw;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Grid.ExpandDetailRow(0);
        }
    }

    void AutoCollapseDetailRow_Changed(bool newValue)
    {
        AutoCollapseDetailRow = newValue;
        if (newValue)
        {
            Grid.BeginUpdate();
            Grid.CollapseAllDetailRows();
            Grid.ExpandDetailRow(0);
            Grid.EndUpdate();
        }
    }

    async Task FilterLogs()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        IsOpen = false;
        //SelectedEmploymentStatus.ToString()

        var _empLogs = await _employee.GetAll();

        //var _empLogs = await _logs.GetEmployeeLogsFilter(FromDateTime.Value, ToDateTime.Value, userId);

        gridDevExtremeDataSource = new GridDevExtremeDataSource<EmployeeListView>(_empLogs.AsQueryable());
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            // If underlying data is a large SQL table, specify PrimaryKey and PaginateViaPrimaryKey.
            // This can make SQL execution plans more efficient.
            loadOptions.PrimaryKey = new[] { "EmployeeId" };
            loadOptions.PaginateViaPrimaryKey = true;
        };
        MasterGridData = gridDevExtremeDataSource;
        StateHasChanged();
    }

    async void LoadData()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        var _empLogs = await _employee.GetAll();
        //var _empLogs = await _logs.GetEmployeeLogs();

        gridDevExtremeDataSource = new GridDevExtremeDataSource<EmployeeListView>(_empLogs.AsQueryable());
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            // If underlying data is a large SQL table, specify PrimaryKey and PaginateViaPrimaryKey.
            // This can make SQL execution plans more efficient.
            loadOptions.PrimaryKey = new[] { "EmployeeId" };
            loadOptions.PaginateViaPrimaryKey = true;
        };

        MasterGridData = gridDevExtremeDataSource;

        StateHasChanged();
    }

    async void GenerateApprovedLogs()
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Approved Logs",
                Text = "Confirming you want to generate employee approved logs.",
                Icon = "question",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"
            });
        if (!string.IsNullOrEmpty(result.Value))
        {
            try
            {
                var user = (await _AutService.GetAuthenticationStateAsync()).User;
                string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

                Response res = await _logs.GenerateApprovedEmployeeLogs(userId);

                if (res.StatusCode == 200)
                {
                    await _Swal.FireAsync("Success", res.Value, "success");
                }
                else
                {
                    await _Swal.FireAsync("Error", res.Value, "error");
                }
            }
            catch (Exception e)
            {
                await _Swal.FireAsync("Error", "Something Went Wrong!", "error");
                throw;
            }
        }
    }

    async void GenerateEmployeeLogs()
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Employee Logs",
                Text = "Confirming you want to generate employee logs.",
                Icon = "question",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"
            });
        if (!string.IsNullOrEmpty(result.Value))
        {
            try
            {
                var user = (await _AutService.GetAuthenticationStateAsync()).User;
                string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
                var emplogs = await _logs.GenerateEmployeeLogs(userId);
                await _Swal.FireAsync("Success", "", "success");
                //var emplogs = await _employee.GetAll();
                LoadData();
            }
            catch (Exception e)
            {
                throw;
            }
        }
    }

    private static readonly DateTime UnixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
    public static long GetCurrentUnixTimestampMillis()
    {
        return (long)(DateTime.UtcNow - UnixEpoch).TotalMilliseconds;
    }
    public static DateTime DateTimeFromUnixTimestampMillis(long millis)
    {
        return UnixEpoch.AddMilliseconds(millis).ToLocalTime();
    }

    public static DateTime UnixTimeStampToDateTime(double unixTimeStamp)
    {
        // Unix timestamp is seconds past epoch
        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        dateTime = dateTime.AddSeconds(unixTimeStamp).ToLocalTime();
        return dateTime;
    }
}
