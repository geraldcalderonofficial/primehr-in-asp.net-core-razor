@using DevExpress.Blazor
@using HRMSv4.Client.Interface.Timekeeping
@using HRMSv4.Shared.Timekeeping;
@inject IEmployeeLogs _logs

<div class="cw-480 dxbs-preventsel">
    <div class="p-2">
        <div class="row">
            <div class="col-md-6 p-2">
                <div id="flyout-overview-target-container" style="margin-left: 10px; display: inline-block;">
                    <DxButton RenderStyle="ButtonRenderStyle.None" Click="() => IsOpen = !IsOpen"> <i class="fa fa-filter" Click="() => IsOpen = !IsOpen"> FILTER LOGS</i></DxButton>
                </div>
                <div class="p-2">
                    <DxFlyout @bind-IsOpen=@IsOpen
                              Position=FlyoutPosition.RightStart
                              CloseOnOutsideClick=false
                              HeaderVisible=true
                              FooterVisible=true
                              HeaderText="Filter Logs"
                              PositionTarget="#flyout-overview-target-container"
                              PreventCloseOnPositionTargetClick="true" style="width: 400px; padding 10px;">
                        <BodyTemplate>
                            <div class="p-2 mb-3">
                                @if (IsMobile)
                                {
                                    <span class="custom-flyout-header">Poul</span>
                                    <span class="custom-flyout-body">Designer</span>
                                }
                                else
                                {
                                    <div class="d-block-flex mb-2">
                                        <label class="form-label">From</label>
                                        <DxDateEdit @bind-Date="@FromDateTime"
                                                NullText="Select a date..."
                                                SizeMode="SizeMode.Medium"
                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                CssClass="cw-320">
                                        </DxDateEdit>
                                    </div>
                                    <div class="d-block-flex mb-2">
                                        <label class="form-label">To</label>
                                        <DxDateEdit @bind-Date="@ToDateTime"
                                                NullText="Select a date..."
                                                SizeMode="SizeMode.Medium"
                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                CssClass="cw-320">
                                        </DxDateEdit>
                                    </div>
                                    @*                               <div class="d-block-flex mb-2">
                                <label class="form-label">Employment Status</label>
                                <DxComboBox Data="@EmpStatus"
                                TextFieldName="@nameof(EmploymentStatus.EmploymentStatusName)"
                                SizeMode="SizeMode.Medium"
                                @bind-Value="@SelectedEmploymentStatus"
                                CssClass="cw-480" />
                                </div>*@
                                }
                            </div>
                        </BodyTemplate>
                        <FooterTextTemplate>
                            <div class="w-100">
                                <DxButton CssClass="float-start" RenderStyle="ButtonRenderStyle.Secondary" Click="() => IsOpen = false" Text="Close"></DxButton>
                                <DxButton CssClass="float-end popup-button" RenderStyle="ButtonRenderStyle.Primary" Text="Submit" Click=@(()=> FilterLogs()) />
                            </div>
                        </FooterTextTemplate>
                    </DxFlyout>
                </div>
            </div>
            <div class="col-md-6">
                <div @onclick="AddTime" class="mb-3"><button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary float-end" style="margin-bottom: 10px;"><i class="fa fa-plus" style="color:#14A44D"></i> Add</button></div>
            </div>
        </div>
    </div>
</div>
<DxGrid Data="DetailGridData"
        PageSize="20"
        SelectionMode="GridSelectionMode.Single" AllowSelectRowByClick="true"
        AutoExpandAllGroupRows="true">
    <Columns>

        <DxGridDataColumn FieldName="DateLog" Caption="Date" TextAlignment="GridTextAlignment.Center" />
        <DxGridDataColumn FieldName="TimeIn" Caption="Time In" TextAlignment="GridTextAlignment.Center" />
        <DxGridDataColumn FieldName="TimeInImage"
                          Caption="In Image"
                          TextAlignment="GridTextAlignment.Center"
                          FilterRowEditorVisible=false>
            <CellDisplayTemplate>
                @{
                    var temp = (context.DataItem as HRMSv4.Shared.Timekeeping.EmployeeLogView);
                }
                @if (!string.IsNullOrWhiteSpace(temp.TimeInImage))
                {
                    if (temp.TimeInImage == "default-avatar-grey.png")
                    {
                        <div class="avatar-icon-wrapper mb-3 avatar-icon-sm">
                            <div class="avatar-icon">
                                <img src="/images/avatars/default-avatar-grey.png" alt="@temp.Name">
                            </div>
                        </div>
                    }
                    else
                    {

                        <a href="javascript:void(0);" @onclick="@(e => ShowImage("Uploads/Employees/FaceImage/Logs/" + @temp.TimeInImage))">
                            <div class="avatar-icon-wrapper mb-3 avatar-icon-sm">
                                <div class="avatar-icon">
                                    <img src="Uploads/Employees/FaceImage/Logs/@temp.TimeInImage" alt="@temp.Name">
                                </div>
                            </div>
                        </a>
                    }
                }
                else
                {
                    <div class="avatar-icon-wrapper mb-3 avatar-icon-sm">
                        <div class="avatar-icon">
                            <img src="/images/avatars/default-avatar-grey.png" alt="@temp.Name">
                        </div>
                    </div>
                }
            </CellDisplayTemplate>
        </DxGridDataColumn>

        <DxGridDataColumn FieldName="TimeOut" Caption="Time Out" TextAlignment="GridTextAlignment.Center" />
        <DxGridDataColumn FieldName="TimeOutImage"
                          Caption="Out Image"
                          TextAlignment="GridTextAlignment.Center"
                          FilterRowEditorVisible=false>
            <CellDisplayTemplate>
                @{
                    var temp = (context.DataItem as HRMSv4.Shared.Timekeeping.EmployeeLogView);
                }
                @if (!string.IsNullOrWhiteSpace(temp.TimeOutImage))
                {
                    if (temp.TimeInImage == "default-avatar-grey.png")
                    {
                        <div class="avatar-icon-wrapper mb-3 avatar-icon-sm">
                            <div class="avatar-icon">
                                <img src="/images/avatars/default-avatar-grey.png" alt="@temp.Name">
                            </div>
                        </div>
                    }
                    else
                    {
                        <a href="javascript:void(0);" @onclick="@(e => ShowImage("Uploads/Employees/FaceImage/Logs/" + @temp.TimeOutImage))">
                            <div class="avatar-icon-wrapper mb-3 avatar-icon-sm">
                                <div class="avatar-icon">
                                    <img src="Uploads/Employees/FaceImage/Logs/@temp.TimeOutImage" alt="@temp.Name">
                                </div>
                            </div>
                        </a>
                    }
                }
                else
                {
                    <div class="avatar-icon-wrapper mb-3 avatar-icon-sm">
                        <div class="avatar-icon">
                            <img src="/images/avatars/default-avatar-grey.png" alt="@temp.Name">
                        </div>
                    </div>
                }
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="Remarks" Caption="Remarks" TextAlignment="GridTextAlignment.Center" />
        <DxGridDataColumn FieldName="EmployeeLogId" Caption="Action" AllowSort="false" TextAlignment="GridTextAlignment.Center">
            <CellDisplayTemplate>
                @{
                    var temp = (context.DataItem as HRMSv4.Shared.Timekeeping.EmployeeLogView);
                }
                <button data-bs-toggle="tooltip" data-bs-placement="left" title="Edit" data-bs-original-title="Edit record" class="border-0 btn-transition btn btn-outline-success" @onclick="(()=> Edit(temp))"><span class="pe-7s-note"></span></button>
                <button data-bs-toggle="tooltip" data-bs-placement="left" title="Delete" data-bs-original-title="Delete record" class="border-0 btn-transition btn btn-outline-primary" @onclick="(()=> Delete(temp))"><span class="pe-7s-trash"></span></button>
            </CellDisplayTemplate>
        </DxGridDataColumn>
    </Columns>
</DxGrid>

@code {
    [Parameter] public HRMSv4.Shared.OnBoarding.EmployeeListView timelogs { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }

    bool IsOpen { get; set; } = false;
    bool IsMobile { get; set; }

    DateTime? FromDateTime { get; set; } = DateTime.Today;
    DateTime? ToDateTime { get; set; } = DateTime.Today;

    object DetailGridData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var now = DateTime.Now;
        var startOfMonth = new DateTime(now.Year, now.Month, 1);
        var DaysInMonth = DateTime.DaysInMonth(now.Year, now.Month);
        var lastDay = new DateTime(now.Year, now.Month, DaysInMonth);

        /// Causes Error in "logDetails" Filtering
        //FromDateTime = startOfMonth;
        //ToDateTime = lastDay;

        var logDetails = await _logs.GetEmployeeLogsFilter(FromDateTime.Value, ToDateTime.Value, timelogs.EmployeeId);

        DetailGridData = logDetails.Where(i => i.EmployeeId == timelogs.EmployeeId).ToArray();
        StateHasChanged();
    }

    async void ShowImage(string img)
    {
        await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Employee Capture Image",
                ImageUrl = img,
                ImageHeight = 600,
                ImageWidth = 400
            });
    }

    async Task FilterLogs()
    {
        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

        GridDevExtremeDataSource<EmployeeLogView> gridDevExtremeDataSource;

        IsOpen = false;
        //SelectedEmploymentStatus.ToString()

        var _empLogs = await _logs.GetEmployeeLogsFilter(FromDateTime.Value, ToDateTime.Value, timelogs.EmployeeId);

        gridDevExtremeDataSource = new GridDevExtremeDataSource<EmployeeLogView>(_empLogs.AsQueryable());
        gridDevExtremeDataSource.CustomizeLoadOptions = (loadOptions) =>
        {
            // If underlying data is a large SQL table, specify PrimaryKey and PaginateViaPrimaryKey.
            // This can make SQL execution plans more efficient.
            loadOptions.PrimaryKey = new[] { "EmployeeId" };
            loadOptions.PaginateViaPrimaryKey = true;
        };
        DetailGridData = gridDevExtremeDataSource;
        StateHasChanged();
    }

    async void Delete(EmployeeLogView e)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm",
                Text = "Are you sure you want to delete selected time record.",
                Icon = "question",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });
        if (!string.IsNullOrEmpty(result.Value))
        {
            HttpResponseMessage res = await _logs.Delete(e.EmployeeLogId);

            if (res.IsSuccessStatusCode)
            {
                await _Swal.FireAsync("Success", "A record was successfully deleted", "success");
                FilterLogs();
            }
            else
            {
                await _Swal.FireAsync("Error", "Something when wrong.", "error");
            }
        }
    }

    async void Edit(EmployeeLogView e)
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                ContentScrollable = true
            };
        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.TimeKeeping.EditTimeLog.employeeLogView), e);

        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.TimeKeeping.EditTimeLog>("Edit Time Log", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (modalResult.Cancelled == false)
        {
            var now = DateTime.Now;
            var startOfMonth = new DateTime(now.Year, now.Month, 1);
            var DaysInMonth = DateTime.DaysInMonth(now.Year, now.Month);
            var lastDay = new DateTime(now.Year, now.Month, DaysInMonth);

            FromDateTime = startOfMonth;
            ToDateTime = lastDay;

            var logDetails = await _logs.GetEmployeeLogsFilter(FromDateTime.Value, ToDateTime.Value, timelogs.EmployeeId);

            DetailGridData = logDetails.Where(i => i.EmployeeId == timelogs.EmployeeId).ToArray();

            StateHasChanged();
        }
    }

    async void AddTime()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                ContentScrollable = true
            };
        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.TimeKeeping.EditTimeLog.employeeLogView), null);
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.TimeKeeping.EditTimeLog.EmployeeId), timelogs.EmployeeId);

        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.TimeKeeping.EditTimeLog>("Add Time Log", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (modalResult.Cancelled == false)
        {
            var now = DateTime.Now;
            var startOfMonth = new DateTime(now.Year, now.Month, 1);
            var DaysInMonth = DateTime.DaysInMonth(now.Year, now.Month);
            var lastDay = new DateTime(now.Year, now.Month, DaysInMonth);

            FromDateTime = startOfMonth;
            ToDateTime = lastDay;

            var logDetails = await _logs.GetEmployeeLogsFilter(FromDateTime.Value, ToDateTime.Value, timelogs.EmployeeId);

            DetailGridData = logDetails.Where(i => i.EmployeeId == timelogs.EmployeeId).ToArray();

            StateHasChanged();
        }
    }
}
