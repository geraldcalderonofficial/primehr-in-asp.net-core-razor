@page "/tk-stations"
@using DevExpress.Blazor
@using HRMSv4.Client.Interface.Timekeeping
@inject IStations service
@*@implements IDisposable*@
<HRMSv4.Client.Shared.MainComponents.Breadcrumbs HeaderText="Station" Text="Stations" Path="/tk-stations" />

<div class="col-md-12">
    <div class="main-card mb-3 card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-6"></div>
                <div class="col-md-6">
                    <div style="display: flex; float: right;">
                        <div onclick="@NewStation" class=" mb-3"><button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" style="margin-bottom: 10px;"><i class="lnr-laptop-phone" style="color:#14A44D"></i> New Station </button></div>
                        <div onclick="@NewDevice" class=" mb-3"><button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" style="margin-bottom: 10px;"><i class="lnr-tablet" style="color:#E4A11B"></i> New Device</button></div>
                        <div onclick="@RegisterEmployee" class=" mb-3"><button class="mb-2 me-2 btn btn-outline-2x btn-outline-primary" style="margin-bottom: 10px;"><i class="ion-android-contact" style="color:#14A44D"></i> Register Employee</button></div>
                    </div>
                </div>
            </div>
            <DxGrid @ref="Grid" Data="MasterGridData" AutoCollapseDetailRow="AutoCollapseDetailRow" SelectionMode="GridSelectionMode.Single" AllowSelectRowByClick="true">
                <Columns>
                    <DxGridDataColumn FieldName="StationName" SortIndex="0" />
                    <DxGridDataColumn FieldName="RfidReaderType" />
                    <DxGridDataColumn FieldName="BiometricsType" />
                    <DxGridDataColumn FieldName="StationId" Caption="Action" AllowSort="false" TextAlignment="GridTextAlignment.Center">
                        <CellDisplayTemplate>
                            @{
                                var temp = (context.DataItem as HRMSv4.Shared.Timekeeping.Station);
                            }

                            <button data-bs-toggle="tooltip" data-bs-placement="left" title="Edit" data-bs-original-title="Edit record" class="border-0 btn-transition btn btn-outline-success" @onclick="()=> Edit(temp)"><span class="pe-7s-note"></span></button>
                            <button data-bs-toggle="tooltip" data-bs-placement="left" title="Details" data-bs-original-title="Station details" class="border-0 btn-transition btn btn-outline-primary" @onclick="()=> Details(temp)"><span class="pe-7s-search"></span></button>
                            <button data-bs-toggle="tooltip" data-bs-placement="left" title="Delete" data-bs-original-title="Delete record" class="border-0 btn-transition btn btn-outline-danger" @onclick="()=> Delete(temp)"><span class="pe-7s-trash"></span></button>

                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                </Columns>
                <DetailRowTemplate>
                    <DeviceDetails device="(HRMSv4.Shared.Timekeeping.Station)context.DataItem" />
                </DetailRowTemplate>
            </DxGrid>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    IGrid? Grid { get; set; }
    object MasterGridData { get; set; }
    bool AutoCollapseDetailRow { get; set; }

    IReadOnlyList<object> selectedStations { get; set; }

    protected async override Task OnInitializedAsync()
    {
        Loaddata();
    }

    async void Loaddata()
    {
        MasterGridData = await service.All();
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Grid.ExpandDetailRow(0);
        }
    }

    void AutoCollapseDetailRow_Changed(bool newValue)
    {
        AutoCollapseDetailRow = newValue;
        if (newValue)
        {
            Grid.BeginUpdate();
            Grid.CollapseAllDetailRows();
            Grid.ExpandDetailRow(0);
            Grid.EndUpdate();
        }
    }

    async Task Details(HRMSv4.Shared.Timekeeping.Station st)
    {
        //SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
        //    {
        //        Title = "Confirmation",
        //        Text = "You want to show details of this selected station.",
        //        Icon = "question",
        //        ShowCancelButton = true,
        //        ConfirmButtonText = "Yes",
        //        CancelButtonText = "Cancel",
        //        CancelButtonColor = "#dc3741"

        //    });
        //if (!string.IsNullOrEmpty(result.Value))
        //{
            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    ContentScrollable = false,
                };
            var parameters = new ModalParameters();
            parameters.Add(nameof(HRMSv4.Client.Shared.Modals.TimeKeeping.Station.StationDetails.StationId), st.StationId);
            var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.TimeKeeping.Station.StationDetails>("Station details", parameters, options);
            var modalResult = await _modalStatus.Result;
            if (modalResult.Cancelled == false)
            {
                StateHasChanged();
            }
        //}
    }

    async Task Delete(HRMSv4.Shared.Timekeeping.Station st)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "Do you really want to delete this record? This process cannot be undone.",
                Icon = "question",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });
        if (!string.IsNullOrEmpty(result.Value))
        {
            HttpResponseMessage httres = await service.Delete(st.StationId);

            if (httres.IsSuccessStatusCode)
            {
                SweetAlertResult sres = await _Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Success",
                        Text = "Selected item was successfully deleted.",
                        Icon = "success",
                        ShowCancelButton = false,
                        ConfirmButtonText = "Ok",
                    });
                if (!string.IsNullOrEmpty(sres.Value))
                {
                    Loaddata();
                }
            }
            else
            {
                await _Swal.FireAsync("Error", "Something when wrong.", "error");
            }
        }
    }

    async Task Edit(HRMSv4.Shared.Timekeeping.Station st)
    {
        SweetAlertResult result = await _Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "Are you sure want to edit this record.",
                Icon = "question",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "Cancel",
                CancelButtonColor = "#dc3741"

            });
        if (!string.IsNullOrEmpty(result.Value))
        {
            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    ContentScrollable = true,
                };
            var parameters = new ModalParameters();
            parameters.Add(nameof(HRMSv4.Client.Shared.Modals.TimeKeeping.Station.CompStation.StationId), st.StationId);
            var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.TimeKeeping.Station.CompStation>("New Station", parameters, options);
            var modalResult = await _modalStatus.Result;
            if (modalResult.Cancelled == false)
            {
                MasterGridData = await service.All();
                StateHasChanged();
            }
        }
    }

    async void NewDevice()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                ContentScrollable = false,
            };
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.TimeKeeping.Station.CompDevice>("New Device", options);
        var modalResult = await _modalStatus.Result;
        if (modalResult.Cancelled == false)
        {
            MasterGridData = await service.All();
            StateHasChanged();
        }
    }

    async void RegisterEmployee()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                ContentScrollable = false,
            };
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.TimeKeeping.Station.EmployeeRegister>("Register Employee", options);
        var modalResult = await _modalStatus.Result;
        if (modalResult.Cancelled == false)
        {
            StateHasChanged();
        }
    }

    async void NewStation()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                ContentScrollable = false,
            };
        var parameters = new ModalParameters();
        parameters.Add(nameof(HRMSv4.Client.Shared.Modals.TimeKeeping.Station.CompStation.StationId), 0);
        var _modalStatus = Modal.Show<HRMSv4.Client.Shared.Modals.TimeKeeping.Station.CompStation>("New Station", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (modalResult.Cancelled == false)
        {
            MasterGridData = await service.All();
            StateHasChanged();
        }
    }

    //public bool IsGridFiltered()
    //{
    //    return Grid.GetDataColumns().Any(c => c.FilterRowValue != null);
    //}
    //public void Dispose()
    //{
    //    dataLoadedTcs.TrySetCanceled();
    //}
}
