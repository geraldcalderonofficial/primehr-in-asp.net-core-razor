@using HRMSv4.Client.Shared.Modals.Payroll;
@using HRMSv4.Client.Shared.Modals.AppointmentMain;
@using HRMSv4.Client.Shared.Modals.Reports.HrManagement;
@using HRMSv4.Client.Shared.Modals.Reports.Payroll;
@using HRMSv4.Shared.Payroll
@using HRMSv4.Client.Interface.Payroll
@inject ILoanType loanTypeService
@using Microsoft.EntityFrameworkCore;
@inject IJSRuntime JSRuntime
@inject IEmployee empService
@inject IPayrollDate payDateService
@inject IPayrollDate payDateService
@inject ILevelOrganization levelOrganizationService
@inject IEmploymentStatus empStatusService
@inject IPayrollSetting pSettingService

<AuthorizeView Context="ApplicantSidebarItem" Roles="Job Seeker">
    <div class="app-sidebar sidebar-shadow" style="height:unset !important">
        <div class="app-header__logo">
            <div class="logo-src"></div>
            <div class="header__pane ms-auto">
                <div>
                    <button type="button" class="hamburger close-sidebar-btn hamburger--elastic" data-class="closed-sidebar">
                        <span class="hamburger-box">
                            <span class="hamburger-inner"></span>
                        </span>
                    </button>
                </div>
            </div>
        </div>
        <div class="app-header__mobile-menu">
            <div>
                <button type="button" class="hamburger hamburger--elastic mobile-toggle-nav">
                    <span class="hamburger-box">
                        <span class="hamburger-inner"></span>
                    </span>
                </button>
            </div>
        </div>
        <div class="app-header__menu">
            <span>
                <button type="button" class="btn-icon btn-icon-only btn btn-primary btn-sm mobile-toggle-header-nav">
                    <span class="btn-icon-wrapper">
                        <i class="fa fa-ellipsis-v fa-w-6"></i>
                    </span>
                </button>
            </span>
        </div>
        <AuthorizeView Roles="Job Provider, Administrator, Super Administrator">
            <div class="scrollbar-sidebar">
                <div class="app-sidebar__inner">
                    <ul class="vertical-nav-menu">
                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink href="#">
                                <i class="metismenu-icon pe-7s-portfolio"></i>
                                Recruitment
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li>
                                    <NavLink class="nav-link" href="/module-jobvacancy" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Job Vacancy
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/module-applicants" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Applicants
                                    </NavLink>
                                </li>
                            </ul>
                        </li>
                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                <i class="metismenu-icon pe-7s-notebook"></i>
                                Selection
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li>
                                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Qualified Applicants
                                    </NavLink>
                                </li>
                            </ul>
                        </li>
                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink href="#">
                                <i class="metismenu-icon pe-7s-albums"></i>
                                Placement
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li>

                                    <NavLink class="nav-link" href="/placement-newemployees" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        New Employees
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-renewal" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Renewals
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-reemployment" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Reemployment
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-reappointment" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Reappointments
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-reelection" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Re-elections
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-promotion" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Promotions
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-demotion" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Demotions
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Step Increments
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-transfer" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Transfers
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Salary Adjustments
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-separation" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Separations
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Re-classification
                                    </NavLink>
                                </li>
                            </ul>
                        </li>
                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink href="#">
                                <i class="metismenu-icon pe-7s-clock"></i>
                                Learning and Development
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-competency" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Competency Management
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-training" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Trainings
                                    </NavLink>
                                </li>
                            </ul>
                        </li>
                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                <i class="metismenu-icon pe-7s-plugin"></i>
                                Performance Management
                            </NavLink>
                            <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                <i class="metismenu-icon pe-7s-medal"></i>
                                Rewards and Recognition
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-course" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Notice if Step Increment
                                    </NavLink>
                                </li>
                            </ul>
                        </li>
                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink href="#">
                                <i class="metismenu-icon pe-7s-note2"></i>
                                HR Policy
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li class="mm-active">
                                    <NavLink class="nav-link mm-active" href="/masterdata-organizationallevel" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Organizational Level
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-jobcategory" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Job Category
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-position" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Position
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-ratetypes" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Rate Types
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-employmentstatus" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Employment Statuses
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-salarygrade" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Salary Grades
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/module-plantilla" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Plantilla Items
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/module-nonplantilla" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Non-Plantilla Items
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-course" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Courses
                                    </NavLink>
                                </li>

                                <li>
                                    <NavLink class="nav-link" href="/masterdata-eligibility" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Eligibility
                                    </NavLink>
                                </li>

                                <li>
                                    <NavLink class="nav-link" href="/exam-management" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Exam Management
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-disability" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Disability
                                    </NavLink>
                                </li>
                            </ul>
                        </li>
                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink href="#">
                                <i class="metismenu-icon pe-7s-id"></i>
                                HR Management
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-employee" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Employees
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/module-leavemanagement" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Leave Management
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Travel Order
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Permission to Leave
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/module-locatorslip" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Locator Slips
                                    </NavLink>
                                </li>
                            </ul>
                        </li>
                        <AuthorizeView Context="TimeKeepingSideBar" Roles="Super Administrator, Job Provider, Administrator, Timekeeper">
                            <li class="nav-item @GetActive("", NavLinkMatch.All)">
                                <NavLink href="#">
                                    <i class="metismenu-icon pe-7s-clock"></i>
                                    Time keeping
                                    <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                                </NavLink>
                                <ul>
                                    <li>
                                        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                                            <i class="metismenu-icon"></i>
                                            Schedules
                                        </NavLink>
                                    </li>
                                    <li>
                                        <NavLink class="nav-link" href="/tk-stations" Match="NavLinkMatch.All">
                                            <i class="metismenu-icon"></i>
                                            Stations
                                        </NavLink>
                                    </li>
                                    <li>
                                        <NavLink class="nav-link" href="/tk-timelogs" Match="NavLinkMatch.All">
                                            <i class="metismenu-icon"></i>
                                            Logs
                                        </NavLink>
                                    </li>
                                </ul>
                            </li>
                        </AuthorizeView>
                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink href="#">
                                <i class="metismenu-icon pe-7s-cash"></i>
                                Payroll
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li>
                                    <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Payroll
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Pag-ibig Table
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        GSIS Table
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        PhilHealth Table
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        SSS Table
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        WithHolding Tax Table
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Payroll Profiles
                                        <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/module-employeeallowance" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Allowances
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Deductions
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-holiday" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Holidays
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Dump Payroll
                                    </NavLink>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </AuthorizeView>
    </div>
</AuthorizeView>

<AuthorizeView Context="NotApplicantSidebarItem" Roles="Job Provider, Employee, Administrator, Super Administrator">
    <div class="app-sidebar sidebar-shadow">
        <div class="app-header__logo">
            <div class="logo-src"></div>
            <div class="header__pane ms-auto">
                <div>
                    <button type="button" class="hamburger close-sidebar-btn hamburger--elastic" data-class="closed-sidebar">
                        <span class="hamburger-box">
                            <span class="hamburger-inner"></span>
                        </span>
                    </button>
                </div>
            </div>
        </div>
        <div class="app-header__mobile-menu">
            <div>
                <button type="button" class="hamburger hamburger--elastic mobile-toggle-nav">
                    <span class="hamburger-box">
                        <span class="hamburger-inner"></span>
                    </span>
                </button>
            </div>
        </div>
        <div class="app-header__menu">
            <span>
                <button type="button" class="btn-icon btn-icon-only btn btn-primary btn-sm mobile-toggle-header-nav">
                    <span class="btn-icon-wrapper">
                        <i class="fa fa-ellipsis-v fa-w-6"></i>
                    </span>
                </button>
            </span>
        </div>
        <AuthorizeView Roles="Job Provider, Administrator, Super Administrator">
            <div class="scrollbar-sidebar">
                <div class="app-sidebar__inner">
                    <ul class="vertical-nav-menu">
                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink href="#">
                                <i class="metismenu-icon pe-7s-portfolio"></i>
                                Recruitment
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li>
                                    <NavLink class="nav-link" href="/module-staffing-list" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Staffing Plan
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/module-workforceplans" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        WorkforcePlans
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/module-jobvacancy" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Job Vacancy
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/annualrecruitmentplan" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Recruitment Plan
                                    </NavLink>
                                </li>

                                <li>
                                    <NavLink class="nav-link" href="/module-applicants" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Applicants
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/investigation" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Background Investigation
                                    </NavLink>
                                </li>
                            </ul>
                        </li>
                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                <i class="metismenu-icon pe-7s-notebook"></i>
                                Selection
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li>
                                    <NavLink class="nav-link" href="/module-paperevaluation" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Paper Evaluation
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/exam-management" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Exam Management
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/module-applicant-interview" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Interview
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/module-applicantevaluation" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Applicant Evaluation
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/overallresult" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Overall Result
                                    </NavLink>
                                </li>
                            </ul>
                        </li>
                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink href="#">
                                <i class="metismenu-icon pe-7s-albums"></i>
                                Placement
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li>

                                    <NavLink class="nav-link" href="/placement-newemployees" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        New Employees
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-renewal" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Renewals
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-reemployment" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Reemployment
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-reappointment" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Reappointments
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-reelection" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Re-elections
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-promotion" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Promotions
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-demotion" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Demotions
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-stepincrement" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Step Increments
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-transfer" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Transfers
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-salaryadjustment" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Salary Adjustments
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-separation" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Separations
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/placement-reclassification" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Re-classification
                                    </NavLink>
                                </li>
                            </ul>
                        </li>
                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink href="#">
                                <i class="metismenu-icon pe-7s-clock"></i>
                                Learning and Development
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-competency" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Competency Management
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-training" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Trainings
                                    </NavLink>
                                </li>
                            </ul>
                        </li>

                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                <i class="metismenu-icon pe-7s-plugin"></i>
                                Performance Management
                            </NavLink>
                            <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                                <i class="metismenu-icon pe-7s-medal"></i>
                                Rewards and Recognition
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li>
                                    <NavLink class="nav-link" href="/module-noticestepincr" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Notice of Step Increment
                                    </NavLink>
                                </li>
                            </ul>
                        </li>

                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink href="#">
                                <i class="metismenu-icon pe-7s-id"></i>
                                HR Management
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-employee" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Employees
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/module-leavemanagement" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Leave Management
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-travelorder" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Travel Order
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/module-leavepermission" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Permission to Leave
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/module-locatorslip" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Locator Slips
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-audittrail" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Audit Trail
                                    </NavLink>
                                </li>
                            </ul>
                        </li>
                        <AuthorizeView Context="TimeKeepingSideBar" Roles="Super Administrator, Job Provider, Administrator, Timekeeper">
                            <li class="nav-item @GetActive("", NavLinkMatch.All)">
                                <NavLink href="#">
                                    <i class="metismenu-icon pe-7s-clock"></i>
                                    Time keeping
                                    <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                                </NavLink>
                                <ul>
                                    <li>
                                        <NavLink class="nav-link" href="/tk-employeeschedules" Match="NavLinkMatch.All">
                                            <i class="metismenu-icon"></i>
                                            Schedules
                                        </NavLink>
                                    </li>
                                    <li>
                                        <NavLink class="nav-link" href="/tk-stations" Match="NavLinkMatch.All">
                                            <i class="metismenu-icon"></i>
                                            Stations
                                        </NavLink>
                                    </li>
                                    <li>
                                        <NavLink class="nav-link" href="/tk-timelogs" Match="NavLinkMatch.All">
                                            <i class="metismenu-icon"></i>
                                            Logs
                                        </NavLink>
                                    </li>
                                </ul>
                            </li>
                        </AuthorizeView>
                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink href="#">
                                <i class="metismenu-icon pe-7s-cash"></i>
                                Payroll
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li>
                                    <NavLink class="nav-link" href="/module-payrolldate" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Payroll Generation
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/module-payrollprofiles" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Payroll Profiles
                                        <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                                    </NavLink>
                                    <ul>
                                        <li>
                                            <NavLink class="nav-link" href="/module-employeepremium" Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Employee Premiums
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" href="/module-employeeallowance" Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Employee Allowances
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" href="/module-employeewithholdingtax" Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Employee Taxes
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" href="/module-employeededuction" Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Employee Deductions
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" href="/module-employeeloan" Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Employee Loans
                                            </NavLink>
                                        </li>
                                    </ul>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-holiday" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Holidays
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link text-muted" href="#" @onclick=@(() => DumpPayroll()) Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Dump Payroll
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link text-muted" @onclick=@(() => showModalForPayrollSettings()) Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Payroll Settings
                                    </NavLink>
                                </li>
                            </ul>
                        </li>
                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink href="#">
                                <i class="metismenu-icon pe-7s-note2"></i>
                                HR Policy
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-organizationallevel" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Organizational Level
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-jobcategory" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Job Category
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-position" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Position
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-ratetypes" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Rate Types
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-employmentstatus" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Employment Statuses
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-salarygrade" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Salary Grades
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/module-plantilla" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Plantilla Items
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/module-nonplantilla" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Non-Plantilla Items
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-course" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Courses
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-eligibility" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Eligibility
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-disability" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Disability
                                    </NavLink>
                                </li>
                                <li>
                                    <NavLink class="nav-link" href="/masterdata-ethnicity" Match="NavLinkMatch.All">
                                        <i class="metismenu-icon"></i>
                                        Ethnicity
                                    </NavLink>
                                </li>

                            </ul>
                        </li>

                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                            <NavLink href="#">
                                <i class="metismenu-icon lnr-printer"></i>
                                Reports
                                <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                            </NavLink>
                            <ul>
                                <li class="nav-item @GetActive("", NavLinkMatch.All)">
                                    <NavLink href="#">
                                        <i class="metismenu-icon lnr-poop"></i>
                                        Hr Management
                                        <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                                    </NavLink>
                                    <ul>
                                        <li class="nav-item @GetActive("", NavLinkMatch.All)">
                                            <NavLink href="reports-employeemasterlist">
                                                <i class="metismenu-icon lnr-layers"></i>
                                                Master List
                                                <i class="metismenu-state-icon caret-left"></i>
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" href="#" @onclick=@(() => LenghtOfService()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Length of Service Report
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" href="#" @onclick=@(() => PersonnelListing()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Personnel Listing
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" href="#" @onclick=@(() => AgeProfile()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Age Profile Report
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" href="#" @onclick=@(() => EducationalAttainment()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Educational Attainment
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" href="#" @onclick=@(() => RetireableEmployee()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Retireable Employee Report
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" href="#" @onclick=@(() => Separation()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Separation Report
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link text-muted" @onclick=@(() => showModalAppointmentThirtyThreeB()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Appointments
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" href="#" @onclick=@(() => VacantPositions()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Vacant Positions
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" href="#" @onclick=@(() => PlantillaVacancy()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Plantilla Vacancy
                                            </NavLink>
                                        </li>
                                    </ul>
                                </li>

                                <li class="nav-item @GetActive("", NavLinkMatch.All)">
                                    <NavLink href="#">
                                        <i class="metismenu-icon lnr-clock"></i>
                                        Time keeping
                                        <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                                    </NavLink>
                                    <ul>
                                        <li>
                                            <NavLink class="nav-link" href="/masterdata-organizationallevel" Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Organizational Level
                                            </NavLink>
                                        </li>
                                    </ul>
                                    <ul>
                                        <li>
                                            <NavLink class="nav-link" href="#" @onclick=@(() => DTRreport()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                DTR Report
                                            </NavLink>
                                        </li>
                                    </ul>
                                </li>

                                <li class="nav-item @GetActive("", NavLinkMatch.All)">
                                    <NavLink href="#">
                                        <i class="metismenu-icon lnr-layers"></i>
                                        Payroll
                                        <i class="metismenu-state-icon pe-7s-angle-down caret-left"></i>
                                    </NavLink>
                                    <ul>
                                        <li>
                                            <NavLink class="nav-link" href="/masterdata-organizationallevel" Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Organizational Level
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" Match="NavLinkMatch.All" onclick="@showModalForPersonnelPremium">
                                                <i class="metismenu-icon"></i>
                                                Personnel Premiums
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" href="#" @onclick=@(() => gsisContribution()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Gsis Contribution
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" href="#" @onclick=@(() => gsisLoans()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Gsis Premium Loans
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" Match="NavLinkMatch.All" onclick="@showModalforPagibigContribution">
                                                <i class="metismenu-icon"></i>
                                                Pagibig Contribution
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link text-muted" Match="NavLinkMatch.All" @onclick=@(() => PagibigLoanReport())>
                                                <i class="metismenu-icon"></i>
                                                Pagibig Loan
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" href="#" onclick="@showModalforSSSContribution" Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                SSS Remittance
                                            </NavLink>
                                        </li>

                                        <li>
                                            <NavLink class="nav-link" href="#" @onclick=@(() => philhealthContribution()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Philhealth Contribution
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link text-muted" @onclick=@(() => showModalForPayrollValidation()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Payroll Validation
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link text-muted" @onclick=@(() => showModalForPayrollSummary()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Payroll Summary
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link text-muted" @onclick=@(() => ShowModalForGeneralPayroll()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                General Payroll
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link text-muted" @onclick=@(() => ShowModalForLoansPremium()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Loans and Premiums
                                            </NavLink>
                                        </li>
                                        <li>
                                            <NavLink class="nav-link" href="#" @onclick=@(() => ShowOtherLoansModal()) Match="NavLinkMatch.All">
                                                <i class="metismenu-icon"></i>
                                                Other Loans
                                            </NavLink>
                                        </li>
                                    </ul>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </AuthorizeView>
    </div>
</AuthorizeView>

@code {
    [Inject]
    NavigationManager NavigationManager { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }
    IEnumerable<HRMSv4.Shared.Payroll.LoanType> loanTypes = new List<HRMSv4.Shared.Payroll.LoanType>();

    string sortby { get; set; }
    string deptId { get; set; }
    string empStatId { get; set; }

    string reportServiceUrl { get; set; }

    protected override void OnInitialized() => NavigationManager.LocationChanged += (s, e) => StateHasChanged();

    bool IsActive(string href, NavLinkMatch navLinkMatch = NavLinkMatch.Prefix)
    {
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).ToLower();
        return navLinkMatch == NavLinkMatch.All ? relativePath == href.ToLower() : relativePath.StartsWith(href.ToLower());
    }

    string GetActive(string href, NavLinkMatch navLinkMatch = NavLinkMatch.Prefix) => IsActive(href, navLinkMatch) ? "active" : "#";


    //Temporary lang po muna ito possible po na mailipat sa ibang page sa mga susunod:)
    async Task showModalForPersonnelPremium()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };
        var personnelPremiumModal = Modal.Show<EmployeePremModal>("Personnel Premiums");

        var result = await personnelPremiumModal.Result;
        if (!result.Cancelled)
        {

        }
    }



    async Task showModalforPagibigContribution()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };
        var pagibigContribution = Modal.Show<HRMSv4.Client.Shared.Modals.PagibigContributionModal>("Pag-ibig Premium Contribution / Remittance");

        var result = await pagibigContribution.Result;
        if (!result.Cancelled)
        {

        }
    }

    async Task showModalforSSSContribution()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };
        var sssContribution = Modal.Show<HRMSv4.Client.Shared.Modals.SSSContribution>("SSS Remittance");

        var result = await sssContribution.Result;
        if (!result.Cancelled)
        {
        }
    }

    async Task showModalForPayrollValidation()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };
        var payrollValidation = Modal.Show<HRMSv4.Client.Shared.Modals.PayrollValidationModal>("Payroll Validation");

        var result = await payrollValidation.Result;
        if (!result.Cancelled)
        {

        }
    }

    async Task Separation()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };
        var separationReport = Modal.Show<HRMSv4.Client.Shared.Modals.SeparationReportModal>("Separation Report");

        var result = await separationReport.Result;
        if (!result.Cancelled)
        {

        }
    }

    async Task showModalAppointmentThirtyThreeB()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };

        var _modalStatus = Modal.Show<AppointmentsReportMainModal>("Appointment", options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            var parameters = modalResult.Data as HRMSv4.Shared.Report.AppointmentModelReportParam;

            int year = Convert.ToDateTime(parameters.forms.Split('.')[0]).Year;
            int month = Convert.ToDateTime(parameters.forms.Split('.')[1]).Month;

            string govName = parameters.forms.Split('.')[2];
            string govPos = parameters.forms.Split('.')[3];
            string formType = parameters.forms.Split('.')[10];

            string tempPrepBy = parameters.forms.Split('.')[4];
            string prepBy = tempPrepBy.Replace(",", "#");
            string prepByPos = parameters.forms.Split('.')[5];

            string tempNotedBy = parameters.forms.Split('.')[8];
            string NotedBy = tempNotedBy.Replace(",", "#");
            string NotedByPos = parameters.forms.Split('.')[9];

            string tempCertBy = parameters.forms.Split('.')[6];
            string certBy = tempCertBy.Replace(",", "#");
            string certByPos = parameters.forms.Split('.')[7];

            var psgcCode = localStorage.GetItem<string>("AdminPsgcCode");

            //string[] arrayOfParemeters = { psgcCode, data.RequestedByName.Replace(", ", "$"), data.RequestedByPosition, data.ReportDate.Date.ToString(),
            //    data.SendingDate.Date.ToString(), data.Signatory2Name.Replace(", ", "$"), data.Signatory2Position, data.Signatory2Detail1, data.Signatory2Detail2 };

            if (formType.ToLower() == "cs form 2 (rai)" || formType.ToLower() == "csform2rai")
            {
                reportServiceUrl = "CsForm2Rai";

            }
            else
            {
                if (formType.ToLower() == "accessionreportform2")
                {
                    reportServiceUrl = "AccessionReportForm2";
                }
                else
                {
                    reportServiceUrl = "AccessionReport";
                }

            }

            var user = (await _AutService.GetAuthenticationStateAsync()).User;

            string username = "";

            username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;

            string reportparam = (formType.ToLower() == "cs form 2 (rai)" || formType.ToLower() == "csform2rai" || formType.ToLower() == "accessionreportform2") ? string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", year, month, govName, govPos, certBy, certByPos, username) : string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}", year, month, prepBy, prepByPos, NotedBy, NotedByPos, username);

            string arrayOfParameter = string.Format("{0}", reportparam);


            string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParameter, System.Text.Encoding.Unicode);
            string url = $"/viewer/{@reportServiceUrl}/{_encryptedParameter}";
            await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        }
    }

    async Task showModalForPayrollSettings()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };
        var payrollSettings = Modal.Show<HRMSv4.Client.Shared.Modals.Payroll.PayrollSettingsModal>("Payroll Settings");

        var result = await payrollSettings.Result;
        if (!result.Cancelled)
        {

        }
    }

    async Task LenghtOfService()
    {
        var psgcCode = localStorage.GetItem<string>("AdminPsgcCode");

        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        string username = "";
        username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;

        string arrayOfParemeters = string.Format("{0};{1}", psgcCode, username);
        string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

        string url = $"/viewer/LengthOfServiceReport/{_encryptedParameter}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    async Task AgeProfile()
    {
        var psgcCode = localStorage.GetItem<string>("AdminPsgcCode");

        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        string username = "";
        username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;

        string arrayOfParemeters = string.Format("{0};{1}", psgcCode, username);
        string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

        string url = $"/viewer/AgeProfileReport/{_encryptedParameter}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    async Task EducationalAttainment()
    {
        var psgcCode = localStorage.GetItem<string>("AdminPsgcCode");

        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        string username = "";
        username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;

        string arrayOfParemeters = string.Format("{0};{1}", psgcCode, username);
        string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

        string url = $"/viewer/EducationalAttainments/{_encryptedParameter}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    async Task RetireableEmployee()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };
        var retireableEmployee = Modal.Show<HRMSv4.Client.Shared.Modals.RetireableEmployeeReportModal>("Retireable Employee Report", options);

        var result = await retireableEmployee.Result;
        if (!result.Cancelled)
        {
            var parameter = result.Data as HRMSv4.Shared.Report.ReportParameters;

            var age = parameter.formValue;

            var psgcCode = localStorage.GetItem<string>("AdminPsgcCode");

            var user = (await _AutService.GetAuthenticationStateAsync()).User;
            string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
            string username = "";
            username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;

            string arrayOfParemeters = string.Format("{0};{1};{2}", psgcCode, username, age);
            string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

            string url = $"/viewer/RetireableEmployeeList/{_encryptedParameter}";
            await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        }
    }

    async Task PersonnelListing()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };
        var personnelListing = Modal.Show<HRMSv4.Client.Shared.Modals.Payroll.PersonnelListingReportModal>("Personnel Listing", options);

        var result = await personnelListing.Result;
        if (!result.Cancelled)
        {
            var parameters = result.Data as HRMSv4.Shared.Report.ReportParameters;

            var dept = parameters.Department;

            var depthere = await levelOrganizationService.GetAll();
            var dep = depthere.Where(c => c.Name == dept).FirstOrDefault();
            var deptId = dep.LevelOrganizationId.ToString();

            var psgcCode = localStorage.GetItem<string>("AdminPsgcCode");

            var user = (await _AutService.GetAuthenticationStateAsync()).User;
            string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
            string username = "";
            username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;

            string arrayOfParemeters = string.Format("{0};{1};{2}", psgcCode, username, deptId);
            string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

            string url = $"/viewer/PersonnelListings/{_encryptedParameter}";
            await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        }
    }

    async Task gsisLoans()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };
        var gsisContribution = Modal.Show<HRMSv4.Client.Shared.Modals.Payroll.PremiumContributions.GsisContibutionModal>("GSIS Premium Loans", options);

        var result = await gsisContribution.Result;
        if (!result.Cancelled)
        {
            var parameters = result.Data as HRMSv4.Shared.Report.ReportParameters;

            var date = parameters.formValue;
            var paydates = await payDateService.GetAllPayrollDates();
            var dates = paydates.Where(a => a.PayrollDateReflection.Date.ToString("MMMM yyyy").ToLower() == date.ToLower()).FirstOrDefault();
            var payDate = dates.PayrollDateId.ToString();

            var dept = parameters.Department;
            var fType = parameters.FundingType;

            //get level organization id for department
            if (dept != null)
            {
                if (dept == "ALL")
                {
                    deptId = dept;
                }
                else
                {
                    var emp = await empService.GetListEmployee(0, "All", 0);
                    var department = emp.Where(a => a.Department == dept).FirstOrDefault();
                    deptId = department.OrganzationLevelId.ToString();
                }
            }
            else
            {
                var orgs = await levelOrganizationService.GetAll();
                var department = orgs.Where(a => a.FundingType == fType).ToList();
            }

            //get level organization id for funding type
            var fundT = await levelOrganizationService.GetAll();

            var psgcCode = localStorage.GetItem<string>("AdminPsgcCode");

            var user = (await _AutService.GetAuthenticationStateAsync()).User;
            string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

            string username = "";
            username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;

            string reportparam = string.Format("{0}:{1}:{2}", payDate, fType, deptId);
            string psgcUser = string.Format("{0};{1}", psgcCode, username);
            string arrayOfParemeters = string.Format("{0}${1}", psgcUser, reportparam);
            string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

            string url = $"/viewer/GsisPremiumLoans/{_encryptedParameter}";
            await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        }
    }

    async Task DTRreport()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };
        var DailyTimeRecord = Modal.Show<HRMSv4.Client.Shared.Modals.DailyTimeRecord.DailyTimeRecord02Modal>("Daily Time Record", options);

        var result = await DailyTimeRecord.Result;
        if (!result.Cancelled)
        {
            var parameters = result.Data as HRMSv4.Shared.Report.ReportParameters;

            var employees = parameters.formValue;
            var date = parameters.Date;

            var psgcCode = localStorage.GetItem<string>("AdminPsgcCode");
            var user = (await _AutService.GetAuthenticationStateAsync()).User;
            string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
            string username = "";
            username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;

            string dtrdetails = string.Format("{0}|{1}", employees, date);

            string psgcUser = string.Format("{0};{1}", psgcCode, username);

            string arrayOfParemeters = string.Format("{0}${1}", psgcUser, dtrdetails);
            string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

            string url = $"/viewer/DailyTimeRecord02/{_encryptedParameter}";
            await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        }
    }

    async Task gsisContribution()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };
        var gsisContribution = Modal.Show<HRMSv4.Client.Shared.Modals.Payroll.PremiumContributions.GsisContibutionModal>("GSIS Premium Contribution", options);

        var result = await gsisContribution.Result;
        if (!result.Cancelled)
        {
            var parameters = result.Data as HRMSv4.Shared.Report.ReportParameters;

            var date = parameters.formValue;
            var paydates = await payDateService.GetAllPayrollDates();
            var dates = paydates.Where(a => a.PayrollDateReflection.Date.ToString("MMMM yyyy").ToLower() == date.ToLower()).FirstOrDefault();
            var payDate = dates.PayrollDateId.ToString();

            var dept = parameters.Department;
            var fType = parameters.FundingType;

            //get level organization id for department
            if (dept != null)
            {
                if (dept == "ALL")
                {
                    deptId = dept;
                }
                else
                {
                    var emp = await empService.GetListEmployee(0, "All", 0);
                    var department = emp.Where(a => a.Department == dept).FirstOrDefault();
                    deptId = department.OrganzationLevelId.ToString();
                }
            }
            else
            {
                var orgs = await levelOrganizationService.GetAll();
                var department = orgs.Where(a => a.FundingType == fType).ToList();
            }

            //get level organization id for funding type
            var fundT = await levelOrganizationService.GetAll();

            var psgcCode = localStorage.GetItem<string>("AdminPsgcCode");

            var user = (await _AutService.GetAuthenticationStateAsync()).User;
            string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

            string username = "";
            username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;

            string reportparam = string.Format("{0}:{1}:{2}", payDate, fType, deptId);
            string psgcUser = string.Format("{0};{1}", psgcCode, username);
            string arrayOfParemeters = string.Format("{0}${1}", psgcUser, reportparam);
            string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

            string url = $"/viewer/GsisPremiumContribution/{_encryptedParameter}";
            await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        }
    }

    async Task philhealthContribution()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };
        var philhealthContribution = Modal.Show<HRMSv4.Client.Shared.Modals.Payroll.PremiumContributions.PhilhealthContributionModal>("Philhealth Premium Contribution", options);

        var result = await philhealthContribution.Result;
        if (!result.Cancelled)
        {
            var parameters = result.Data as HRMSv4.Shared.Report.ReportParameters;

            var date = parameters.formValue.Split(';')[0];
            var reportType = parameters.formValue.Split(';')[1];
            var employmentStatus = parameters.formValue.Split(';')[2];
            var paydates = await payDateService.GetAllPayrollDates();
            var dates = paydates.Where(a => a.PayrollDateReflection.Date.ToString("MMMM yyyy").ToLower() == date.ToLower()).FirstOrDefault();
            var payDate = dates.PayrollDateId.ToString();

            var dept = parameters.Department;
            var fType = parameters.FundingType;

            //get employmentStatusId
            var status = await empStatusService.GetAll();
            var statusList = status.Where(a => a.EmploymentStatusName == employmentStatus).FirstOrDefault();
            var empStatus = statusList.EmploymentStatusId.ToString();

            var psgcCode = localStorage.GetItem<string>("AdminPsgcCode");

            var user = (await _AutService.GetAuthenticationStateAsync()).User;
            string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

            string username = "";
            username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;

            if (reportType.ToLower() == "employee")
            {
                reportServiceUrl = "PhilhealthContributionEmployee";
                //get level organization id for department
                if (dept != null)
                {
                    if (dept == "ALL")
                    {
                        deptId = dept;
                    }
                    else
                    {
                        var emp = await empService.GetListEmployee(0, "All", 0);
                        var department = emp.Where(a => a.Department == dept).FirstOrDefault();
                        deptId = department.OrganzationLevelId.ToString();
                    }
                }
                else
                {
                    var orgs = await levelOrganizationService.GetAll();
                    var department = orgs.Where(a => a.FundingType == fType).ToList();
                }
            }
            else
            {
                reportServiceUrl = "PhilhealthContributionDepartment";

                var orgs = await levelOrganizationService.GetAll();
                var department = orgs.ToList();
            }

            string reportparam = reportType.ToLower() == "employee" ? string.Format("{0}:{1}:{2}:{3}", empStatus, payDate, fType, deptId) : string.Format("{0}:{1}", empStatus, payDate);
            string psgcUser = string.Format("{0};{1}", psgcCode, username);
            string arrayOfParemeters = string.Format("{0}${1}", psgcUser, reportparam);
            string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

            string url = $"/viewer/{@reportServiceUrl}/{_encryptedParameter}";
            await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        }
    }

    async Task PagibigLoanReport()
    {
        try
        {
            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true
                };
            var PagibigLoan = Modal.Show<HRMSv4.Client.Shared.Modals.PagibigLoanReportModal>("Pag-ibig Loan Contribution", options);

            var result = await PagibigLoan.Result;
            if (!result.Cancelled)
            {
                var parameters = result.Data as HRMSv4.Shared.Report.ReportParameters;

                var date = parameters.formValue.Split('.')[0];
                var reportType = parameters.formValue.Split(".")[1];
                var employmentStatusVal = parameters.formValue.Split(".")[2];
                var signatory = parameters.formValue.Split(".")[3];
                var position = parameters.formValue.Split(".")[4];

                var signature = signatory.Replace(",", "0");
                signatory = signature.Replace(" ", "9");

                var positionhere = position.Replace(" ", "9");
                position = positionhere.Replace(" ", "9");

                var signatorydetails = string.Format("{0}/{1}", signatory, position);

                var paydates = await payDateService.GetAllPayrollDates();
                var dates = paydates.Where(a => a.PayrollDateReflection.Date.ToString("MMMM yyyy").ToLower() == date.ToLower()).FirstOrDefault();
                var payDate = dates.PayrollDateId.ToString();

                var dept = parameters.Department;
                var fType = parameters.FundingType;


                //get employmentStatusId
                var status = await empStatusService.GetAll();
                var statusList = status.Where(a => a.EmploymentStatusName == employmentStatusVal).FirstOrDefault();
                var empStatus = statusList.EmploymentStatusId.ToString();

                var psgcCode = localStorage.GetItem<string>("AdminPsgcCode");

                var user = (await _AutService.GetAuthenticationStateAsync()).User;
                string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

                string username = "";

                username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;

                if (reportType.ToLower() == "employee")
                {
                    reportServiceUrl = "PagibigLoanEmployee";
                    //get level organization id for department
                    if (dept != null)
                    {
                        if (dept == "ALL")
                        {
                            deptId = dept;
                        }
                        else
                        {
                            //var emp = await empService.GetListEmployee(0, "All", 0);
                            //var department = emp.Where(a => a.Department == dept).FirstOrDefault();
                            deptId = dept;
                        }
                    }
                    else
                    {
                        var orgs = await levelOrganizationService.GetAll();
                        var department = orgs.Where(a => a.FundingType == fType).ToList();
                    }
                }
                else
                {
                    reportServiceUrl = "PagibigLoanDepartment";

                    var orgs = await levelOrganizationService.GetAll();
                    var department = orgs.ToList();
                }

                string reportparam = reportType.ToLower() == "employee" ? string.Format("{0}:{1}:{2}:{3}:{4}:{5}", empStatus, payDate, fType, deptId, signatory, positionhere) : string.Format("{0}:{1}:{2}:{3}", empStatus, payDate, signatory, positionhere);
                string psgcUser = string.Format("{0};{1}", psgcCode, username);
                string arrayOfParemeters = string.Format("{0}${1}", psgcUser, reportparam);
                string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);

                string url = $"/viewer/{@reportServiceUrl}/{_encryptedParameter}";
                await JSRuntime.InvokeAsync<object>("open", url, "_blank");
            }
        }
        catch (Exception ex)
        {

            throw;
        }

    }

    async Task DumpPayroll()
    {
        try
        {
            var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true
                };
            var DumpPayroll = Modal.Show<HRMSv4.Client.Shared.Modals.Payroll.DumpPayroll>("Dump Payroll", options);

            var result = await DumpPayroll.Result;
            if (!result.Cancelled)
            {

            }
        }
        catch (Exception ex)
        {

            throw;
        }

    }

    async Task VacantPositions()
    {
        var psgcCode = localStorage.GetItem<string>("AdminPsgcCode");

        var user = (await _AutService.GetAuthenticationStateAsync()).User;
        //string givenName = user.FindFirst(c => c.Type.Contains("GivenName"))?.Value;

        //string givenName = user.FindFirst(c => c.Type.Contains("GivenName"))?.Value;
        string temp = user.FindFirst(c => c.Type.Contains("FullName"))?.Value;

        string username = temp.Replace(", ", "$");

        if (temp == "") username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;

        string arrayOfParemeters = psgcCode + "," + username;
        string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParemeters, System.Text.Encoding.Unicode);
        string url = $"/viewer/{"HrVacantPositionStatusReport"}/{_encryptedParameter}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");

    }

    async Task PlantillaVacancy()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                //Animation = ModalAnimation.FadeIn(0.2),
                ContentScrollable = true,
            };

        var _modalStatus = Modal.Show<PlantillaVacancyReportModal>("Plantilla Vacancy Report", options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            var data = modalResult.Data as PlantillaVacantPositionModel;

            var psgcCode = localStorage.GetItem<string>("AdminPsgcCode");

            //string[] arrayOfParemeters = { psgcCode, data.RequestedByName.Replace(", ", "$"), data.RequestedByPosition, data.ReportDate.Date.ToString(),
            //    data.SendingDate.Date.ToString(), data.Signatory2Name.Replace(", ", "$"), data.Signatory2Position, data.Signatory2Detail1, data.Signatory2Detail2 };

            string arrayOfParameter = string.Format("{0}#{1}#{2}#{3}#{4}#{5}#{6}#{7}#{8}", psgcCode, data.RequestedById, "0", data.ReportDate.Date.ToString("yyyy MM dd"),
                data.SendingDate.Date.ToString("yyyy MM dd"), data.Signatory2Id, "0", data.Signatory2Detail1, data.Signatory2Detail2);

            string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParameter, System.Text.Encoding.Unicode);
            string url = $"/viewer/{"PlantillaVacancyReport"}/{_encryptedParameter}";
            await JSRuntime.InvokeAsync<object>("open", url, "_blank");

        }
    }

    async Task showModalForPayrollSummary()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                //Animation = ModalAnimation.FadeIn(0.2),
                ContentScrollable = true,
            };

        var _modalStatus = Modal.Show<PayrollSummaryReportModal>("Payroll Summary Report", options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            var data = modalResult.Data as PayrollSummaryModel;
            var psgcCode = localStorage.GetItem<string>("AdminPsgcCode");

            string arrayOfParameter = string.Format("{0}#{1}#{2}#{3}", psgcCode, data.EmployeeId, data.Period.ToString("yyyy-MM-dd"), data.CutOff);

            string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParameter, System.Text.Encoding.Unicode);
            string url = $"/viewer/{"PayrollSummaryReport"}/{_encryptedParameter}";
            await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        }
    }

    async Task ShowModalForGeneralPayroll()
    {
        var selected = await pSettingService.GetPayrollSetting();

        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                //Animation = ModalAnimation.FadeIn(0.2),
                ContentScrollable = true,
            };
        var parameters = new ModalParameters();
        parameters.Add(nameof(PrintGeneralPayrollModal.format), selected.GeneralPayrollFormat);
        var _modalStatus = Modal.Show<PrintGeneralPayrollModal>("General Payroll Selection", parameters, options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            var data = modalResult.Data as PrintGeneralPayrollModal;
            var psgcCode = localStorage.GetItem<string>("AdminPsgcCode");

            //string arrayOfParameter = string.Format("{0}#{1}#{2}#{3}#{4}", psgcCode, data.SignatoryName.Replace(", ", "$"),
            //            data.SignatoryPosition, data.Period.ToString("yyyy-MM-dd"), data.CutOff);

            //string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParameter, System.Text.Encoding.Unicode);
            //string url = $"/viewer/{"PayrollSummaryReport"}/{_encryptedParameter}";
            //await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        }
    }

    async Task ShowOtherLoansModal()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true
            };

        var _modalStatus = Modal.Show<OtherLoansModal>("Other Loans", options);
        var modalResult = await _modalStatus.Result;
    }

    async Task AppointmentTemporary()
    {

    }

    async Task ShowModalForLoansPremium()
    {
        var options = new ModalOptions()
            {
                DisableBackgroundCancel = true,
                //Animation = ModalAnimation.FadeIn(0.2),
                ContentScrollable = true,
            };

        var _modalStatus = Modal.Show<PrintLoansAndPremiumSummaryModal>
    ("Loans and Premiums Summary Report", options);
        var modalResult = await _modalStatus.Result;
        if (!modalResult.Cancelled)
        {
            var data = modalResult.Data as LoansPremiumSummaryReport;
            //var psgcCode = localStorage.GetItem<string>
            //("AdminPsgcCode");

            var user = (await _AutService.GetAuthenticationStateAsync()).User;
            string userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
            string temp = user.FindFirst(c => c.Type.Contains("FullName"))?.Value;
            //string username = temp.Replace(", ", "$");
            string username = "";
            var psgcCode = localStorage.GetItem<string>
                ("AdminPsgcCode");

            if (string.IsNullOrEmpty(temp))
            {
                username = user.FindFirst(c => c.Type.Contains("givenname"))?.Value;
            }

            string arrayOfParameter = string.Format("{0}#{1}#{2}#{3}#{4}", username, data.IsPlantilla,
            data.MonthYear.ToString("yyyy-MM-dd"), psgcCode, userId);

            string _encryptedParameter = _crypto.ConvertStringToHex(arrayOfParameter, System.Text.Encoding.Unicode);
            string url = $"/viewer/{"LoansAndPremiumSummary"}/{_encryptedParameter}";
            await JSRuntime.InvokeAsync
            <object>
                ("open", url, "_blank");
        }
    }
}
