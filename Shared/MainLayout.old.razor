@inherits LayoutComponentBase
@using System.Timers
@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using HRMSv4.Shared
@using HRMSv4.Shared.Auth
@using System.Diagnostics
@using HRMSv4.Client.Shared.MainComponents
@inject IJSRuntime _js
@inject NavigationManager nav
@using Microsoft.JSInterop

<link rel="stylesheet" href="_content/Radzen.Blazor/css/default.css" />
<style>
    body {
        overflow: auto;
    }
    .blazored-modal-focus-trap {
        z-index: 102;
    }

    .mainBlockUI {
        flex: 1;
    }

        .mainBlockUI .top-row {
            background-color: #f7f7f7;
            border-bottom: 1px solid #d6d5d5;
            justify-content: flex-end;
        }

            .mainBlockUI .top-row > a, .main .top-row .btn-link {
                white-space: nowrap;
                margin-left: 1.5rem;
            }

            .mainBlockUI .top-row a:first-child {
                overflow: hidden;
                text-overflow: ellipsis;
            }
</style>
<Spinner></Spinner>
<AuthorizeView>
    <Authorized>
        <div class="app-container app-theme-white fixed-footer body-tabs-shadow fixed-header fixed-sidebar closed-sidebar">
            <div class="app-header header-shadow">
                <Header />
            </div>
            <div class="app-main">
                <AuthorizeView Context="ApplicantItem" Roles="Job Seeker">
                    <div class="app-sidebar sidebar-shadow" style="height:unset !important">
                        <Sidebarv2 />
                    </div>
                    <div class="app-main__outer" style="padding-left: 0 !important;">
                        <div class="app-main__inner">
                            @Body
                            <RadzenContextMenu />
                        </div>
                        <Footer />
                    </div>
                </AuthorizeView>
                <AuthorizeView Context="AuthorizeItem" Roles="Job Provider, Administrator, Employee">
                    <div class="app-sidebar sidebar-shadow">
                        <Sidebarv2 />
                    </div>
                    <div class="app-main__outer">
                        <div class="app-main__inner">
                            @Body
                            <RadzenContextMenu />
                        </div>
                        <Footer />
                    </div>
                </AuthorizeView>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="main">
            <div class="content px-4">
                @Body
                <RadzenContextMenu />
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

<div class="app-drawer-overlay d-none animated fadeIn"></div>

@*<BlockUserInterfaceMessage Name="mainBlockUI">
    <div id="test" class="d-flex align-items-center justify-content-center">
        <i class="fa fa-spinner fa-spin fa-3x fa-fw"></i>
        <span class="sr-only">Loading...</span>
    </div>
</BlockUserInterfaceMessage>*@

@code {
    private Timer timerObj;

    //private AppInfo userInfo = new AppInfo();

    protected override async Task OnInitializedAsync()
    {
        //if (firstRender)
        //{
        //    // Set the Timer delay.
        //    timerObj = new Timer(3000);
        //    timerObj.Elapsed += UpdateTimer;
        //    timerObj.AutoReset = false;
        //    // Identify whether the user is active or inactive using onmousemove and onkeypress in JS function.
        //    var dotnetOjbect = DotNetObjectReference.Create(this);
        //    await _js.InvokeVoidAsync("timeOutCall", dotnetOjbect);
        //}
    }

    [JSInvokable]
    public void TimerInterval()
    {
        // Resetting the Timer if the user in active state.
        timerObj.Stop();
        // Call the TimeInterval to logout when the user is inactive.
        timerObj.Start();
    }

    //private void UpdateTimer(Object source, ElapsedEventArgs e)
    //{
    //    InvokeAsync(async () =>
    //    {
    //        // Log out when the user is inactive.
    //        var user = (await _AutService.GetAuthenticationStateAsync()).User;
    //        if (!user.Identity.IsAuthenticated)

    //            if (user.Identity.IsAuthenticated)
    //            {
    //                /* Your session is about to timeout in 5 minutes and 0 seconds */
    //                /* Do you wish to stay connected */
    //                /* Yes No (Logout)*/
    //                /* If no response redirect to page session timeout*/

    //                var userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;

    //                await _authInterfaceService.Logout(userId);
    //            }
    //    });
    //}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        /*Jbox Scripts*/
        var jquery360 = "/Scripts/jbox/jquery-3.6.0.min.js";
        await _js.InvokeVoidAsync("loadJs", jquery360);

        var wow = "/Scripts/jbox/wow.js";
        await _js.InvokeVoidAsync("loadJs", wow);

        var scrollup = "/Scripts/jbox/scrollup.js";
        await _js.InvokeVoidAsync("loadJs", scrollup);

        var main = "/Scripts/jbox/main.js";
        await _js.InvokeVoidAsync("loadJs", main);

        /*ArchitectUI Scripts*/
        var wizUrl = "/Scripts/js/jquery.smartWizard.min.js";
        await _js.InvokeVoidAsync("loadJs", wizUrl);

        var formUrl = "/Scripts/js/form-wizard.js";
        await _js.InvokeVoidAsync("loadJs", formUrl);

        var perfectScrollBarUrl = "/Scripts/js/perfect-scrollbar.js";
        await _js.InvokeVoidAsync("loadJs", perfectScrollBarUrl);

        var blockUIrUrl = "/Scripts/js/jquery.blockUI.js";
        await _js.InvokeVoidAsync("loadJs", blockUIrUrl);

        var scrollbarUrl = "/Scripts/js/scrollbar.js";
        await _js.InvokeVoidAsync("loadJs", scrollbarUrl);

        var metisMenuUrl = "/Scripts/js/metisMenu.js";
        await _js.InvokeVoidAsync("loadJs", metisMenuUrl);

        var demoUrl = "/Scripts/js/demo.js";
        await _js.InvokeVoidAsync("loadJs", demoUrl);

        var blockUI2rUrl = "/Scripts/js/blockui.js";
        await _js.InvokeVoidAsync("loadJs", blockUI2rUrl);

        var appUrl = "/Scripts/js/app.js";
        await _js.InvokeVoidAsync("loadJs", appUrl);
    }
}

