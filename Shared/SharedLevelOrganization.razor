@inject ILevel levelService
@inject IAddress _psgc
@inject ILevelOrganization levelOrganizationService
@inject ILevel levelService
@inject IPosition positionService
@inject ISalaryGrade salaryService
@inject IGeneralPolicy generalPolicyService
@inject IPlantilla plantillaService
@inject IJobCategory jobService
@inject IJobVacancies jobVacancyService

<div class="container col-sm-12 col-md-10 col-xl-4" style="max-width:400px">
    <EditForm Model="@setModel">
        @*<div class="position-relative mb-3">
        <label for="exampleAddress2" class="form-label">Select Level</label>
        <RadzenDropDown Change="@(args => SetLevels(selectedLevel))" Placeholder="" AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@colTreelist @bind-Value="@selectedLevel"
        TextProperty="Name" ValueProperty="LevelId" Class="w-100" />


        </div>*@
        <div class="position-relative mb-3">
            <label for="exampleAddress2" class="form-label">Select Level</label>
            <button hidden="@isOrgBreadHidden" @onclick="@LevelOrgSelection" class="mb-2 me-2 btn-icon btn-pill btn btn-outline-primary float-right">
                <i class="pe-7s-search btn-icon-wrapper"></i>Search
            </button>

            <div class="input-group mb-3">
                <RadzenBreadCrumb style="margin-left:3px" hidden="@isOrgBreadHidden">
                    @*<RadzenBreadCrumbItem Icon="search" @onclick="@LevelOrgSelection"/>*@
                    @if (list.Any())
                    {
                        <ul style="padding: unset; margin: unset;">
                            @foreach (var item in list)
                            {
                                @item
                            }
                        </ul>
                    }
                </RadzenBreadCrumb>
                <RadzenDropDown hidden="@isOrgHidden" Change="@(args => SetLevels(selectedLevel))" Placeholder="" AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@allLevels @bind-Value="@selectedLevel"
                                TextProperty="FullName" ValueProperty="ChildId" style="width:300px" />
                <button hidden="@isCancelBtnHidden" @onclick="@CancelLevelOrgSelection" class="btn btn-secondary">Cancel</button>
            </div>

        </div>

        @*highest*@
        <div class="position-relative mb-3">
            <label for="exampleAddress2" class="form-label">Select @highestLevelLabel</label>
            <RadzenDropDown Change="@(args => SetLevelOrg(lvlOrgITem.Value, 1))" Placeholder="" AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@_orgLevel @bind-Value="lvlOrgITem.Value"
                            TextProperty="Text" ValueProperty="Value" Class="w-100" />

        </div>
        @*lvl1*@
        <div class="position-relative mb-3" hidden="@(setModel.Level1 > 0 || _orgLevel1.Count() > 0 ? false : true )">
            <label for="exampleAddress2" class="form-label">Select @Level1Label</label>

            <div style="display: flex; align-items: center">
                <RadzenDropDown Disabled="@IsLevel1Disable" Change="@(args => SetLevelOrg(lvlOrgITem1.Value, 2))" Placeholder="" AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@_orgLevel1 @bind-Value="lvlOrgITem1.Value"
                                TextProperty="Text" ValueProperty="Value" Class="w-100"  />
                <div class="ball-clip-rotate-pulse" style="margin:20px" hidden="@(IsLevel1Hidden)">
                                <div></div>
                            </div>
            </div>
        </div>
        <div class="position-relative mb-3" hidden="@( setModel.Level2 > 0 || _orgLevel2.Count() > 0 ? false : true  )">
            <label for="exampleAddress2" class="form-label">Select @Level2Label</label>
             <div style="display: flex; align-items: center">
                <RadzenDropDown Disabled="@IsLevel2Disable" Change="@(args => SetLevelOrg(lvlOrgITem2.Value, 3))" Placeholder="" AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@_orgLevel2 @bind-Value="lvlOrgITem2.Value"
                                TextProperty="Text" ValueProperty="Value" Class="w-100" />
                <div class="ball-clip-rotate-pulse" style="margin:20px" hidden="@(IsLevel2Hidden)">
                                <div></div>
                            </div>
            </div>

        </div>
        <div class="position-relative mb-3" hidden="@( setModel.Level3 > 0 || _orgLevel3.Count() > 0  ? false : true  )">
            <label for="exampleAddress2" class="form-label">Select @Level3Label</label>        
            <div style="display: flex; align-items: center">
                <RadzenDropDown Disabled="@IsLevel3Disable" Change="@(args => SetLevelOrg(lvlOrgITem3.Value, 4))" Placeholder="" AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@_orgLevel3 @bind-Value="lvlOrgITem3.Value"
                            TextProperty="Text" ValueProperty="Value" Class="w-100" />
                <div class="ball-clip-rotate-pulse" style="margin:20px" hidden="@(IsLevel3Hidden)">
                                <div></div>
                            </div>
            </div>
        </div>
        <div class="position-relative mb-3" hidden="@( setModel.Level4 > 0 || _orgLevel4.Count() > 0  ? false : true  )">
            <label for="exampleAddress2" class="form-label">Select @Level4Label</label>
            <RadzenDropDown Disabled="@IsLevel4Disable" Change="@(args => SetLevelOrg(lvlOrgITem4.Value, 5))" Placeholder="" AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@_orgLevel4 @bind-Value="lvlOrgITem4.Value"
                            TextProperty="Text" ValueProperty="Value" Class="w-100" />

        </div>
        <div class="position-relative mb-3" hidden="@( setModel.Level5 > 0 || _orgLevel5.Count() > 0  ? false : true  )">
            <label for="exampleAddress2" class="form-label">Select @Level5Label</label>           
            <div style="display: flex; align-items: center">
                <RadzenDropDown Disabled="@IsLevel5Disable" Change="@(args => SetLevelOrg(lvlOrgITem5.Value, 6))" Placeholder="" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@_orgLevel5 @bind-Value="lvlOrgITem5.Value"
                                TextProperty="Text" ValueProperty="Value" Class="w-100" />
                <div class="ball-clip-rotate-pulse" style="margin:20px" hidden="@(IsLevel5Hidden)">
                    <div></div>
                </div>
            </div>
        </div>
        <div class="position-relative mb-3" hidden="@( setModel.Level6 > 0 || _orgLevel6.Count() > 0  ? false : true  )">
            <label for="exampleAddress2" class="form-label">Select @Level6Label</label>         
            <div style="display: flex; align-items: center">
                <RadzenDropDown Disabled="@IsLevel6Disable" Change="@(args => SetLevelOrg(lvlOrgITem6.Value, 7))" Placeholder="" AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@_orgLevel6 @bind-Value="lvlOrgITem6.Value"
                                TextProperty="Text" ValueProperty="Value" Class="w-100" />
                <div class="ball-clip-rotate-pulse" style="margin:20px" hidden="@(IsLevel6Hidden)">
                    <div></div>
                </div>
            </div>
        </div>
        <div class="position-relative mb-3" hidden="@( setModel.Level7 > 0 || _orgLevel7.Count() > 0  ? false : true  )">
            <label for="exampleAddress2" class="form-label">Select @Level7Label</label>            
            <div style="display: flex; align-items: center">
                <RadzenDropDown Disabled="@IsLevel7Disable" Change="@(args => SetLevelOrg(lvlOrgITem7.Value, 8))" Placeholder="" AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@_orgLevel7 @bind-Value="lvlOrgITem7.Value"
                                TextProperty="Text" ValueProperty="Value" Class="w-100" />
                <div class="ball-clip-rotate-pulse" style="margin:20px" hidden="@(IsLevel7Hidden)">
                    <div></div>
                </div>
            </div>
        </div>
        <div class="position-relative mb-3" hidden="@( setModel.Level8 > 0 || _orgLevel8.Count() > 0  ? false : true  )">
            <label for="exampleAddress2" class="form-label">Select @Level8Label</label>
            <div style="display: flex; align-items: center">
                <RadzenDropDown Disabled="@IsLevel8Disable" Change="@(args => SetLevelOrg(lvlOrgITem8.Value, 9))" Placeholder="" AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@_orgLevel8 @bind-Value="lvlOrgITem8.Value"
                                TextProperty="Text" ValueProperty="Value" Class="w-100" />
                <div class="ball-clip-rotate-pulse" style="margin:20px" hidden="@(IsLevel8Hidden)">
                    <div></div>
                </div>
            </div>
        </div>
        <div class="position-relative mb-3" hidden="@( setModel.Level9 > 0 || _orgLevel9.Count() > 0  ? false : true  )">
            <label for="exampleAddress2" class="form-label">Select @Level9Label</label>
            <div style="display: flex; align-items: center">
                <RadzenDropDown Disabled="@IsLevel9Disable" Change="@(args => SetLevelOrg(lvlOrgITem9.Value, 10))" Placeholder="" AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@_orgLevel9 @bind-Value="lvlOrgITem9.Value"
                                TextProperty="Text" ValueProperty="Value" Class="w-100" />
                <div class="ball-clip-rotate-pulse" style="margin:20px" hidden="@(IsLevel9Hidden)">
                    <div></div>
                </div>
            </div>
        </div>
        <div class="position-relative mb-3" hidden="@( setModel.Level10 > 0 || _orgLevel10.Count() > 0  ? false : true  )">
            <label for="exampleAddress2" class="form-label">Select @Level10Label</label>
            <div style="display: flex; align-items: center">
                <RadzenDropDown Disabled="@IsLevel10Disable" Placeholder="" AllowClear="false" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@_orgLevel10 @bind-Value="lvlOrgITem10.Value"
                                TextProperty="Text" ValueProperty="Value" Class="w-100" />
                <div class="ball-clip-rotate-pulse" style="margin:20px" hidden="@(IsLevel10Hidden)">
                    <div></div>
                </div>
            </div>
        </div>
        <div class="position-relative mb-3" hidden="@(validatorHidden)">
            <span style="color:red;">*Organization does not have open plantilla</span>
        </div>

        <div class="pull-right">
            <button type="button" class="btn btn-default" @onclick="@Close">Cancel</button>
            <button type="button" class="btn btn-primary" @onclick="@Save">Select Organization</button>
        </div>

    </EditForm>





</div>

@code {
    //[Parameter] public EventCallback<int> OnClick { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int selectedLevelOrganizationId { get; set; } = 0;
    [Parameter] public bool IsPlantilla { get; set; } = false;
    int selectedLevel = 0;
    int parentLevel = 0;
    private List<HRMSv4.Shared.OnBoarding.TreeNode> colAllTags { get; set; } = new List<HRMSv4.Shared.OnBoarding.TreeNode>();
    HRMSv4.Shared.OnBoarding.TreeNode selectedNodeLevel = new HRMSv4.Shared.OnBoarding.TreeNode();
    private List<HRMSv4.Shared.OnBoarding.Level> colDataNode { get; set; } = new List<HRMSv4.Shared.OnBoarding.Level>();
    IEnumerable<HRMSv4.Shared.OnBoarding.Level> levels;
    List<Level> colTreelist = new List<Level>();
    List<ParentChildLevel> allLevels = new List<ParentChildLevel>();

    string highestLevelLabel = "";
    string Level1Label = "";
    string Level2Label = "";
    string Level3Label = "";
    string Level4Label = "";
    string Level5Label = "";
    string Level6Label = "";
    string Level7Label = "";
    string Level8Label = "";
    string Level9Label = "";
    string Level10Label = "";
    List<SelectListItems> _orgLevel = new List<SelectListItems>();
    List<SelectListItems> _orgLevel1 = new List<SelectListItems>();
    List<SelectListItems> _orgLevel2 = new List<SelectListItems>();
    List<SelectListItems> _orgLevel3 = new List<SelectListItems>();
    List<SelectListItems> _orgLevel4 = new List<SelectListItems>();
    List<SelectListItems> _orgLevel5 = new List<SelectListItems>();
    List<SelectListItems> _orgLevel6 = new List<SelectListItems>();
    List<SelectListItems> _orgLevel7 = new List<SelectListItems>();
    List<SelectListItems> _orgLevel8 = new List<SelectListItems>();
    List<SelectListItems> _orgLevel9 = new List<SelectListItems>();
    List<SelectListItems> _orgLevel10 = new List<SelectListItems>();
    SelectListItems lvlOrgITem = new SelectListItems();
    SelectListItems lvlOrgITem1 = new SelectListItems();
    SelectListItems lvlOrgITem2 = new SelectListItems();
    SelectListItems lvlOrgITem3 = new SelectListItems();
    SelectListItems lvlOrgITem4 = new SelectListItems();
    SelectListItems lvlOrgITem5 = new SelectListItems();
    SelectListItems lvlOrgITem6 = new SelectListItems();
    SelectListItems lvlOrgITem7 = new SelectListItems();
    SelectListItems lvlOrgITem8 = new SelectListItems();
    SelectListItems lvlOrgITem9 = new SelectListItems();
    SelectListItems lvlOrgITem10 = new SelectListItems();
    SetLevels setModel = new SetLevels();
    RadzenBreadCrumbItem breads { get; set; }
    public List<RenderFragment> list = new List<RenderFragment>();
    bool isOrgHidden = true;
    bool isOrgBreadHidden = false;
    bool isCancelBtnHidden = true;
    bool validatorHidden = true;

    bool IsLevel1Disable = true;
    bool IsLevel2Disable = true;
    bool IsLevel3Disable = true;
    bool IsLevel4Disable = true;
    bool IsLevel5Disable = true;
    bool IsLevel6Disable = true;
    bool IsLevel7Disable = true;
    bool IsLevel8Disable = true;
    bool IsLevel9Disable = true;
    bool IsLevel10Disable = true;

    bool IsLevel1Hidden = true;
    bool IsLevel2Hidden = true;
    bool IsLevel3Hidden = true;
    bool IsLevel4Hidden = true;
    bool IsLevel5Hidden = true;
    bool IsLevel6Hidden = true;
    bool IsLevel7Hidden = true;
    bool IsLevel8Hidden = true;
    bool IsLevel9Hidden = true;
    bool IsLevel10Hidden = true;

    protected override async Task OnInitializedAsync()
    {
        setModel = new SetLevels();
        highestLevelLabel = await levelService.GetLabel();
        _orgLevel = await levelOrganizationService.GetDepartments(IsPlantilla);

        allLevels = await levelService.ParentToChildLevels();
        //await GetParentOrganizations();

        //from previous component kunin si level id kung meron
        if (selectedLevelOrganizationId > 0)
        {
            await FillDropDown();
        }
        else
        {
            await SetLevels(1);
            selectedLevel = 1;
            lvlOrgITem.Value = "All";
            //StateHasChanged();
        }
    }

    public async Task LevelOrgSelection()
    {
        isOrgBreadHidden = true;
        isOrgHidden = false;
        isCancelBtnHidden = false;
        StateHasChanged();
    }

    public async Task CancelLevelOrgSelection()
    {
        isOrgBreadHidden = false;
        isOrgHidden = true;
        isCancelBtnHidden = true;
        StateHasChanged();
    }

    public async Task AddComponent(string lvl)
    {
        //list = new List<RenderFragment>();
        list.Add(CreateDynamicComponent(lvl));
        this.StateHasChanged();


    }

    RenderFragment CreateDynamicComponent(string Lvl) => builder =>
     {
         builder.OpenComponent(0, typeof(RadzenBreadCrumbItem));
         //builder.AddAttribute(1,"Path", "/");
         builder.AddAttribute(1, "Text", Lvl);
         builder.CloseComponent();
     };

    async Task FillDropDown()
    {
        var getLevel = await levelOrganizationService.Get(selectedLevelOrganizationId);
        await SetLevels(getLevel.LevelId);
        selectedLevel = getLevel.LevelId;

        var levelsOrgs = await levelOrganizationService.GetOrgLevels(selectedLevelOrganizationId);
        lvlOrgITem.Value = levelsOrgs.Level0 > 0 ? levelsOrgs.Level0.ToString() : "All";

        _orgLevel1 = levelsOrgs.Level0 > 0 ? await levelOrganizationService.GetSubChildList(levelsOrgs.Level0.Value, setModel.Level1.Value, IsPlantilla) : new List<SelectListItems>();
        lvlOrgITem1.Value = _orgLevel1.Count() > 0 ? levelsOrgs.Level1.ToString() : "All";

        _orgLevel2 = levelsOrgs.Level1 > 0 ? await levelOrganizationService.GetSubChildList(levelsOrgs.Level1.Value, setModel.Level2.Value, IsPlantilla) : new List<SelectListItems>();
        lvlOrgITem2.Value = _orgLevel2.Count() > 0 ? levelsOrgs.Level2.ToString() : "All";

        _orgLevel3 = levelsOrgs.Level2 > 0 ? await levelOrganizationService.GetSubChildList(levelsOrgs.Level2.Value, setModel.Level3.Value, IsPlantilla) : new List<SelectListItems>();
        lvlOrgITem3.Value = _orgLevel3.Count() > 0 ? levelsOrgs.Level3.ToString() : "All";

        _orgLevel4 = levelsOrgs.Level3 > 0 ? await levelOrganizationService.GetSubChildList(levelsOrgs.Level3.Value, setModel.Level4.Value, IsPlantilla) : new List<SelectListItems>();
        lvlOrgITem4.Value = _orgLevel4.Count() > 0 ? levelsOrgs.Level4.ToString() : "All";

        _orgLevel5 = levelsOrgs.Level4 > 0 ? await levelOrganizationService.GetSubChildList(levelsOrgs.Level4.Value, setModel.Level5.Value, IsPlantilla) : new List<SelectListItems>();
        lvlOrgITem5.Value = _orgLevel5.Count() > 0 ? levelsOrgs.Level5.ToString() : "All";

        _orgLevel6 = levelsOrgs.Level5 > 0 ? await levelOrganizationService.GetSubChildList(levelsOrgs.Level5.Value, setModel.Level6.Value, IsPlantilla) : new List<SelectListItems>();
        lvlOrgITem6.Value = _orgLevel6.Count() > 0 ? levelsOrgs.Level6.ToString() : "All";

        _orgLevel7 = levelsOrgs.Level6 > 0 ? await levelOrganizationService.GetSubChildList(levelsOrgs.Level6.Value, setModel.Level7.Value, IsPlantilla) : new List<SelectListItems>();
        lvlOrgITem7.Value = _orgLevel7.Count() > 0 ? levelsOrgs.Level7.ToString() : "All";

        _orgLevel8 = levelsOrgs.Level7 > 0 ? await levelOrganizationService.GetSubChildList(levelsOrgs.Level7.Value, setModel.Level8.Value, IsPlantilla) : new List<SelectListItems>();
        lvlOrgITem8.Value = _orgLevel8.Count() > 0 ? levelsOrgs.Level8.ToString() : "All";

        _orgLevel9 = levelsOrgs.Level8 > 0 ? await levelOrganizationService.GetSubChildList(levelsOrgs.Level8.Value, setModel.Level9.Value, IsPlantilla) : new List<SelectListItems>();
        lvlOrgITem9.Value = _orgLevel9.Count() > 0 ? levelsOrgs.Level9.ToString() : "All";

        _orgLevel10 = levelsOrgs.Level9 > 0 ? await levelOrganizationService.GetSubChildList(levelsOrgs.Level9.Value, setModel.Level10.Value, IsPlantilla) : new List<SelectListItems>();
        lvlOrgITem10.Value = _orgLevel10.Count() > 0 ? levelsOrgs.Level10.ToString() : "All";

        IsLevel1Disable = _orgLevel1.Count() > 0 ? false : true;
        IsLevel2Disable = _orgLevel2.Count() > 0 ? false : true;
        IsLevel3Disable = _orgLevel3.Count() > 0 ? false : true;
        IsLevel4Disable = _orgLevel4.Count() > 0 ? false : true;
        IsLevel5Disable = _orgLevel5.Count() > 0 ? false : true;
        IsLevel6Disable = _orgLevel6.Count() > 0 ? false : true;
        IsLevel7Disable = _orgLevel7.Count() > 0 ? false : true;
        IsLevel8Disable = _orgLevel8.Count() > 0 ? false : true;
        IsLevel9Disable = _orgLevel9.Count() > 0 ? false : true;
        IsLevel10Disable = _orgLevel10.Count() > 0 ? false : true;

        StateHasChanged();
    }

    async Task GetParentOrganizations()
    {
        levels = await levelService.GetAll();
        colDataNode = levels.ToList();
        colAllTags = await GetTree(colDataNode);

        var firstTag = colAllTags.First();
        selectedNodeLevel.LevelId = firstTag.LevelId;
        selectedNodeLevel.NodeName = firstTag.NodeName;

        // Get colTreelist
        colTreelist =
            await GetTreeList(colAllTags, selectedNodeLevel);

        StateHasChanged();
    }

    public static async Task<List<TreeNode>> GetTree(List<Level> DataNodes)
    {
        List<TreeNode> ColTreeNodes = new List<TreeNode>();
        // Get all the top level nodes
        foreach (var node in DataNodes.Where(x => x.ParentId == 0))
        {
            TreeNode objTreeNode = new TreeNode();
            objTreeNode.LevelId = node.LevelId;
            objTreeNode.NodeName = node.Name;
            objTreeNode.Children = new List<TreeNode>();
            ColTreeNodes.Add(objTreeNode);
            //Recursively call the AddChildren method adding all children
            AddChildren(DataNodes, ColTreeNodes, objTreeNode);
        }
        return ColTreeNodes;
    }

    private static void AddChildren(List<Level> colNodeItemCollection, List<TreeNode> colTreeNodeCollection, TreeNode paramTreeNode)
    {
        var ChildResults = from objNode in colNodeItemCollection
                           where objNode.ParentId == paramTreeNode.LevelId
                           select objNode;
        // Loop thru each Child of the current Node
        foreach (var objChild in ChildResults)
        {
            // Create a new Node
            var objNewNode = new TreeNode();
            objNewNode.LevelId = objChild.LevelId;
            objNewNode.NodeName = objChild.Name;
            objNewNode.Children = new List<TreeNode>();
            objNewNode.ParentName = paramTreeNode.NodeName;
            paramTreeNode.Children.Add(objNewNode);
            AddChildren(colNodeItemCollection, colTreeNodeCollection, objNewNode);
        }
    }

    public static async Task<List<Level>> GetTreeList(
           List<TreeNode> TreeNodes, TreeNode CurrentSelectedNode)
    {
        List<Level> ColTreeNodes = new List<Level>();

        // Get all the top level nodes
        foreach (var node in TreeNodes)
        {
            ColTreeNodes.Add(
                new Level()
                    {
                        LevelId = node.LevelId,
                        ParentId = 0,
                        Name = node.NodeName
                    });

            // Recursively call the AddChildren method adding all children

            AddTreeListChildren(TreeNodes, ColTreeNodes, node);
        }

        // Prepare final collection
        List<Level> ColFinalTreeNodes = new List<Level>();

        foreach (var item in ColTreeNodes)
        {
            // Do not add the currently selected node to the list
            //if (item.LevelId != CurrentSelectedNode.LevelId)
            //{
            ColFinalTreeNodes.Add(item);
            //}
        }

        return ColFinalTreeNodes;
    }

    private static void AddTreeListChildren(
      List<TreeNode> colNodeItemCollection,
      List<Level> colTreeNodeCollection,
      TreeNode paramTreeNode)
    {
        // Get the children of the current item
        // This method may be called from the top level
        // or recursively by one of the child items

        // Loop thru each Child of the current Node
        foreach (var objChild in paramTreeNode.Children)
        {
            // Get the Parent node
            var ParentNode =
                colTreeNodeCollection
                .Where(x => x.LevelId == paramTreeNode.LevelId).FirstOrDefault();

            // See how many dots the Parent has
            int CountOfParentDots = ParentNode.Name.Count(x => x == '•');

            colTreeNodeCollection.Add(
                new Level()
                    {
                        LevelId = objChild.LevelId,
                        ParentId = ParentNode.LevelId,
                        Name = objChild.NodeName
                        //$"{AddDots(CountOfParentDots + 1)}{objChild.NodeName}"
                    });

            // Recursively call the AddChildren method adding all children
            AddTreeListChildren(colNodeItemCollection, colTreeNodeCollection, objChild);
        }
    }

    private static string AddDots(int intDots)
    {
        String strDots = "";
        for (int i = 0; i < intDots; i++)
        {
            strDots += "• ";
        }
        return strDots;
    }

    public async Task SetLevels(int selectedValue)
    {
        lvlOrgITem.Value = "All";
        list = new List<RenderFragment>();
        //@onclick="@(() => OnClick.InvokeAsync("Decline"))
        _orgLevel1 = new List<SelectListItems>();
        _orgLevel2 = new List<SelectListItems>();
        _orgLevel3 = new List<SelectListItems>();
        _orgLevel4 = new List<SelectListItems>();
        _orgLevel5 = new List<SelectListItems>();
        _orgLevel6 = new List<SelectListItems>();
        _orgLevel7 = new List<SelectListItems>();
        _orgLevel8 = new List<SelectListItems>();
        _orgLevel9 = new List<SelectListItems>();
        _orgLevel10 = new List<SelectListItems>();
        var getLevel = await levelService.Get(selectedValue);
        parentLevel = getLevel.ParentId;
        //set levels in class
        var getLvl = selectedValue > 1 ? await levelService.GetLevels(selectedValue) : null;

        setModel = getLvl != null ? getLvl : new SetLevels();
        var Level1 = setModel.Level1 > 0 ? await levelService.Get(setModel.Level1.Value) : null;
        var Level2 = setModel.Level2 > 0 ? await levelService.Get(setModel.Level2.Value) : null;
        var Level3 = setModel.Level3 > 0 ? await levelService.Get(setModel.Level3.Value) : null;
        var Level4 = setModel.Level4 > 0 ? await levelService.Get(setModel.Level4.Value) : null;
        var Level5 = setModel.Level5 > 0 ? await levelService.Get(setModel.Level5.Value) : null;
        var Level6 = setModel.Level6 > 0 ? await levelService.Get(setModel.Level6.Value) : null;
        var Level7 = setModel.Level7 > 0 ? await levelService.Get(setModel.Level7.Value) : null;
        var Level8 = setModel.Level8 > 0 ? await levelService.Get(setModel.Level8.Value) : null;
        var Level9 = setModel.Level9 > 0 ? await levelService.Get(setModel.Level9.Value) : null;
        var Level10 = setModel.Level10 > 0 ? await levelService.Get(setModel.Level10.Value) : null;

        Level1Label = Level1 != null ? Level1.Name : "";
        Level2Label = Level2 != null ? Level2.Name : "";
        Level3Label = Level3 != null ? Level3.Name : "";
        Level4Label = Level4 != null ? Level4.Name : "";
        Level5Label = Level5 != null ? Level5.Name : "";
        Level6Label = Level6 != null ? Level6.Name : "";
        Level7Label = Level7 != null ? Level7.Name : "";
        Level8Label = Level8 != null ? Level8.Name : "";
        Level9Label = Level9 != null ? Level9.Name : "";
        Level10Label = Level10 != null ? Level10.Name : "";

        List<string> lvls = new List<string>();

        lvls.Add(highestLevelLabel);
        if (Level1Label != "") { lvls.Add(Level1Label); }
        if (Level2Label != "") { lvls.Add(Level2Label); }
        if (Level3Label != "") { lvls.Add(Level3Label); }
        if (Level4Label != "") { lvls.Add(Level4Label); }
        if (Level5Label != "") { lvls.Add(Level5Label); }
        if (Level6Label != "") { lvls.Add(Level6Label); }
        if (Level7Label != "") { lvls.Add(Level7Label); }
        if (Level8Label != "") { lvls.Add(Level8Label); }
        if (Level9Label != "") { lvls.Add(Level9Label); }
        if (Level10Label != "") { lvls.Add(Level10Label); }

        for (int i = 0; i < lvls.Count(); i++)
        {
            string addBread = "";
            addBread = lvls[i];

            await AddComponent(addBread);
        }

        isOrgHidden = true;
        isOrgBreadHidden = false;
        isCancelBtnHidden = true;
        IsLevel1Disable = true;
        IsLevel2Disable = true;
        IsLevel3Disable = true;
        IsLevel4Disable = true;
        IsLevel5Disable = true;
        IsLevel6Disable = true;
        IsLevel7Disable = true;
        IsLevel8Disable = true;
        IsLevel9Disable = true;
        IsLevel10Disable = true;

        StateHasChanged();
    }

    //level 0 task
    public async Task SetLevelOrg(string selectedValue, int lvl)
    {
        
        int selectedOrganizationLevel = 0;
        selectedOrganizationLevel = selectedValue != "All" ? int.Parse(selectedValue) : 0;
        //IsLevel1Disable = true;
        //IsLevel2Disable = true;
        //IsLevel3Disable = true;
        //IsLevel4Disable = true;
        //IsLevel5Disable = true;
        //IsLevel6Disable = true;
        //IsLevel7Disable = true;
        //IsLevel8Disable = true;
        //IsLevel9Disable = true;
        //IsLevel10Disable = true;
        switch (lvl)
        {
            case 2:
                IsLevel1Disable = true;
                IsLevel2Hidden = false;
                _orgLevel2 = selectedOrganizationLevel > 0 ? await levelOrganizationService.GetSubChildList(selectedOrganizationLevel, setModel.Level2.Value, IsPlantilla) : new List<SelectListItems>();
                if (_orgLevel2.Count() == 0 && selectedValue != "All")
                {
                    setModel.Level2 = 0;
                    await ResetLevels(setModel.Level1.Value);
                }

                lvlOrgITem2.Value = "All";

                _orgLevel3 = new List<SelectListItems>();
                _orgLevel4 = new List<SelectListItems>();
                _orgLevel5 = new List<SelectListItems>();
                _orgLevel6 = new List<SelectListItems>();
                _orgLevel7 = new List<SelectListItems>();
                _orgLevel8 = new List<SelectListItems>();
                _orgLevel9 = new List<SelectListItems>();
                _orgLevel10 = new List<SelectListItems>();
                IsLevel2Disable = selectedValue != "All" ? false : true;
                IsLevel3Disable = true;
                IsLevel4Disable = true;
                IsLevel5Disable = true;
                IsLevel6Disable = true;
                IsLevel7Disable = true;
                IsLevel8Disable = true;
                IsLevel9Disable = true;
                IsLevel10Disable = true;
                IsLevel2Hidden = true;
                IsLevel1Disable = false;
                break;
            case 3:
                IsLevel2Disable = true;
                IsLevel3Hidden = false;
                _orgLevel3 = selectedOrganizationLevel > 0 ? await levelOrganizationService.GetSubChildList(selectedOrganizationLevel, setModel.Level3.Value, IsPlantilla) : new List<SelectListItems>();
                if (_orgLevel3.Count() == 0 && selectedValue != "All")
                {
                    setModel.Level3 = 0;
                    await ResetLevels(setModel.Level2.Value);
                }
                lvlOrgITem3.Value = "All";
                _orgLevel4 = new List<SelectListItems>();
                _orgLevel5 = new List<SelectListItems>();
                _orgLevel6 = new List<SelectListItems>();
                _orgLevel7 = new List<SelectListItems>();
                _orgLevel8 = new List<SelectListItems>();
                _orgLevel9 = new List<SelectListItems>();
                _orgLevel10 = new List<SelectListItems>();
                IsLevel3Disable = selectedValue != "All" ? false : true;
                IsLevel4Disable = true;
                IsLevel5Disable = true;
                IsLevel6Disable = true;
                IsLevel7Disable = true;
                IsLevel8Disable = true;
                IsLevel9Disable = true;
                IsLevel10Disable = true;
                IsLevel3Hidden = true;
                IsLevel2Disable = false;
                break;
            case 4:
                IsLevel3Disable = true;
                IsLevel4Hidden = false;
                _orgLevel4 = selectedOrganizationLevel > 0 ? await levelOrganizationService.GetSubChildList(selectedOrganizationLevel, setModel.Level4.Value, IsPlantilla) : new List<SelectListItems>();
                if (_orgLevel4.Count() == 0 && selectedValue != "All")
                {
                    setModel.Level4 = 0;
                    await ResetLevels(setModel.Level3.Value);
                }

                lvlOrgITem4.Value = "All";
                _orgLevel5 = new List<SelectListItems>();
                _orgLevel6 = new List<SelectListItems>();
                _orgLevel7 = new List<SelectListItems>();
                _orgLevel8 = new List<SelectListItems>();
                _orgLevel9 = new List<SelectListItems>();
                _orgLevel10 = new List<SelectListItems>();

                IsLevel4Disable = selectedValue != "All" ? false : true;
                IsLevel5Disable = true;
                IsLevel6Disable = true;
                IsLevel7Disable = true;
                IsLevel8Disable = true;
                IsLevel9Disable = true;
                IsLevel10Disable = true;
                IsLevel4Hidden = true;
                IsLevel3Disable = false;
                break;
            case 5:
                IsLevel4Disable = true;
                IsLevel5Hidden = false;
                _orgLevel5 = selectedOrganizationLevel > 0 ? await levelOrganizationService.GetSubChildList(selectedOrganizationLevel, setModel.Level5.Value, IsPlantilla) : new List<SelectListItems>();
                if (_orgLevel5.Count() == 0 && selectedValue != "All")
                {
                    setModel.Level5 = 0;
                    await ResetLevels(setModel.Level4.Value);
                }


                lvlOrgITem5.Value = "All";
                _orgLevel6 = new List<SelectListItems>();
                _orgLevel7 = new List<SelectListItems>();
                _orgLevel8 = new List<SelectListItems>();
                _orgLevel9 = new List<SelectListItems>();
                _orgLevel10 = new List<SelectListItems>();
                IsLevel5Disable = selectedValue != "All" ? false : true;
                IsLevel6Disable = true;
                IsLevel7Disable = true;
                IsLevel8Disable = true;
                IsLevel9Disable = true;
                IsLevel10Disable = true;
                IsLevel5Hidden = true;
                IsLevel4Disable = false;
                break;
            case 6:
                IsLevel5Disable = true;
                IsLevel6Hidden = false;
                _orgLevel6 = selectedOrganizationLevel > 0 ? await levelOrganizationService.GetSubChildList(selectedOrganizationLevel, setModel.Level6.Value, IsPlantilla) : new List<SelectListItems>();
                if (_orgLevel6.Count() == 0 && selectedValue != "All")
                {
                    setModel.Level6 = 0;
                    await ResetLevels(setModel.Level5.Value);
                }

                lvlOrgITem6.Value = "All";
                _orgLevel7 = new List<SelectListItems>();
                _orgLevel8 = new List<SelectListItems>();
                _orgLevel9 = new List<SelectListItems>();
                _orgLevel10 = new List<SelectListItems>();

                IsLevel6Disable = selectedValue != "All" ? false : true;
                IsLevel7Disable = true;
                IsLevel8Disable = true;
                IsLevel9Disable = true;
                IsLevel10Disable = true;
                IsLevel6Hidden = true;
                IsLevel5Disable = false;
                break;
            case 7:
                IsLevel6Disable = true;
                IsLevel7Hidden = false;
                _orgLevel7 = selectedOrganizationLevel > 0 ? await levelOrganizationService.GetSubChildList(selectedOrganizationLevel, setModel.Level7.Value, IsPlantilla) : new List<SelectListItems>();
                if (_orgLevel7.Count() == 0 && selectedValue != "All")
                {
                    setModel.Level7 = 0;
                    await ResetLevels(setModel.Level6.Value);
                }

                lvlOrgITem2.Value = "All";
                _orgLevel8 = new List<SelectListItems>();
                _orgLevel9 = new List<SelectListItems>();
                _orgLevel10 = new List<SelectListItems>();

                IsLevel7Disable = selectedValue != "All" ? false : true;
                IsLevel8Disable = true;
                IsLevel9Disable = true;
                IsLevel10Disable = true;
                IsLevel7Hidden = true;
                IsLevel6Disable = false;
                break;
            case 8:
                IsLevel7Disable = true;
                IsLevel8Hidden = false;
                _orgLevel8 = selectedOrganizationLevel > 0 ? await levelOrganizationService.GetSubChildList(selectedOrganizationLevel, setModel.Level8.Value, IsPlantilla) : new List<SelectListItems>();
                if (_orgLevel8.Count() == 0 && selectedValue != "All")
                {
                    setModel.Level8 = 0;
                    await ResetLevels(setModel.Level7.Value);
                }

                lvlOrgITem8.Value = "All";
                _orgLevel9 = new List<SelectListItems>();
                _orgLevel10 = new List<SelectListItems>();

                IsLevel8Disable = selectedValue != "All" ? false : true;
                IsLevel9Disable = true;
                IsLevel10Disable = true;
                IsLevel8Hidden = true;
                IsLevel7Disable = false;
                break;
            case 9:
                IsLevel8Disable = true;
                IsLevel9Hidden = false;
                _orgLevel9 = selectedOrganizationLevel > 0 ? await levelOrganizationService.GetSubChildList(selectedOrganizationLevel, setModel.Level9.Value, IsPlantilla) : new List<SelectListItems>();
                if (_orgLevel9.Count() == 0 && selectedValue != "All")
                {
                    setModel.Level9 = 0;
                    await ResetLevels(setModel.Level8.Value);
                }

                lvlOrgITem9.Value = "All";
                _orgLevel10 = new List<SelectListItems>();
                IsLevel9Disable = selectedValue != "All" ? false : true;
                IsLevel10Disable = true;
                IsLevel9Hidden = true;
                IsLevel8Disable = false;
                break;
            case 10:
                IsLevel9Disable = true;
                IsLevel10Hidden = false;
                _orgLevel10 = selectedOrganizationLevel > 0 ? await levelOrganizationService.GetSubChildList(selectedOrganizationLevel, setModel.Level10.Value, IsPlantilla) : new List<SelectListItems>();
                IsLevel10Disable = selectedValue != "All" ? false : true;
                IsLevel10Hidden = true;
                IsLevel9Disable = false;
                break;
            default:
                //base sa selected level ng dropdown doon sya kukuha ng childs
                IsLevel1Disable = true;
                IsLevel1Hidden = false;
                _orgLevel1 = selectedOrganizationLevel > 0 ? await levelOrganizationService.GetSubChildList(selectedOrganizationLevel, setModel.Level1.Value, IsPlantilla) : new List<SelectListItems>();
                if (_orgLevel1.Count() == 0 && selectedValue != "All")
                {
                    await ResetLevels(0);
                }


                lvlOrgITem1.Value = "All";
                _orgLevel2 = new List<SelectListItems>();
                _orgLevel3 = new List<SelectListItems>();
                _orgLevel4 = new List<SelectListItems>();
                _orgLevel5 = new List<SelectListItems>();
                _orgLevel6 = new List<SelectListItems>();
                _orgLevel7 = new List<SelectListItems>();
                _orgLevel8 = new List<SelectListItems>();
                _orgLevel9 = new List<SelectListItems>();
                _orgLevel10 = new List<SelectListItems>();

                IsLevel1Disable = selectedValue != "All" ? false : true;
                IsLevel2Disable = true;
                IsLevel3Disable = true;
                IsLevel4Disable = true;
                IsLevel5Disable = true;
                IsLevel6Disable = true;
                IsLevel7Disable = true;
                IsLevel8Disable = true;
                IsLevel9Disable = true;
                IsLevel10Disable = true;
                IsLevel1Hidden = true;
                break;
        }
        selectedLevelOrganizationId = selectedOrganizationLevel > 0 ? selectedOrganizationLevel : selectedLevelOrganizationId;
      
        StateHasChanged();
        //await OnClick.InvokeAsync();
    }

    async Task Close()
    {
        await ModalInstance.CancelAsync();
    }

    async Task Save()
    {
        if (IsPlantilla == true)
        {
            var checkPlantilla = await jobVacancyService.GetOpenList(selectedLevelOrganizationId, IsPlantilla);
            if (checkPlantilla.Count() == 0)
            {
                //await _Swal.FireAsync("Warning", "Organization does not have open plantilla", "warning");
                validatorHidden = false;
                StateHasChanged();
                return;
            }
        }

        //await ModalInstance.CloseAsync();
        await ModalInstance.CloseAsync(ModalResult.Ok(selectedLevelOrganizationId));
    }

    public async Task ResetLevels(int selLevel)
    {
        selectedLevel = selLevel;
        list = new List<RenderFragment>();
        //set levels in class
        var getLvl = selLevel > 1 ? await levelService.GetLevels(selLevel) : null;

        setModel = getLvl != null ? getLvl : new SetLevels();
        var Level1 = setModel.Level1 > 0 ? await levelService.Get(setModel.Level1.Value) : null;
        var Level2 = setModel.Level2 > 0 ? await levelService.Get(setModel.Level2.Value) : null;
        var Level3 = setModel.Level3 > 0 ? await levelService.Get(setModel.Level3.Value) : null;
        var Level4 = setModel.Level4 > 0 ? await levelService.Get(setModel.Level4.Value) : null;
        var Level5 = setModel.Level5 > 0 ? await levelService.Get(setModel.Level5.Value) : null;
        var Level6 = setModel.Level6 > 0 ? await levelService.Get(setModel.Level6.Value) : null;
        var Level7 = setModel.Level7 > 0 ? await levelService.Get(setModel.Level7.Value) : null;
        var Level8 = setModel.Level8 > 0 ? await levelService.Get(setModel.Level8.Value) : null;
        var Level9 = setModel.Level9 > 0 ? await levelService.Get(setModel.Level9.Value) : null;
        var Level10 = setModel.Level10 > 0 ? await levelService.Get(setModel.Level10.Value) : null;

        Level1Label = Level1 != null ? Level1.Name : "";
        Level2Label = Level2 != null ? Level2.Name : "";
        Level3Label = Level3 != null ? Level3.Name : "";
        Level4Label = Level4 != null ? Level4.Name : "";
        Level5Label = Level5 != null ? Level5.Name : "";
        Level6Label = Level6 != null ? Level6.Name : "";
        Level7Label = Level7 != null ? Level7.Name : "";
        Level8Label = Level8 != null ? Level8.Name : "";
        Level9Label = Level9 != null ? Level9.Name : "";
        Level10Label = Level10 != null ? Level10.Name : "";

        List<string> lvls = new List<string>();

        lvls.Add(highestLevelLabel);
        if (Level1Label != "") { lvls.Add(Level1Label); }
        if (Level2Label != "") { lvls.Add(Level2Label); }
        if (Level3Label != "") { lvls.Add(Level3Label); }
        if (Level4Label != "") { lvls.Add(Level4Label); }
        if (Level5Label != "") { lvls.Add(Level5Label); }
        if (Level6Label != "") { lvls.Add(Level6Label); }
        if (Level7Label != "") { lvls.Add(Level7Label); }
        if (Level8Label != "") { lvls.Add(Level8Label); }
        if (Level9Label != "") { lvls.Add(Level9Label); }
        if (Level10Label != "") { lvls.Add(Level10Label); }

        for (int i = 0; i < lvls.Count(); i++)
        {
            string addBread = "";
            addBread = lvls[i];

            await AddComponent(addBread);
        }

        isOrgHidden = true;
        isOrgBreadHidden = false;
        isCancelBtnHidden = true;

        StateHasChanged();
    }



}
